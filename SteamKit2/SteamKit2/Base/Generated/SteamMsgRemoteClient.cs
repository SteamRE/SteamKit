// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
//   Input: steammessages_remoteclient_service.steamclient.proto
// </auto-generated>

#region Designer generated code
#pragma warning disable CS0612, CS0618, CS1591, CS3021, IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
namespace SteamKit2.Internal
{

    public class RemoteClient : SteamUnifiedMessages.IUnifiedService
    {
        public static string ServiceName { get; } = "RemoteClient";

        /// <inheritdoc />
        public SteamUnifiedMessages UnifiedMessages { get; init; }

        public AsyncJob<SteamUnifiedMessages.ServiceMethodResponse<CRemoteClient_GetPairingInfo_Response>> GetPairingInfo(CRemoteClient_GetPairingInfo_Request request)
        {
            return UnifiedMessages.SendMessage<CRemoteClient_GetPairingInfo_Request, CRemoteClient_GetPairingInfo_Response>( "RemoteClient.GetPairingInfo#1", request );
        }

        public void NotifyOnline(CRemoteClient_Online_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_Online_Notification>( "RemoteClient.NotifyOnline#1", request );
        }

        public AsyncJob<SteamUnifiedMessages.ServiceMethodResponse<CRemoteClient_GetRecentClients_Response>> GetRecentClients(CRemoteClient_GetRecentClients_Request request)
        {
            return UnifiedMessages.SendMessage<CRemoteClient_GetRecentClients_Request, CRemoteClient_GetRecentClients_Response>( "RemoteClient.GetRecentClients#1", request );
        }

        public AsyncJob<SteamUnifiedMessages.ServiceMethodResponse<CRemoteClient_MarkTaskComplete_Response>> MarkTaskComplete(CRemoteClient_MarkTaskComplete_Request request)
        {
            return UnifiedMessages.SendMessage<CRemoteClient_MarkTaskComplete_Request, CRemoteClient_MarkTaskComplete_Response>( "RemoteClient.MarkTaskComplete#1", request );
        }

        public void NotifyReplyPacket(CRemoteClient_ReplyPacket_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_ReplyPacket_Notification>( "RemoteClient.NotifyReplyPacket#1", request );
        }

        public AsyncJob<SteamUnifiedMessages.ServiceMethodResponse<CRemoteClient_AllocateRelayServer_Response>> AllocateRelayServer(CRemoteClient_AllocateRelayServer_Request request)
        {
            return UnifiedMessages.SendMessage<CRemoteClient_AllocateRelayServer_Request, CRemoteClient_AllocateRelayServer_Response>( "RemoteClient.AllocateRelayServer#1", request );
        }

        public AsyncJob<SteamUnifiedMessages.ServiceMethodResponse<CRemoteClient_AllocateSDR_Response>> AllocateSDR(CRemoteClient_AllocateSDR_Request request)
        {
            return UnifiedMessages.SendMessage<CRemoteClient_AllocateSDR_Request, CRemoteClient_AllocateSDR_Response>( "RemoteClient.AllocateSDR#1", request );
        }

        public void SendSteamBroadcastPacket(CRemoteClient_SteamBroadcast_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_SteamBroadcast_Notification>( "RemoteClient.SendSteamBroadcastPacket#1", request );
        }

        public void SendSteamToSteamPacket(CRemoteClient_SteamToSteam_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_SteamToSteam_Notification>( "RemoteClient.SendSteamToSteamPacket#1", request );
        }

        public AsyncJob<SteamUnifiedMessages.ServiceMethodResponse<CRemotePlay_SessionStarted_Response>> SendRemotePlaySessionStarted(CRemotePlay_SessionStarted_Request request)
        {
            return UnifiedMessages.SendMessage<CRemotePlay_SessionStarted_Request, CRemotePlay_SessionStarted_Response>( "RemoteClient.SendRemotePlaySessionStarted#1", request );
        }

        public void SendRemotePlaySessionStopped(CRemotePlay_SessionStopped_Notification request)
        {
            UnifiedMessages.SendNotification<CRemotePlay_SessionStopped_Notification>( "RemoteClient.SendRemotePlaySessionStopped#1", request );
        }

        public void SendRemotePlayTogetherPacket(CRemotePlayTogether_Notification request)
        {
            UnifiedMessages.SendNotification<CRemotePlayTogether_Notification>( "RemoteClient.SendRemotePlayTogetherPacket#1", request );
        }

        public AsyncJob<SteamUnifiedMessages.ServiceMethodResponse<CRemoteClient_CreateRemotePlayTogetherInvitation_Response>> CreateRemotePlayTogetherInvitation(CRemoteClient_CreateRemotePlayTogetherInvitation_Request request)
        {
            return UnifiedMessages.SendMessage<CRemoteClient_CreateRemotePlayTogetherInvitation_Request, CRemoteClient_CreateRemotePlayTogetherInvitation_Response>( "RemoteClient.CreateRemotePlayTogetherInvitation#1", request );
        }

        public AsyncJob<SteamUnifiedMessages.ServiceMethodResponse<CRemoteClient_DeleteRemotePlayTogetherInvitation_Response>> DeleteRemotePlayTogetherInvitation(CRemoteClient_DeleteRemotePlayTogetherInvitation_Request request)
        {
            return UnifiedMessages.SendMessage<CRemoteClient_DeleteRemotePlayTogetherInvitation_Request, CRemoteClient_DeleteRemotePlayTogetherInvitation_Response>( "RemoteClient.DeleteRemotePlayTogetherInvitation#1", request );
        }

        public void HandleResponseMsg( string methodName, PacketClientMsgProtobuf packetMsg )
        {
            switch ( methodName )
            {
                case "GetPairingInfo":
                    UnifiedMessages.HandleResponseMsg<CRemoteClient_GetPairingInfo_Response>( packetMsg );
                    break;
                case "GetRecentClients":
                    UnifiedMessages.HandleResponseMsg<CRemoteClient_GetRecentClients_Response>( packetMsg );
                    break;
                case "MarkTaskComplete":
                    UnifiedMessages.HandleResponseMsg<CRemoteClient_MarkTaskComplete_Response>( packetMsg );
                    break;
                case "AllocateRelayServer":
                    UnifiedMessages.HandleResponseMsg<CRemoteClient_AllocateRelayServer_Response>( packetMsg );
                    break;
                case "AllocateSDR":
                    UnifiedMessages.HandleResponseMsg<CRemoteClient_AllocateSDR_Response>( packetMsg );
                    break;
                case "SendRemotePlaySessionStarted":
                    UnifiedMessages.HandleResponseMsg<CRemotePlay_SessionStarted_Response>( packetMsg );
                    break;
                case "CreateRemotePlayTogetherInvitation":
                    UnifiedMessages.HandleResponseMsg<CRemoteClient_CreateRemotePlayTogetherInvitation_Response>( packetMsg );
                    break;
                case "DeleteRemotePlayTogetherInvitation":
                    UnifiedMessages.HandleResponseMsg<CRemoteClient_DeleteRemotePlayTogetherInvitation_Response>( packetMsg );
                    break;
            }
        }

        public void HandleNotificationMsg( string methodName, PacketClientMsgProtobuf packetMsg )
        {
            switch ( methodName )
            {
                case "NotifyOnline":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_Online_Notification>( packetMsg );
                    break;
                case "NotifyReplyPacket":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_ReplyPacket_Notification>( packetMsg );
                    break;
                case "SendSteamBroadcastPacket":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_SteamBroadcast_Notification>( packetMsg );
                    break;
                case "SendSteamToSteamPacket":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_SteamToSteam_Notification>( packetMsg );
                    break;
                case "SendRemotePlaySessionStopped":
                    UnifiedMessages.HandleNotificationMsg<CRemotePlay_SessionStopped_Notification>( packetMsg );
                    break;
                case "SendRemotePlayTogetherPacket":
                    UnifiedMessages.HandleNotificationMsg<CRemotePlayTogether_Notification>( packetMsg );
                    break;
            }
        }
    }

    public class RemoteClientSteamClient : SteamUnifiedMessages.IUnifiedService
    {
        public static string ServiceName { get; } = "RemoteClientSteamClient";

        /// <inheritdoc />
        public SteamUnifiedMessages UnifiedMessages { get; init; }

        public void NotifyRegisterStatusUpdate(CRemoteClient_RegisterStatusUpdate_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_RegisterStatusUpdate_Notification>( "RemoteClientSteamClient.NotifyRegisterStatusUpdate#1", request );
        }

        public void NotifyUnregisterStatusUpdate(CRemoteClient_UnregisterStatusUpdate_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_UnregisterStatusUpdate_Notification>( "RemoteClientSteamClient.NotifyUnregisterStatusUpdate#1", request );
        }

        public void NotifyRemotePacket(CRemoteClient_RemotePacket_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_RemotePacket_Notification>( "RemoteClientSteamClient.NotifyRemotePacket#1", request );
        }

        public void NotifySteamBroadcastPacket(CRemoteClient_SteamBroadcast_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_SteamBroadcast_Notification>( "RemoteClientSteamClient.NotifySteamBroadcastPacket#1", request );
        }

        public void NotifySteamToSteamPacket(CRemoteClient_SteamToSteam_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_SteamToSteam_Notification>( "RemoteClientSteamClient.NotifySteamToSteamPacket#1", request );
        }

        public void NotifyRemotePlayTogetherPacket(CRemotePlayTogether_Notification request)
        {
            UnifiedMessages.SendNotification<CRemotePlayTogether_Notification>( "RemoteClientSteamClient.NotifyRemotePlayTogetherPacket#1", request );
        }

        public void NotifyTaskList(CRemoteClient_TaskList_Notification request)
        {
            UnifiedMessages.SendNotification<CRemoteClient_TaskList_Notification>( "RemoteClientSteamClient.NotifyTaskList#1", request );
        }

        public void HandleResponseMsg( string methodName, PacketClientMsgProtobuf packetMsg )
        {
        }

        public void HandleNotificationMsg( string methodName, PacketClientMsgProtobuf packetMsg )
        {
            switch ( methodName )
            {
                case "NotifyRegisterStatusUpdate":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_RegisterStatusUpdate_Notification>( packetMsg );
                    break;
                case "NotifyUnregisterStatusUpdate":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_UnregisterStatusUpdate_Notification>( packetMsg );
                    break;
                case "NotifyRemotePacket":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_RemotePacket_Notification>( packetMsg );
                    break;
                case "NotifySteamBroadcastPacket":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_SteamBroadcast_Notification>( packetMsg );
                    break;
                case "NotifySteamToSteamPacket":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_SteamToSteam_Notification>( packetMsg );
                    break;
                case "NotifyRemotePlayTogetherPacket":
                    UnifiedMessages.HandleNotificationMsg<CRemotePlayTogether_Notification>( packetMsg );
                    break;
                case "NotifyTaskList":
                    UnifiedMessages.HandleNotificationMsg<CRemoteClient_TaskList_Notification>( packetMsg );
                    break;
            }
        }
    }

}

#pragma warning restore CS0612, CS0618, CS1591, CS3021, IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
#endregion
