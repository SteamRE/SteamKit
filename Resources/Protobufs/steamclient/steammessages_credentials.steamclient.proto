import "google/protobuf/descriptor.proto";
import "steammessages_unified_base.steamclient.proto";

message CCredentials_TestAvailablePassword_Request {
	optional string password = 1;
	optional bytes sha_digest_password = 2;
	optional string account_name = 3;
}

message CCredentials_TestAvailablePassword_Response {
	optional bool is_valid = 3;
}

message CCredentials_GetSteamGuardDetails_Request {
	optional bool include_new_authentications = 1 [default = true, (description) = "Whether or not to populate the newauthentication field in the response"];
	optional string webcookie = 2 [(description) = "The user's Steam Guard machine auth cookie. If present, it'll be used to get the user's machine ID instead of the AM session."];
	optional fixed32 timestamp_minimum_wanted = 3;
	optional int32 ipaddress = 4;
}

message CCredentials_GetSteamGuardDetails_Response {
	message NewAuthentication {
		optional fixed32 timestamp_steamguard_enabled = 1;
		optional bool is_web_cookie = 2;
		optional int32 ipaddress = 3;
		optional string geoloc_info = 4;
		optional bool is_remembered = 5;
		optional string machine_name_user_supplied = 6;
		optional int32 status = 7;
	}

	message SessionData {
		optional uint64 machine_id = 1;
		optional string machine_name_userchosen = 2;
		optional fixed32 timestamp_machine_steamguard_enabled = 3;
		optional bool authentication_exists_from_geoloc_before_mintime = 4;
		repeated .CCredentials_GetSteamGuardDetails_Response.NewAuthentication newauthentication = 5;
		optional bool authentication_exists_from_same_ip_before_mintime = 6;
		optional uint32 public_ipv4 = 7;
	}

	optional bool is_steamguard_enabled = 1;
	optional fixed32 timestamp_steamguard_enabled = 2;
	repeated .CCredentials_GetSteamGuardDetails_Response.NewAuthentication deprecated_newauthentication = 3;
	optional string deprecated_machine_name_userchosen = 4;
	optional fixed32 deprecated_timestamp_machine_steamguard_enabled = 5;
	optional bool deprecated_authentication_exists_from_geoloc_before_mintime = 6;
	optional uint64 deprecated_machine_id = 7;
	repeated .CCredentials_GetSteamGuardDetails_Response.SessionData session_data = 8;
}

message CCredentials_NewMachineNotificationDialog_Request {
	optional bool is_approved = 1;
	optional bool is_wizard_complete = 2;
}

message CCredentials_NewMachineNotificationDialog_Response {
}

message CCredentials_ValidateEmailAddress_Request {
	optional string stoken = 1;
}

message CCredentials_ValidateEmailAddress_Response {
	optional bool was_validated = 1;
}

message CCredentials_SteamGuardPhishingReport_Request {
	optional string param_string = 1;
	optional uint32 ipaddress_actual = 2;
}

message CCredentials_SteamGuardPhishingReport_Response {
	optional uint32 ipaddress_loginattempt = 1;
	optional string countryname_loginattempt = 2;
	optional string statename_loginattempt = 3;
	optional string cityname_loginattempt = 4;
	optional uint32 ipaddress_actual = 5;
	optional string countryname_actual = 6;
	optional string statename_actual = 7;
	optional string cityname_actual = 8;
	optional string steamguard_code = 9;
}

message CCredentials_AccountLockRequest_Request {
	optional string param_string = 1;
	optional uint32 ipaddress_actual = 2;
	optional bool query_only = 3;
}

message CCredentials_AccountLockRequest_Response {
	optional bool success = 1;
	optional bool account_already_locked = 2;
	optional bool expired_link = 3;
}

message CCredentials_SteamGuardCode_Request {
	optional bool panic_button = 1;
}

message CCredentials_SteamGuardCode_Response {
	optional string steamguard_code = 1;
}

message CCredentials_LastCredentialChangeTime_Request {
}

message CCredentials_LastCredentialChangeTime_Response {
	optional fixed32 timestamp_last_password_change = 1;
	optional fixed32 timestamp_last_email_change = 2;
	optional fixed32 timestamp_last_password_reset = 3;
}

message CCredentials_GetAccountAuthSecret_Request {
}

message CCredentials_GetAccountAuthSecret_Response {
	optional int32 secret_id = 1;
	optional bytes secret = 2;
}

message CCredentials_SteamGuardLoginAttempt_Notification {
	optional bool is_web_cookie = 1;
	optional int32 ipaddress = 2;
	optional string geoloc_info = 3;
}

service Credentials {
	option (service_description) = "Credentials service";
	rpc TestAvailablePassword (.CCredentials_TestAvailablePassword_Request) returns (.CCredentials_TestAvailablePassword_Response) {
		option (method_description) = "TestAvailablePassword.";
	}
	rpc GetSteamGuardDetails (.CCredentials_GetSteamGuardDetails_Request) returns (.CCredentials_GetSteamGuardDetails_Response) {
		option (method_description) = "GetSteamGuardDetails.";
	}
	rpc NewMachineNotificationDialogResult (.CCredentials_NewMachineNotificationDialog_Request) returns (.CCredentials_NewMachineNotificationDialog_Response) {
		option (method_description) = "NewMachineNotificationDialogResult.";
	}
	rpc ValidateEmailAddress (.CCredentials_ValidateEmailAddress_Request) returns (.CCredentials_ValidateEmailAddress_Response) {
		option (method_description) = "Validate an email address given a token";
	}
	rpc SteamGuardPhishingReport (.CCredentials_SteamGuardPhishingReport_Request) returns (.CCredentials_SteamGuardPhishingReport_Response) {
		option (method_description) = "SteamGuardPhishingReport";
	}
	rpc AccountLockRequest (.CCredentials_AccountLockRequest_Request) returns (.CCredentials_AccountLockRequest_Response) {
		option (method_description) = "AccountLockRequest";
	}
	rpc SteamGuardCodeProcess (.CCredentials_SteamGuardCode_Request) returns (.CCredentials_SteamGuardCode_Response) {
		option (method_description) = "CCredentials_SteamGuardCode_Request";
	}
	rpc GetCredentialChangeTimeDetails (.CCredentials_LastCredentialChangeTime_Request) returns (.CCredentials_LastCredentialChangeTime_Response) {
		option (method_description) = "GetCredentialChangeTimeDetails.";
	}
	rpc GetAccountAuthSecret (.CCredentials_GetAccountAuthSecret_Request) returns (.CCredentials_GetAccountAuthSecret_Response) {
		option (method_description) = "GetAccountAuthSecret";
	}
}
service CredentialsClient {
	option (service_description) = "SteamGuard settings client notifications";
	option (service_execution_site) = k_EProtoExecutionSiteSteamClient;
	rpc NotifySteamGuardLoginAttempt (.CCredentials_SteamGuardLoginAttempt_Notification) returns (.NoResponse) {
		option (method_description) = "Notification from server to client of a login attempt from another location";
	}
}
