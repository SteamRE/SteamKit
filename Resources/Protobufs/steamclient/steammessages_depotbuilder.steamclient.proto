import "google/protobuf/descriptor.proto";
import "steammessages_unified_base.steamclient.proto";

message CContentBuilder_InitDepotBuild_Request {
	optional uint32 appid = 1;
	optional uint32 depotid = 2;
	optional uint64 workshop_itemid = 3;
	optional bool for_local_cs = 4;
}

message CContentBuilder_InitDepotBuild_Response {
	optional uint64 baseline_manifestid = 1;
	optional uint32 chunk_size = 2;
	optional bytes aes_key = 3;
	optional bytes rsa_key = 4;
	optional string url_host = 5;
}

message CContentBuilder_StartDepotUpload_Request {
	optional uint32 appid = 1;
	optional uint32 depotid = 2;
	optional uint64 workshop_itemid = 3;
	optional bool for_local_cs = 4;
	optional uint64 baseline_manifestid = 5;
	optional uint32 manifest_size = 6;
}

message CContentBuilder_StartDepotUpload_Response {
	optional uint64 depot_build_handle = 1;
}

message CContentBuilder_GetMissingDepotChunks_Request {
	optional uint32 appid = 1;
	optional uint64 depot_build_handle = 2;
}

message CContentBuilder_GetMissingDepotChunks_Response {
	message Chunks {
		optional bytes sha = 1;
	}

	repeated .CContentBuilder_GetMissingDepotChunks_Response.Chunks missing_chunks = 1;
	optional uint32 total_missing_chunks = 2;
	optional uint64 total_missing_bytes = 3;
}

message CContentBuilder_FinishDepotUpload_Request {
	optional uint32 appid = 1;
	optional uint64 depot_build_handle = 2;
}

message CContentBuilder_FinishDepotUpload_Response {
	optional uint64 manifestid = 1;
	optional bool prev_reused = 2;
}

message CContentBuilder_CommitAppBuild_Request {
	message Depots {
		optional uint32 depotid = 1;
		optional uint64 manifestid = 2;
	}

	optional uint32 appid = 1;
	repeated .CContentBuilder_CommitAppBuild_Request.Depots depot_manifests = 2;
	optional string build_notes = 4;
	optional string live_branch = 5;
}

message CContentBuilder_CommitAppBuild_Response {
	optional uint32 buildid = 1;
}

message CContentBuilder_SignInstallScript_Request {
	optional uint32 appid = 1;
	optional uint32 depotid = 2;
	optional string install_script = 3;
}

message CContentBuilder_SignInstallScript_Response {
	optional string signed_install_script = 1;
}

service ContentBuilder {
	option (service_description) = "Interface to build and upload depot content";
	rpc InitDepotBuild (.CContentBuilder_InitDepotBuild_Request) returns (.CContentBuilder_InitDepotBuild_Response) {
		option (method_description) = "Get inital parameters to start building a depot";
	}
	rpc StartDepotUpload (.CContentBuilder_StartDepotUpload_Request) returns (.CContentBuilder_StartDepotUpload_Response) {
		option (method_description) = "Start uploading manifest and chunks for a depot";
	}
	rpc GetMissingDepotChunks (.CContentBuilder_GetMissingDepotChunks_Request) returns (.CContentBuilder_GetMissingDepotChunks_Response) {
		option (method_description) = "Get list of missing chunks for depot upload";
	}
	rpc FinishDepotUpload (.CContentBuilder_FinishDepotUpload_Request) returns (.CContentBuilder_FinishDepotUpload_Response) {
		option (method_description) = "Commit a depot build after manifest and all chunks are uploaded";
	}
	rpc CommitAppBuild (.CContentBuilder_CommitAppBuild_Request) returns (.CContentBuilder_CommitAppBuild_Response) {
		option (method_description) = "Combine previous depot uploads into an app build and commit it";
	}
	rpc SignInstallScript (.CContentBuilder_SignInstallScript_Request) returns (.CContentBuilder_SignInstallScript_Response) {
		option (method_description) = "Sign an install script";
	}
}
