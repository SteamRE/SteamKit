import "steammessages_unified_base.steamclient.proto";

option cc_generic_services = true;

option java_package = "org.opensteamworks.steamkit.base.proto.steamclient";
option java_multiple_files = true;

message CPlayer_GetGameBadgeLevels_Request {
	optional uint32 appid = 1;
}

message CPlayer_GetGameBadgeLevels_Response {
	message Badge {
		optional int32 level = 1;
		optional int32 series = 2;
		optional uint32 border_color = 3;
	}

	optional uint32 player_level = 1;
	repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
}

message CPlayer_GetLastPlayedTimes_Request {
	optional uint32 min_last_played = 1 [(description) = "The most recent last-played time the client already knows about"];
}

message CPlayer_GetLastPlayedTimes_Response {
	message Game {
		optional int32 appid = 1;
		optional uint32 last_playtime = 2;
		optional int32 playtime_2weeks = 3;
		optional int32 playtime_forever = 4;
	}

	repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
}

message CPlayer_AcceptSSA_Request {
}

message CPlayer_AcceptSSA_Response {
}

message CPlayer_LastPlayedTimes_Notification {
	repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
}

message CPlayerClient_GetSystemInformation_Request {
}

message CClientSystemInfo {
	message CPU {
		optional int32 speed_mhz = 1;
		optional string vendor = 2;
		optional int32 logical_processors = 3;
		optional int32 physical_processors = 4;
		optional bool hyperthreading = 5;
		optional bool fcmov = 6;
		optional bool sse2 = 7;
		optional bool sse3 = 8;
		optional bool ssse3 = 9;
		optional bool sse4a = 10;
		optional bool sse41 = 11;
		optional bool sse42 = 12;
	}

	message VideoCard {
		optional string driver = 1;
		optional string driver_version = 2;
		optional uint32 driver_date = 3;
		optional string directx_version = 4;
		optional string opengl_version = 5;
		optional int32 vendorid = 6;
		optional int32 deviceid = 7;
		optional int32 vram_mb = 8;
	}

	optional .CClientSystemInfo.CPU cpu = 1;
	optional .CClientSystemInfo.VideoCard video_card = 2;
	optional string operating_system = 3;
	optional bool os_64bit = 4;
	optional int32 system_ram_mb = 5;
	optional string audio_device = 6;
	optional string audio_driver_version = 7;
}

message CPlayerClient_GetSystemInformation_Response {
	optional .CClientSystemInfo system_info = 1;
}

service Player {
	option (service_description) = "A service for accessing Steam player data";
	rpc GetGameBadgeLevels (.CPlayer_GetGameBadgeLevels_Request) returns (.CPlayer_GetGameBadgeLevels_Response) {
		option (method_description) = "Returns the Steam Level of a user, the Badge level for the game, and if it's foil";
	}
	rpc ClientGetLastPlayedTimes (.CPlayer_GetLastPlayedTimes_Request) returns (.CPlayer_GetLastPlayedTimes_Response) {
		option (method_description) = "Gets the last-played times for the account";
	}
	rpc AcceptSSA (.CPlayer_AcceptSSA_Request) returns (.CPlayer_AcceptSSA_Response) {
		option (method_description) = "User is accepting the SSA";
	}
}
service PlayerClient {
	option (service_description) = "Steam player data client notifications";
	option (service_execution_site) = k_EProtoExecutionSiteSteamClient;
	rpc NotifyLastPlayedTimes (.CPlayer_LastPlayedTimes_Notification) returns (.NoResponse) {
		option (method_description) = "Notification from server to client of more recent play time";
	}
	rpc GetSystemInformation (.CPlayerClient_GetSystemInformation_Request) returns (.CPlayerClient_GetSystemInformation_Response) {
		option (method_description) = "Request from the server to the client for information about the users system";
	}
}
