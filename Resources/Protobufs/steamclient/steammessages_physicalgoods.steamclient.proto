import "steammessages_unified_base.steamclient.proto";

option cc_generic_services = true;

message CPhysicalGoods_RegisterSteamController_Request {
	optional string serial_number = 1;
	optional string controller_code = 2;
}

message CPhysicalGoods_RegisterSteamController_Response {
}

message CPhysicalGoods_CompleteSteamControllerRegistration_Request {
	optional string serial_number = 1;
	optional string controller_code = 2;
}

message CPhysicalGoods_CompleteSteamControllerRegistration_Response {
}

message CPhysicalGoods_QueryAccountsRegisteredToSerial_Request {
	optional string serial_number = 1;
	optional string controller_code = 2;
}

message CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts {
	optional uint32 accountid = 1;
	optional bool registration_complete = 2;
}

message CPhysicalGoods_QueryAccountsRegisteredToSerial_Response {
	repeated .CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
}

message CPhysicalGoods_SteamControllerSetConfig_ControllerConfig {
	optional string appidorname = 1;
	optional uint64 publishedfileid = 2;
	optional string templatename = 3;
}

message CPhysicalGoods_SteamControllerSetConfig_Request {
	optional string serial_number = 1;
	optional string controller_code = 2;
	optional uint32 accountid = 3;
	repeated .CPhysicalGoods_SteamControllerSetConfig_ControllerConfig configurations = 4;
}

message CPhysicalGoods_SteamControllerSetConfig_Response {
}

message CPhysicalGoods_SteamControllerGetConfig_Request {
	optional string serial_number = 1;
	optional string controller_code = 2;
	optional uint32 accountid = 3;
	optional string appidorname = 4;
}

message CPhysicalGoods_SteamControllerGetConfig_ControllerConfig {
	optional string appidorname = 1;
	optional uint64 publishedfileid = 2;
	optional string templatename = 3;
}

message CPhysicalGoods_SteamControllerGetConfig_Response {
	repeated .CPhysicalGoods_SteamControllerGetConfig_ControllerConfig configurations = 1;
}

message CPhysicalGoods_DeRegisterSteamController_Request {
	optional string serial_number = 1;
	optional string controller_code = 2;
	optional uint32 accountid = 3;
}

message CPhysicalGoods_DeRegisterSteamController_Response {
}

message CPhysicalGoods_SetPersonalizationFile_Request {
	optional string serial_number = 1;
	optional uint64 publishedfileid = 2;
	optional uint32 accountid = 3;
}

message CPhysicalGoods_SetPersonalizationFile_Response {
}

message CPhysicalGoods_GetPersonalizationFile_Request {
	optional string serial_number = 1;
	optional uint32 accountid = 2;
}

message CPhysicalGoods_GetPersonalizationFile_Response {
	optional uint64 publishedfileid = 1;
}

service PhysicalGoods {
	option (service_description) = "A service to use physical goods related methods";
	rpc RegisterSteamController (.CPhysicalGoods_RegisterSteamController_Request) returns (.CPhysicalGoods_RegisterSteamController_Response) {
		option (method_description) = "Records a serial number and the calling user's account info for warranty purposes.";
	}
	rpc CompleteSteamControllerRegistration (.CPhysicalGoods_CompleteSteamControllerRegistration_Request) returns (.CPhysicalGoods_CompleteSteamControllerRegistration_Response) {
		option (method_description) = "Marks a controller's registration as complete";
	}
	rpc QueryAccountsRegisteredToController (.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) returns (.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response) {
		option (method_description) = "Sends back a list of accounts registered to a controller.";
	}
	rpc SetDesiredControllerConfigForApp (.CPhysicalGoods_SteamControllerSetConfig_Request) returns (.CPhysicalGoods_SteamControllerSetConfig_Response) {
		option (method_description) = "Sets a desired controller config for an app";
	}
	rpc GetDesiredControllerConfigForApp (.CPhysicalGoods_SteamControllerGetConfig_Request) returns (.CPhysicalGoods_SteamControllerGetConfig_Response) {
		option (method_description) = "Gets a desired controller config for an app";
	}
	rpc DeRegisterSteamController (.CPhysicalGoods_DeRegisterSteamController_Request) returns (.CPhysicalGoods_DeRegisterSteamController_Response) {
		option (method_description) = "De registers a controller";
	}
	rpc SetControllerPersonalizationFile (.CPhysicalGoods_SetPersonalizationFile_Request) returns (.CPhysicalGoods_SetPersonalizationFile_Response) {
		option (method_description) = "Stores the file ID of the personalization file";
	}
	rpc GetControllerPersonalizationFile (.CPhysicalGoods_GetPersonalizationFile_Request) returns (.CPhysicalGoods_GetPersonalizationFile_Response) {
		option (method_description) = "Gets the file ID of the personalization file";
	}
}
