// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fbase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fbase_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fbase_2eproto_metadata_getter(int index);
class CBilling_Address;
struct CBilling_AddressDefaultTypeInternal;
extern CBilling_AddressDefaultTypeInternal _CBilling_Address_default_instance_;
class CCDDBAppDetailCommon;
struct CCDDBAppDetailCommonDefaultTypeInternal;
extern CCDDBAppDetailCommonDefaultTypeInternal _CCDDBAppDetailCommon_default_instance_;
class CClanEventData;
struct CClanEventDataDefaultTypeInternal;
extern CClanEventDataDefaultTypeInternal _CClanEventData_default_instance_;
class CClanEventUserNewsTuple;
struct CClanEventUserNewsTupleDefaultTypeInternal;
extern CClanEventUserNewsTupleDefaultTypeInternal _CClanEventUserNewsTuple_default_instance_;
class CClanMatchEventByRange;
struct CClanMatchEventByRangeDefaultTypeInternal;
extern CClanMatchEventByRangeDefaultTypeInternal _CClanMatchEventByRange_default_instance_;
class CCommunity_ClanAnnouncementInfo;
struct CCommunity_ClanAnnouncementInfoDefaultTypeInternal;
extern CCommunity_ClanAnnouncementInfoDefaultTypeInternal _CCommunity_ClanAnnouncementInfo_default_instance_;
class CCuratorPreferences;
struct CCuratorPreferencesDefaultTypeInternal;
extern CCuratorPreferencesDefaultTypeInternal _CCuratorPreferences_default_instance_;
class CLocalizationToken;
struct CLocalizationTokenDefaultTypeInternal;
extern CLocalizationTokenDefaultTypeInternal _CLocalizationToken_default_instance_;
class CMsgAppRights;
struct CMsgAppRightsDefaultTypeInternal;
extern CMsgAppRightsDefaultTypeInternal _CMsgAppRights_default_instance_;
class CMsgAuthTicket;
struct CMsgAuthTicketDefaultTypeInternal;
extern CMsgAuthTicketDefaultTypeInternal _CMsgAuthTicket_default_instance_;
class CMsgIPAddress;
struct CMsgIPAddressDefaultTypeInternal;
extern CMsgIPAddressDefaultTypeInternal _CMsgIPAddress_default_instance_;
class CMsgIPAddressBucket;
struct CMsgIPAddressBucketDefaultTypeInternal;
extern CMsgIPAddressBucketDefaultTypeInternal _CMsgIPAddressBucket_default_instance_;
class CMsgMulti;
struct CMsgMultiDefaultTypeInternal;
extern CMsgMultiDefaultTypeInternal _CMsgMulti_default_instance_;
class CMsgProtoBufHeader;
struct CMsgProtoBufHeaderDefaultTypeInternal;
extern CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;
class CMsgProtobufWrapped;
struct CMsgProtobufWrappedDefaultTypeInternal;
extern CMsgProtobufWrappedDefaultTypeInternal _CMsgProtobufWrapped_default_instance_;
class CPackageReservationStatus;
struct CPackageReservationStatusDefaultTypeInternal;
extern CPackageReservationStatusDefaultTypeInternal _CPackageReservationStatus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CBilling_Address* Arena::CreateMaybeMessage<::CBilling_Address>(Arena*);
template<> ::CCDDBAppDetailCommon* Arena::CreateMaybeMessage<::CCDDBAppDetailCommon>(Arena*);
template<> ::CClanEventData* Arena::CreateMaybeMessage<::CClanEventData>(Arena*);
template<> ::CClanEventUserNewsTuple* Arena::CreateMaybeMessage<::CClanEventUserNewsTuple>(Arena*);
template<> ::CClanMatchEventByRange* Arena::CreateMaybeMessage<::CClanMatchEventByRange>(Arena*);
template<> ::CCommunity_ClanAnnouncementInfo* Arena::CreateMaybeMessage<::CCommunity_ClanAnnouncementInfo>(Arena*);
template<> ::CCuratorPreferences* Arena::CreateMaybeMessage<::CCuratorPreferences>(Arena*);
template<> ::CLocalizationToken* Arena::CreateMaybeMessage<::CLocalizationToken>(Arena*);
template<> ::CMsgAppRights* Arena::CreateMaybeMessage<::CMsgAppRights>(Arena*);
template<> ::CMsgAuthTicket* Arena::CreateMaybeMessage<::CMsgAuthTicket>(Arena*);
template<> ::CMsgIPAddress* Arena::CreateMaybeMessage<::CMsgIPAddress>(Arena*);
template<> ::CMsgIPAddressBucket* Arena::CreateMaybeMessage<::CMsgIPAddressBucket>(Arena*);
template<> ::CMsgMulti* Arena::CreateMaybeMessage<::CMsgMulti>(Arena*);
template<> ::CMsgProtoBufHeader* Arena::CreateMaybeMessage<::CMsgProtoBufHeader>(Arena*);
template<> ::CMsgProtobufWrapped* Arena::CreateMaybeMessage<::CMsgProtobufWrapped>(Arena*);
template<> ::CPackageReservationStatus* Arena::CreateMaybeMessage<::CPackageReservationStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EProtoClanEventType : int {
  k_EClanOtherEvent = 1,
  k_EClanGameEvent = 2,
  k_EClanPartyEvent = 3,
  k_EClanMeetingEvent = 4,
  k_EClanSpecialCauseEvent = 5,
  k_EClanMusicAndArtsEvent = 6,
  k_EClanSportsEvent = 7,
  k_EClanTripEvent = 8,
  k_EClanChatEvent = 9,
  k_EClanGameReleaseEvent = 10,
  k_EClanBroadcastEvent = 11,
  k_EClanSmallUpdateEvent = 12,
  k_EClanPreAnnounceMajorUpdateEvent = 13,
  k_EClanMajorUpdateEvent = 14,
  k_EClanDLCReleaseEvent = 15,
  k_EClanFutureReleaseEvent = 16,
  k_EClanESportTournamentStreamEvent = 17,
  k_EClanDevStreamEvent = 18,
  k_EClanFamousStreamEvent = 19,
  k_EClanGameSalesEvent = 20,
  k_EClanGameItemSalesEvent = 21,
  k_EClanInGameBonusXPEvent = 22,
  k_EClanInGameLootEvent = 23,
  k_EClanInGamePerksEvent = 24,
  k_EClanInGameChallengeEvent = 25,
  k_EClanInGameContestEvent = 26,
  k_EClanIRLEvent = 27,
  k_EClanNewsEvent = 28,
  k_EClanBetaReleaseEvent = 29,
  k_EClanInGameContentReleaseEvent = 30,
  k_EClanFreeTrial = 31,
  k_EClanSeasonRelease = 32,
  k_EClanSeasonUpdate = 33,
  k_EClanCrosspostEvent = 34,
  k_EClanInGameEventGeneral = 35
};
bool EProtoClanEventType_IsValid(int value);
constexpr EProtoClanEventType EProtoClanEventType_MIN = k_EClanOtherEvent;
constexpr EProtoClanEventType EProtoClanEventType_MAX = k_EClanInGameEventGeneral;
constexpr int EProtoClanEventType_ARRAYSIZE = EProtoClanEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoClanEventType_descriptor();
template<typename T>
inline const std::string& EProtoClanEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EProtoClanEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EProtoClanEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EProtoClanEventType_descriptor(), enum_t_value);
}
inline bool EProtoClanEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EProtoClanEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EProtoClanEventType>(
    EProtoClanEventType_descriptor(), name, value);
}
enum PartnerEventNotificationType : int {
  k_EEventStart = 0,
  k_EEventBroadcastStart = 1,
  k_EEventMatchStart = 2,
  k_EEventPartnerMaxType = 3
};
bool PartnerEventNotificationType_IsValid(int value);
constexpr PartnerEventNotificationType PartnerEventNotificationType_MIN = k_EEventStart;
constexpr PartnerEventNotificationType PartnerEventNotificationType_MAX = k_EEventPartnerMaxType;
constexpr int PartnerEventNotificationType_ARRAYSIZE = PartnerEventNotificationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerEventNotificationType_descriptor();
template<typename T>
inline const std::string& PartnerEventNotificationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PartnerEventNotificationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PartnerEventNotificationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PartnerEventNotificationType_descriptor(), enum_t_value);
}
inline bool PartnerEventNotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PartnerEventNotificationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PartnerEventNotificationType>(
    PartnerEventNotificationType_descriptor(), name, value);
}
// ===================================================================

class CMsgIPAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgIPAddress) */ {
 public:
  inline CMsgIPAddress() : CMsgIPAddress(nullptr) {}
  virtual ~CMsgIPAddress();
  explicit constexpr CMsgIPAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgIPAddress(const CMsgIPAddress& from);
  CMsgIPAddress(CMsgIPAddress&& from) noexcept
    : CMsgIPAddress() {
    *this = ::std::move(from);
  }

  inline CMsgIPAddress& operator=(const CMsgIPAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgIPAddress& operator=(CMsgIPAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgIPAddress& default_instance() {
    return *internal_default_instance();
  }
  enum IpCase {
    kV4 = 1,
    kV6 = 2,
    IP_NOT_SET = 0,
  };

  static inline const CMsgIPAddress* internal_default_instance() {
    return reinterpret_cast<const CMsgIPAddress*>(
               &_CMsgIPAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgIPAddress& a, CMsgIPAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgIPAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgIPAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgIPAddress* New() const final {
    return CreateMaybeMessage<CMsgIPAddress>(nullptr);
  }

  CMsgIPAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgIPAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgIPAddress& from);
  void MergeFrom(const CMsgIPAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgIPAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgIPAddress";
  }
  protected:
  explicit CMsgIPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV4FieldNumber = 1,
    kV6FieldNumber = 2,
  };
  // fixed32 v4 = 1;
  bool has_v4() const;
  private:
  bool _internal_has_v4() const;
  public:
  void clear_v4();
  ::PROTOBUF_NAMESPACE_ID::uint32 v4() const;
  void set_v4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v4() const;
  void _internal_set_v4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bytes v6 = 2;
  bool has_v6() const;
  private:
  bool _internal_has_v6() const;
  public:
  void clear_v6();
  const std::string& v6() const;
  void set_v6(const std::string& value);
  void set_v6(std::string&& value);
  void set_v6(const char* value);
  void set_v6(const void* value, size_t size);
  std::string* mutable_v6();
  std::string* release_v6();
  void set_allocated_v6(std::string* v6);
  private:
  const std::string& _internal_v6() const;
  void _internal_set_v6(const std::string& value);
  std::string* _internal_mutable_v6();
  public:

  void clear_ip();
  IpCase ip_case() const;
  // @@protoc_insertion_point(class_scope:CMsgIPAddress)
 private:
  class _Internal;
  void set_has_v4();
  void set_has_v6();

  inline bool has_ip() const;
  inline void clear_has_ip();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IpUnion {
    constexpr IpUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 v4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v6_;
  } ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgIPAddressBucket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgIPAddressBucket) */ {
 public:
  inline CMsgIPAddressBucket() : CMsgIPAddressBucket(nullptr) {}
  virtual ~CMsgIPAddressBucket();
  explicit constexpr CMsgIPAddressBucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgIPAddressBucket(const CMsgIPAddressBucket& from);
  CMsgIPAddressBucket(CMsgIPAddressBucket&& from) noexcept
    : CMsgIPAddressBucket() {
    *this = ::std::move(from);
  }

  inline CMsgIPAddressBucket& operator=(const CMsgIPAddressBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgIPAddressBucket& operator=(CMsgIPAddressBucket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgIPAddressBucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgIPAddressBucket* internal_default_instance() {
    return reinterpret_cast<const CMsgIPAddressBucket*>(
               &_CMsgIPAddressBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgIPAddressBucket& a, CMsgIPAddressBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgIPAddressBucket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgIPAddressBucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgIPAddressBucket* New() const final {
    return CreateMaybeMessage<CMsgIPAddressBucket>(nullptr);
  }

  CMsgIPAddressBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgIPAddressBucket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgIPAddressBucket& from);
  void MergeFrom(const CMsgIPAddressBucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgIPAddressBucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgIPAddressBucket";
  }
  protected:
  explicit CMsgIPAddressBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalIpAddressFieldNumber = 1,
    kBucketFieldNumber = 2,
  };
  // optional .CMsgIPAddress original_ip_address = 1;
  bool has_original_ip_address() const;
  private:
  bool _internal_has_original_ip_address() const;
  public:
  void clear_original_ip_address();
  const ::CMsgIPAddress& original_ip_address() const;
  ::CMsgIPAddress* release_original_ip_address();
  ::CMsgIPAddress* mutable_original_ip_address();
  void set_allocated_original_ip_address(::CMsgIPAddress* original_ip_address);
  private:
  const ::CMsgIPAddress& _internal_original_ip_address() const;
  ::CMsgIPAddress* _internal_mutable_original_ip_address();
  public:
  void unsafe_arena_set_allocated_original_ip_address(
      ::CMsgIPAddress* original_ip_address);
  ::CMsgIPAddress* unsafe_arena_release_original_ip_address();

  // optional fixed64 bucket = 2;
  bool has_bucket() const;
  private:
  bool _internal_has_bucket() const;
  public:
  void clear_bucket();
  ::PROTOBUF_NAMESPACE_ID::uint64 bucket() const;
  void set_bucket(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucket() const;
  void _internal_set_bucket(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgIPAddressBucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgIPAddress* original_ip_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bucket_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgProtoBufHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtoBufHeader) */ {
 public:
  inline CMsgProtoBufHeader() : CMsgProtoBufHeader(nullptr) {}
  virtual ~CMsgProtoBufHeader();
  explicit constexpr CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);
  CMsgProtoBufHeader(CMsgProtoBufHeader&& from) noexcept
    : CMsgProtoBufHeader() {
    *this = ::std::move(from);
  }

  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtoBufHeader& operator=(CMsgProtoBufHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgProtoBufHeader& default_instance() {
    return *internal_default_instance();
  }
  enum IpAddrCase {
    kIp = 15,
    kIpV6 = 29,
    IP_ADDR_NOT_SET = 0,
  };

  static inline const CMsgProtoBufHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgProtoBufHeader*>(
               &_CMsgProtoBufHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgProtoBufHeader& a, CMsgProtoBufHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtoBufHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtoBufHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProtoBufHeader* New() const final {
    return CreateMaybeMessage<CMsgProtoBufHeader>(nullptr);
  }

  CMsgProtoBufHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProtoBufHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProtoBufHeader& from);
  void MergeFrom(const CMsgProtoBufHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtoBufHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtoBufHeader";
  }
  protected:
  explicit CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardToSysidFieldNumber = 27,
    kTargetJobNameFieldNumber = 12,
    kErrorMessageFieldNumber = 14,
    kWgTokenFieldNumber = 30,
    kSteamidFieldNumber = 1,
    kClientSessionidFieldNumber = 2,
    kRoutingAppidFieldNumber = 3,
    kAuthAccountFlagsFieldNumber = 16,
    kPublisherGroupIdFieldNumber = 19,
    kTraceTagFieldNumber = 21,
    kSysidFieldNumber = 20,
    kTokenSourceFieldNumber = 22,
    kSeqNumFieldNumber = 24,
    kAdminSpoofingUserFieldNumber = 23,
    kIsFromExternalSourceFieldNumber = 26,
    kWebapiKeyIdFieldNumber = 25,
    kCmSysidFieldNumber = 28,
    kLauncherTypeFieldNumber = 31,
    kRealmFieldNumber = 32,
    kJobidSourceFieldNumber = 10,
    kJobidTargetFieldNumber = 11,
    kEresultFieldNumber = 13,
    kTransportErrorFieldNumber = 17,
    kMessageidFieldNumber = 18,
    kIpFieldNumber = 15,
    kIpV6FieldNumber = 29,
  };
  // repeated uint32 forward_to_sysid = 27;
  int forward_to_sysid_size() const;
  private:
  int _internal_forward_to_sysid_size() const;
  public:
  void clear_forward_to_sysid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forward_to_sysid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_forward_to_sysid() const;
  void _internal_add_forward_to_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_forward_to_sysid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 forward_to_sysid(int index) const;
  void set_forward_to_sysid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_forward_to_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      forward_to_sysid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_forward_to_sysid();

  // optional string target_job_name = 12;
  bool has_target_job_name() const;
  private:
  bool _internal_has_target_job_name() const;
  public:
  void clear_target_job_name();
  const std::string& target_job_name() const;
  void set_target_job_name(const std::string& value);
  void set_target_job_name(std::string&& value);
  void set_target_job_name(const char* value);
  void set_target_job_name(const char* value, size_t size);
  std::string* mutable_target_job_name();
  std::string* release_target_job_name();
  void set_allocated_target_job_name(std::string* target_job_name);
  private:
  const std::string& _internal_target_job_name() const;
  void _internal_set_target_job_name(const std::string& value);
  std::string* _internal_mutable_target_job_name();
  public:

  // optional string error_message = 14;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional string wg_token = 30;
  bool has_wg_token() const;
  private:
  bool _internal_has_wg_token() const;
  public:
  void clear_wg_token();
  const std::string& wg_token() const;
  void set_wg_token(const std::string& value);
  void set_wg_token(std::string&& value);
  void set_wg_token(const char* value);
  void set_wg_token(const char* value, size_t size);
  std::string* mutable_wg_token();
  std::string* release_wg_token();
  void set_allocated_wg_token(std::string* wg_token);
  private:
  const std::string& _internal_wg_token() const;
  void _internal_set_wg_token(const std::string& value);
  std::string* _internal_mutable_wg_token();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 client_sessionid = 2;
  bool has_client_sessionid() const;
  private:
  bool _internal_has_client_sessionid() const;
  public:
  void clear_client_sessionid();
  ::PROTOBUF_NAMESPACE_ID::int32 client_sessionid() const;
  void set_client_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_sessionid() const;
  void _internal_set_client_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 routing_appid = 3;
  bool has_routing_appid() const;
  private:
  bool _internal_has_routing_appid() const;
  public:
  void clear_routing_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 routing_appid() const;
  void set_routing_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_routing_appid() const;
  void _internal_set_routing_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 auth_account_flags = 16;
  bool has_auth_account_flags() const;
  private:
  bool _internal_has_auth_account_flags() const;
  public:
  void clear_auth_account_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_account_flags() const;
  void set_auth_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auth_account_flags() const;
  void _internal_set_auth_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 publisher_group_id = 19;
  bool has_publisher_group_id() const;
  private:
  bool _internal_has_publisher_group_id() const;
  public:
  void clear_publisher_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 publisher_group_id() const;
  void set_publisher_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_publisher_group_id() const;
  void _internal_set_publisher_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 trace_tag = 21;
  bool has_trace_tag() const;
  private:
  bool _internal_has_trace_tag() const;
  public:
  void clear_trace_tag();
  ::PROTOBUF_NAMESPACE_ID::uint64 trace_tag() const;
  void set_trace_tag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trace_tag() const;
  void _internal_set_trace_tag(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 sysid = 20;
  bool has_sysid() const;
  private:
  bool _internal_has_sysid() const;
  public:
  void clear_sysid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sysid() const;
  void set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sysid() const;
  void _internal_set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 token_source = 22;
  bool has_token_source() const;
  private:
  bool _internal_has_token_source() const;
  public:
  void clear_token_source();
  ::PROTOBUF_NAMESPACE_ID::uint32 token_source() const;
  void set_token_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_token_source() const;
  void _internal_set_token_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 seq_num = 24;
  bool has_seq_num() const;
  private:
  bool _internal_has_seq_num() const;
  public:
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::int32 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool admin_spoofing_user = 23;
  bool has_admin_spoofing_user() const;
  private:
  bool _internal_has_admin_spoofing_user() const;
  public:
  void clear_admin_spoofing_user();
  bool admin_spoofing_user() const;
  void set_admin_spoofing_user(bool value);
  private:
  bool _internal_admin_spoofing_user() const;
  void _internal_set_admin_spoofing_user(bool value);
  public:

  // optional bool is_from_external_source = 26;
  bool has_is_from_external_source() const;
  private:
  bool _internal_has_is_from_external_source() const;
  public:
  void clear_is_from_external_source();
  bool is_from_external_source() const;
  void set_is_from_external_source(bool value);
  private:
  bool _internal_is_from_external_source() const;
  void _internal_set_is_from_external_source(bool value);
  public:

  // optional uint32 webapi_key_id = 25;
  bool has_webapi_key_id() const;
  private:
  bool _internal_has_webapi_key_id() const;
  public:
  void clear_webapi_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 webapi_key_id() const;
  void set_webapi_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_webapi_key_id() const;
  void _internal_set_webapi_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cm_sysid = 28;
  bool has_cm_sysid() const;
  private:
  bool _internal_has_cm_sysid() const;
  public:
  void clear_cm_sysid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cm_sysid() const;
  void set_cm_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cm_sysid() const;
  void _internal_set_cm_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 launcher_type = 31 [default = 0];
  bool has_launcher_type() const;
  private:
  bool _internal_has_launcher_type() const;
  public:
  void clear_launcher_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_type() const;
  void set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_launcher_type() const;
  void _internal_set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 realm = 32 [default = 0];
  bool has_realm() const;
  private:
  bool _internal_has_realm() const;
  public:
  void clear_realm();
  ::PROTOBUF_NAMESPACE_ID::uint32 realm() const;
  void set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_realm() const;
  void _internal_set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  bool has_jobid_source() const;
  private:
  bool _internal_has_jobid_source() const;
  public:
  void clear_jobid_source();
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_source() const;
  void set_jobid_source(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_jobid_source() const;
  void _internal_set_jobid_source(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  bool has_jobid_target() const;
  private:
  bool _internal_has_jobid_target() const;
  public:
  void clear_jobid_target();
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_target() const;
  void set_jobid_target(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_jobid_target() const;
  void _internal_set_jobid_target(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 eresult = 13 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 transport_error = 17 [default = 1];
  bool has_transport_error() const;
  private:
  bool _internal_has_transport_error() const;
  public:
  void clear_transport_error();
  ::PROTOBUF_NAMESPACE_ID::int32 transport_error() const;
  void set_transport_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transport_error() const;
  void _internal_set_transport_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::PROTOBUF_NAMESPACE_ID::uint64 messageid() const;
  void set_messageid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_messageid() const;
  void _internal_set_messageid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 ip = 15;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bytes ip_v6 = 29;
  bool has_ip_v6() const;
  private:
  bool _internal_has_ip_v6() const;
  public:
  void clear_ip_v6();
  const std::string& ip_v6() const;
  void set_ip_v6(const std::string& value);
  void set_ip_v6(std::string&& value);
  void set_ip_v6(const char* value);
  void set_ip_v6(const void* value, size_t size);
  std::string* mutable_ip_v6();
  std::string* release_ip_v6();
  void set_allocated_ip_v6(std::string* ip_v6);
  private:
  const std::string& _internal_ip_v6() const;
  void _internal_set_ip_v6(const std::string& value);
  std::string* _internal_mutable_ip_v6();
  public:

  void clear_ip_addr();
  IpAddrCase ip_addr_case() const;
  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  class _Internal;
  void set_has_ip();
  void set_has_ip_v6();

  inline bool has_ip_addr() const;
  inline void clear_has_ip_addr();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > forward_to_sysid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_job_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wg_token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 routing_appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_account_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 publisher_group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trace_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sysid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 token_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_num_;
  bool admin_spoofing_user_;
  bool is_from_external_source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 webapi_key_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cm_sysid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 realm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_target_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  ::PROTOBUF_NAMESPACE_ID::int32 transport_error_;
  ::PROTOBUF_NAMESPACE_ID::uint64 messageid_;
  union IpAddrUnion {
    constexpr IpAddrUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_v6_;
  } ip_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgMulti PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMulti) */ {
 public:
  inline CMsgMulti() : CMsgMulti(nullptr) {}
  virtual ~CMsgMulti();
  explicit constexpr CMsgMulti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMulti(const CMsgMulti& from);
  CMsgMulti(CMsgMulti&& from) noexcept
    : CMsgMulti() {
    *this = ::std::move(from);
  }

  inline CMsgMulti& operator=(const CMsgMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMulti& operator=(CMsgMulti&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMulti* internal_default_instance() {
    return reinterpret_cast<const CMsgMulti*>(
               &_CMsgMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgMulti& a, CMsgMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMulti* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMulti* New() const final {
    return CreateMaybeMessage<CMsgMulti>(nullptr);
  }

  CMsgMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMulti>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMulti& from);
  void MergeFrom(const CMsgMulti& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMulti* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMulti";
  }
  protected:
  explicit CMsgMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageBodyFieldNumber = 2,
    kSizeUnzippedFieldNumber = 1,
  };
  // optional bytes message_body = 2;
  bool has_message_body() const;
  private:
  bool _internal_has_message_body() const;
  public:
  void clear_message_body();
  const std::string& message_body() const;
  void set_message_body(const std::string& value);
  void set_message_body(std::string&& value);
  void set_message_body(const char* value);
  void set_message_body(const void* value, size_t size);
  std::string* mutable_message_body();
  std::string* release_message_body();
  void set_allocated_message_body(std::string* message_body);
  private:
  const std::string& _internal_message_body() const;
  void _internal_set_message_body(const std::string& value);
  std::string* _internal_mutable_message_body();
  public:

  // optional uint32 size_unzipped = 1;
  bool has_size_unzipped() const;
  private:
  bool _internal_has_size_unzipped() const;
  public:
  void clear_size_unzipped();
  ::PROTOBUF_NAMESPACE_ID::uint32 size_unzipped() const;
  void set_size_unzipped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size_unzipped() const;
  void _internal_set_size_unzipped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_unzipped_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgProtobufWrapped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtobufWrapped) */ {
 public:
  inline CMsgProtobufWrapped() : CMsgProtobufWrapped(nullptr) {}
  virtual ~CMsgProtobufWrapped();
  explicit constexpr CMsgProtobufWrapped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProtobufWrapped(const CMsgProtobufWrapped& from);
  CMsgProtobufWrapped(CMsgProtobufWrapped&& from) noexcept
    : CMsgProtobufWrapped() {
    *this = ::std::move(from);
  }

  inline CMsgProtobufWrapped& operator=(const CMsgProtobufWrapped& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtobufWrapped& operator=(CMsgProtobufWrapped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgProtobufWrapped& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProtobufWrapped* internal_default_instance() {
    return reinterpret_cast<const CMsgProtobufWrapped*>(
               &_CMsgProtobufWrapped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgProtobufWrapped& a, CMsgProtobufWrapped& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtobufWrapped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtobufWrapped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgProtobufWrapped* New() const final {
    return CreateMaybeMessage<CMsgProtobufWrapped>(nullptr);
  }

  CMsgProtobufWrapped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgProtobufWrapped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgProtobufWrapped& from);
  void MergeFrom(const CMsgProtobufWrapped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtobufWrapped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtobufWrapped";
  }
  protected:
  explicit CMsgProtobufWrapped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageBodyFieldNumber = 1,
  };
  // optional bytes message_body = 1;
  bool has_message_body() const;
  private:
  bool _internal_has_message_body() const;
  public:
  void clear_message_body();
  const std::string& message_body() const;
  void set_message_body(const std::string& value);
  void set_message_body(std::string&& value);
  void set_message_body(const char* value);
  void set_message_body(const void* value, size_t size);
  std::string* mutable_message_body();
  std::string* release_message_body();
  void set_allocated_message_body(std::string* message_body);
  private:
  const std::string& _internal_message_body() const;
  void _internal_set_message_body(const std::string& value);
  std::string* _internal_mutable_message_body();
  public:

  // @@protoc_insertion_point(class_scope:CMsgProtobufWrapped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_body_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgAuthTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAuthTicket) */ {
 public:
  inline CMsgAuthTicket() : CMsgAuthTicket(nullptr) {}
  virtual ~CMsgAuthTicket();
  explicit constexpr CMsgAuthTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAuthTicket(const CMsgAuthTicket& from);
  CMsgAuthTicket(CMsgAuthTicket&& from) noexcept
    : CMsgAuthTicket() {
    *this = ::std::move(from);
  }

  inline CMsgAuthTicket& operator=(const CMsgAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAuthTicket& operator=(CMsgAuthTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgAuthTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAuthTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgAuthTicket*>(
               &_CMsgAuthTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgAuthTicket& a, CMsgAuthTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAuthTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAuthTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAuthTicket* New() const final {
    return CreateMaybeMessage<CMsgAuthTicket>(nullptr);
  }

  CMsgAuthTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAuthTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAuthTicket& from);
  void MergeFrom(const CMsgAuthTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAuthTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAuthTicket";
  }
  protected:
  explicit CMsgAuthTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 7,
    kSteamidFieldNumber = 3,
    kEstateFieldNumber = 1,
    kHSteamPipeFieldNumber = 5,
    kGameidFieldNumber = 4,
    kTicketCrcFieldNumber = 6,
    kEresultFieldNumber = 2,
  };
  // optional bytes ticket = 7;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const void* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // optional fixed64 steamid = 3;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 estate = 1;
  bool has_estate() const;
  private:
  bool _internal_has_estate() const;
  public:
  void clear_estate();
  ::PROTOBUF_NAMESPACE_ID::uint32 estate() const;
  void set_estate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estate() const;
  void _internal_set_estate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 h_steam_pipe = 5;
  bool has_h_steam_pipe() const;
  private:
  bool _internal_has_h_steam_pipe() const;
  public:
  void clear_h_steam_pipe();
  ::PROTOBUF_NAMESPACE_ID::uint32 h_steam_pipe() const;
  void set_h_steam_pipe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_h_steam_pipe() const;
  void _internal_set_h_steam_pipe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 gameid = 4;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 ticket_crc = 6;
  bool has_ticket_crc() const;
  private:
  bool _internal_has_ticket_crc() const;
  public:
  void clear_ticket_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ticket_crc() const;
  void set_ticket_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ticket_crc() const;
  void _internal_set_ticket_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 eresult = 2 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAuthTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_steam_pipe_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ticket_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eresult_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CCDDBAppDetailCommon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCDDBAppDetailCommon) */ {
 public:
  inline CCDDBAppDetailCommon() : CCDDBAppDetailCommon(nullptr) {}
  virtual ~CCDDBAppDetailCommon();
  explicit constexpr CCDDBAppDetailCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from);
  CCDDBAppDetailCommon(CCDDBAppDetailCommon&& from) noexcept
    : CCDDBAppDetailCommon() {
    *this = ::std::move(from);
  }

  inline CCDDBAppDetailCommon& operator=(const CCDDBAppDetailCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCDDBAppDetailCommon& operator=(CCDDBAppDetailCommon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCDDBAppDetailCommon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCDDBAppDetailCommon* internal_default_instance() {
    return reinterpret_cast<const CCDDBAppDetailCommon*>(
               &_CCDDBAppDetailCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCDDBAppDetailCommon& a, CCDDBAppDetailCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(CCDDBAppDetailCommon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCDDBAppDetailCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCDDBAppDetailCommon* New() const final {
    return CreateMaybeMessage<CCDDBAppDetailCommon>(nullptr);
  }

  CCDDBAppDetailCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCDDBAppDetailCommon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCDDBAppDetailCommon& from);
  void MergeFrom(const CCDDBAppDetailCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCDDBAppDetailCommon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCDDBAppDetailCommon";
  }
  protected:
  explicit CCDDBAppDetailCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIconFieldNumber = 3,
    kLogoFieldNumber = 4,
    kLogoSmallFieldNumber = 5,
    kFriendlyNameFieldNumber = 10,
    kPropagationFieldNumber = 11,
    kAppidFieldNumber = 1,
    kToolFieldNumber = 6,
    kDemoFieldNumber = 7,
    kMediaFieldNumber = 8,
    kCommunityVisibleStatsFieldNumber = 9,
    kHasAdultContentFieldNumber = 12,
    kIsVisibleInSteamChinaFieldNumber = 13,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon = 3;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string logo = 4;
  bool has_logo() const;
  private:
  bool _internal_has_logo() const;
  public:
  void clear_logo();
  const std::string& logo() const;
  void set_logo(const std::string& value);
  void set_logo(std::string&& value);
  void set_logo(const char* value);
  void set_logo(const char* value, size_t size);
  std::string* mutable_logo();
  std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // optional string logo_small = 5;
  bool has_logo_small() const;
  private:
  bool _internal_has_logo_small() const;
  public:
  void clear_logo_small();
  const std::string& logo_small() const;
  void set_logo_small(const std::string& value);
  void set_logo_small(std::string&& value);
  void set_logo_small(const char* value);
  void set_logo_small(const char* value, size_t size);
  std::string* mutable_logo_small();
  std::string* release_logo_small();
  void set_allocated_logo_small(std::string* logo_small);
  private:
  const std::string& _internal_logo_small() const;
  void _internal_set_logo_small(const std::string& value);
  std::string* _internal_mutable_logo_small();
  public:

  // optional string friendly_name = 10;
  bool has_friendly_name() const;
  private:
  bool _internal_has_friendly_name() const;
  public:
  void clear_friendly_name();
  const std::string& friendly_name() const;
  void set_friendly_name(const std::string& value);
  void set_friendly_name(std::string&& value);
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  std::string* mutable_friendly_name();
  std::string* release_friendly_name();
  void set_allocated_friendly_name(std::string* friendly_name);
  private:
  const std::string& _internal_friendly_name() const;
  void _internal_set_friendly_name(const std::string& value);
  std::string* _internal_mutable_friendly_name();
  public:

  // optional string propagation = 11;
  bool has_propagation() const;
  private:
  bool _internal_has_propagation() const;
  public:
  void clear_propagation();
  const std::string& propagation() const;
  void set_propagation(const std::string& value);
  void set_propagation(std::string&& value);
  void set_propagation(const char* value);
  void set_propagation(const char* value, size_t size);
  std::string* mutable_propagation();
  std::string* release_propagation();
  void set_allocated_propagation(std::string* propagation);
  private:
  const std::string& _internal_propagation() const;
  void _internal_set_propagation(const std::string& value);
  std::string* _internal_mutable_propagation();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool tool = 6;
  bool has_tool() const;
  private:
  bool _internal_has_tool() const;
  public:
  void clear_tool();
  bool tool() const;
  void set_tool(bool value);
  private:
  bool _internal_tool() const;
  void _internal_set_tool(bool value);
  public:

  // optional bool demo = 7;
  bool has_demo() const;
  private:
  bool _internal_has_demo() const;
  public:
  void clear_demo();
  bool demo() const;
  void set_demo(bool value);
  private:
  bool _internal_demo() const;
  void _internal_set_demo(bool value);
  public:

  // optional bool media = 8;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  bool media() const;
  void set_media(bool value);
  private:
  bool _internal_media() const;
  void _internal_set_media(bool value);
  public:

  // optional bool community_visible_stats = 9;
  bool has_community_visible_stats() const;
  private:
  bool _internal_has_community_visible_stats() const;
  public:
  void clear_community_visible_stats();
  bool community_visible_stats() const;
  void set_community_visible_stats(bool value);
  private:
  bool _internal_community_visible_stats() const;
  void _internal_set_community_visible_stats(bool value);
  public:

  // optional bool has_adult_content = 12;
  bool has_has_adult_content() const;
  private:
  bool _internal_has_has_adult_content() const;
  public:
  void clear_has_adult_content();
  bool has_adult_content() const;
  void set_has_adult_content(bool value);
  private:
  bool _internal_has_adult_content() const;
  void _internal_set_has_adult_content(bool value);
  public:

  // optional bool is_visible_in_steam_china = 13;
  bool has_is_visible_in_steam_china() const;
  private:
  bool _internal_has_is_visible_in_steam_china() const;
  public:
  void clear_is_visible_in_steam_china();
  bool is_visible_in_steam_china() const;
  void set_is_visible_in_steam_china(bool value);
  private:
  bool _internal_is_visible_in_steam_china() const;
  void _internal_set_is_visible_in_steam_china(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCDDBAppDetailCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_small_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propagation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  bool tool_;
  bool demo_;
  bool media_;
  bool community_visible_stats_;
  bool has_adult_content_;
  bool is_visible_in_steam_china_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CMsgAppRights PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAppRights) */ {
 public:
  inline CMsgAppRights() : CMsgAppRights(nullptr) {}
  virtual ~CMsgAppRights();
  explicit constexpr CMsgAppRights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAppRights(const CMsgAppRights& from);
  CMsgAppRights(CMsgAppRights&& from) noexcept
    : CMsgAppRights() {
    *this = ::std::move(from);
  }

  inline CMsgAppRights& operator=(const CMsgAppRights& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAppRights& operator=(CMsgAppRights&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgAppRights& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAppRights* internal_default_instance() {
    return reinterpret_cast<const CMsgAppRights*>(
               &_CMsgAppRights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgAppRights& a, CMsgAppRights& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAppRights* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAppRights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAppRights* New() const final {
    return CreateMaybeMessage<CMsgAppRights>(nullptr);
  }

  CMsgAppRights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAppRights>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAppRights& from);
  void MergeFrom(const CMsgAppRights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAppRights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAppRights";
  }
  protected:
  explicit CMsgAppRights(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEditInfoFieldNumber = 1,
    kPublishFieldNumber = 2,
    kViewErrorDataFieldNumber = 3,
    kDownloadFieldNumber = 4,
    kUploadCdkeysFieldNumber = 5,
    kGenerateCdkeysFieldNumber = 6,
    kViewFinancialsFieldNumber = 7,
    kManageCegFieldNumber = 8,
    kManageSigningFieldNumber = 9,
    kManageCdkeysFieldNumber = 10,
    kEditMarketingFieldNumber = 11,
    kEconomySupportFieldNumber = 12,
    kEconomySupportSupervisorFieldNumber = 13,
    kManagePricingFieldNumber = 14,
    kBroadcastLiveFieldNumber = 15,
    kViewMarketingTrafficFieldNumber = 16,
  };
  // optional bool edit_info = 1;
  bool has_edit_info() const;
  private:
  bool _internal_has_edit_info() const;
  public:
  void clear_edit_info();
  bool edit_info() const;
  void set_edit_info(bool value);
  private:
  bool _internal_edit_info() const;
  void _internal_set_edit_info(bool value);
  public:

  // optional bool publish = 2;
  bool has_publish() const;
  private:
  bool _internal_has_publish() const;
  public:
  void clear_publish();
  bool publish() const;
  void set_publish(bool value);
  private:
  bool _internal_publish() const;
  void _internal_set_publish(bool value);
  public:

  // optional bool view_error_data = 3;
  bool has_view_error_data() const;
  private:
  bool _internal_has_view_error_data() const;
  public:
  void clear_view_error_data();
  bool view_error_data() const;
  void set_view_error_data(bool value);
  private:
  bool _internal_view_error_data() const;
  void _internal_set_view_error_data(bool value);
  public:

  // optional bool download = 4;
  bool has_download() const;
  private:
  bool _internal_has_download() const;
  public:
  void clear_download();
  bool download() const;
  void set_download(bool value);
  private:
  bool _internal_download() const;
  void _internal_set_download(bool value);
  public:

  // optional bool upload_cdkeys = 5;
  bool has_upload_cdkeys() const;
  private:
  bool _internal_has_upload_cdkeys() const;
  public:
  void clear_upload_cdkeys();
  bool upload_cdkeys() const;
  void set_upload_cdkeys(bool value);
  private:
  bool _internal_upload_cdkeys() const;
  void _internal_set_upload_cdkeys(bool value);
  public:

  // optional bool generate_cdkeys = 6;
  bool has_generate_cdkeys() const;
  private:
  bool _internal_has_generate_cdkeys() const;
  public:
  void clear_generate_cdkeys();
  bool generate_cdkeys() const;
  void set_generate_cdkeys(bool value);
  private:
  bool _internal_generate_cdkeys() const;
  void _internal_set_generate_cdkeys(bool value);
  public:

  // optional bool view_financials = 7;
  bool has_view_financials() const;
  private:
  bool _internal_has_view_financials() const;
  public:
  void clear_view_financials();
  bool view_financials() const;
  void set_view_financials(bool value);
  private:
  bool _internal_view_financials() const;
  void _internal_set_view_financials(bool value);
  public:

  // optional bool manage_ceg = 8;
  bool has_manage_ceg() const;
  private:
  bool _internal_has_manage_ceg() const;
  public:
  void clear_manage_ceg();
  bool manage_ceg() const;
  void set_manage_ceg(bool value);
  private:
  bool _internal_manage_ceg() const;
  void _internal_set_manage_ceg(bool value);
  public:

  // optional bool manage_signing = 9;
  bool has_manage_signing() const;
  private:
  bool _internal_has_manage_signing() const;
  public:
  void clear_manage_signing();
  bool manage_signing() const;
  void set_manage_signing(bool value);
  private:
  bool _internal_manage_signing() const;
  void _internal_set_manage_signing(bool value);
  public:

  // optional bool manage_cdkeys = 10;
  bool has_manage_cdkeys() const;
  private:
  bool _internal_has_manage_cdkeys() const;
  public:
  void clear_manage_cdkeys();
  bool manage_cdkeys() const;
  void set_manage_cdkeys(bool value);
  private:
  bool _internal_manage_cdkeys() const;
  void _internal_set_manage_cdkeys(bool value);
  public:

  // optional bool edit_marketing = 11;
  bool has_edit_marketing() const;
  private:
  bool _internal_has_edit_marketing() const;
  public:
  void clear_edit_marketing();
  bool edit_marketing() const;
  void set_edit_marketing(bool value);
  private:
  bool _internal_edit_marketing() const;
  void _internal_set_edit_marketing(bool value);
  public:

  // optional bool economy_support = 12;
  bool has_economy_support() const;
  private:
  bool _internal_has_economy_support() const;
  public:
  void clear_economy_support();
  bool economy_support() const;
  void set_economy_support(bool value);
  private:
  bool _internal_economy_support() const;
  void _internal_set_economy_support(bool value);
  public:

  // optional bool economy_support_supervisor = 13;
  bool has_economy_support_supervisor() const;
  private:
  bool _internal_has_economy_support_supervisor() const;
  public:
  void clear_economy_support_supervisor();
  bool economy_support_supervisor() const;
  void set_economy_support_supervisor(bool value);
  private:
  bool _internal_economy_support_supervisor() const;
  void _internal_set_economy_support_supervisor(bool value);
  public:

  // optional bool manage_pricing = 14;
  bool has_manage_pricing() const;
  private:
  bool _internal_has_manage_pricing() const;
  public:
  void clear_manage_pricing();
  bool manage_pricing() const;
  void set_manage_pricing(bool value);
  private:
  bool _internal_manage_pricing() const;
  void _internal_set_manage_pricing(bool value);
  public:

  // optional bool broadcast_live = 15;
  bool has_broadcast_live() const;
  private:
  bool _internal_has_broadcast_live() const;
  public:
  void clear_broadcast_live();
  bool broadcast_live() const;
  void set_broadcast_live(bool value);
  private:
  bool _internal_broadcast_live() const;
  void _internal_set_broadcast_live(bool value);
  public:

  // optional bool view_marketing_traffic = 16;
  bool has_view_marketing_traffic() const;
  private:
  bool _internal_has_view_marketing_traffic() const;
  public:
  void clear_view_marketing_traffic();
  bool view_marketing_traffic() const;
  void set_view_marketing_traffic(bool value);
  private:
  bool _internal_view_marketing_traffic() const;
  void _internal_set_view_marketing_traffic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAppRights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool edit_info_;
  bool publish_;
  bool view_error_data_;
  bool download_;
  bool upload_cdkeys_;
  bool generate_cdkeys_;
  bool view_financials_;
  bool manage_ceg_;
  bool manage_signing_;
  bool manage_cdkeys_;
  bool edit_marketing_;
  bool economy_support_;
  bool economy_support_supervisor_;
  bool manage_pricing_;
  bool broadcast_live_;
  bool view_marketing_traffic_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CCuratorPreferences PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCuratorPreferences) */ {
 public:
  inline CCuratorPreferences() : CCuratorPreferences(nullptr) {}
  virtual ~CCuratorPreferences();
  explicit constexpr CCuratorPreferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCuratorPreferences(const CCuratorPreferences& from);
  CCuratorPreferences(CCuratorPreferences&& from) noexcept
    : CCuratorPreferences() {
    *this = ::std::move(from);
  }

  inline CCuratorPreferences& operator=(const CCuratorPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCuratorPreferences& operator=(CCuratorPreferences&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCuratorPreferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCuratorPreferences* internal_default_instance() {
    return reinterpret_cast<const CCuratorPreferences*>(
               &_CCuratorPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCuratorPreferences& a, CCuratorPreferences& b) {
    a.Swap(&b);
  }
  inline void Swap(CCuratorPreferences* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCuratorPreferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCuratorPreferences* New() const final {
    return CreateMaybeMessage<CCuratorPreferences>(nullptr);
  }

  CCuratorPreferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCuratorPreferences>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCuratorPreferences& from);
  void MergeFrom(const CCuratorPreferences& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCuratorPreferences* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCuratorPreferences";
  }
  protected:
  explicit CCuratorPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagidsCuratedFieldNumber = 9,
    kTagidsFilteredFieldNumber = 10,
    kWebsiteTitleFieldNumber = 11,
    kWebsiteUrlFieldNumber = 12,
    kDiscussionUrlFieldNumber = 13,
    kSupportedLanguagesFieldNumber = 1,
    kPlatformWindowsFieldNumber = 2,
    kPlatformMacFieldNumber = 3,
    kPlatformLinuxFieldNumber = 4,
    kVrContentFieldNumber = 5,
    kTimestampUpdatedFieldNumber = 8,
    kAdultContentViolenceFieldNumber = 6,
    kAdultContentSexFieldNumber = 7,
    kShowBroadcastFieldNumber = 14,
  };
  // repeated uint32 tagids_curated = 9;
  int tagids_curated_size() const;
  private:
  int _internal_tagids_curated_size() const;
  public:
  void clear_tagids_curated();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tagids_curated(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tagids_curated() const;
  void _internal_add_tagids_curated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tagids_curated();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tagids_curated(int index) const;
  void set_tagids_curated(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tagids_curated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tagids_curated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tagids_curated();

  // repeated uint32 tagids_filtered = 10;
  int tagids_filtered_size() const;
  private:
  int _internal_tagids_filtered_size() const;
  public:
  void clear_tagids_filtered();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tagids_filtered(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tagids_filtered() const;
  void _internal_add_tagids_filtered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tagids_filtered();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tagids_filtered(int index) const;
  void set_tagids_filtered(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tagids_filtered(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tagids_filtered() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tagids_filtered();

  // optional string website_title = 11;
  bool has_website_title() const;
  private:
  bool _internal_has_website_title() const;
  public:
  void clear_website_title();
  const std::string& website_title() const;
  void set_website_title(const std::string& value);
  void set_website_title(std::string&& value);
  void set_website_title(const char* value);
  void set_website_title(const char* value, size_t size);
  std::string* mutable_website_title();
  std::string* release_website_title();
  void set_allocated_website_title(std::string* website_title);
  private:
  const std::string& _internal_website_title() const;
  void _internal_set_website_title(const std::string& value);
  std::string* _internal_mutable_website_title();
  public:

  // optional string website_url = 12;
  bool has_website_url() const;
  private:
  bool _internal_has_website_url() const;
  public:
  void clear_website_url();
  const std::string& website_url() const;
  void set_website_url(const std::string& value);
  void set_website_url(std::string&& value);
  void set_website_url(const char* value);
  void set_website_url(const char* value, size_t size);
  std::string* mutable_website_url();
  std::string* release_website_url();
  void set_allocated_website_url(std::string* website_url);
  private:
  const std::string& _internal_website_url() const;
  void _internal_set_website_url(const std::string& value);
  std::string* _internal_mutable_website_url();
  public:

  // optional string discussion_url = 13;
  bool has_discussion_url() const;
  private:
  bool _internal_has_discussion_url() const;
  public:
  void clear_discussion_url();
  const std::string& discussion_url() const;
  void set_discussion_url(const std::string& value);
  void set_discussion_url(std::string&& value);
  void set_discussion_url(const char* value);
  void set_discussion_url(const char* value, size_t size);
  std::string* mutable_discussion_url();
  std::string* release_discussion_url();
  void set_allocated_discussion_url(std::string* discussion_url);
  private:
  const std::string& _internal_discussion_url() const;
  void _internal_set_discussion_url(const std::string& value);
  std::string* _internal_mutable_discussion_url();
  public:

  // optional uint32 supported_languages = 1;
  bool has_supported_languages() const;
  private:
  bool _internal_has_supported_languages() const;
  public:
  void clear_supported_languages();
  ::PROTOBUF_NAMESPACE_ID::uint32 supported_languages() const;
  void set_supported_languages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_supported_languages() const;
  void _internal_set_supported_languages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool platform_windows = 2;
  bool has_platform_windows() const;
  private:
  bool _internal_has_platform_windows() const;
  public:
  void clear_platform_windows();
  bool platform_windows() const;
  void set_platform_windows(bool value);
  private:
  bool _internal_platform_windows() const;
  void _internal_set_platform_windows(bool value);
  public:

  // optional bool platform_mac = 3;
  bool has_platform_mac() const;
  private:
  bool _internal_has_platform_mac() const;
  public:
  void clear_platform_mac();
  bool platform_mac() const;
  void set_platform_mac(bool value);
  private:
  bool _internal_platform_mac() const;
  void _internal_set_platform_mac(bool value);
  public:

  // optional bool platform_linux = 4;
  bool has_platform_linux() const;
  private:
  bool _internal_has_platform_linux() const;
  public:
  void clear_platform_linux();
  bool platform_linux() const;
  void set_platform_linux(bool value);
  private:
  bool _internal_platform_linux() const;
  void _internal_set_platform_linux(bool value);
  public:

  // optional bool vr_content = 5;
  bool has_vr_content() const;
  private:
  bool _internal_has_vr_content() const;
  public:
  void clear_vr_content();
  bool vr_content() const;
  void set_vr_content(bool value);
  private:
  bool _internal_vr_content() const;
  void _internal_set_vr_content(bool value);
  public:

  // optional uint32 timestamp_updated = 8;
  bool has_timestamp_updated() const;
  private:
  bool _internal_has_timestamp_updated() const;
  public:
  void clear_timestamp_updated();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_updated() const;
  void set_timestamp_updated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp_updated() const;
  void _internal_set_timestamp_updated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool adult_content_violence = 6;
  bool has_adult_content_violence() const;
  private:
  bool _internal_has_adult_content_violence() const;
  public:
  void clear_adult_content_violence();
  bool adult_content_violence() const;
  void set_adult_content_violence(bool value);
  private:
  bool _internal_adult_content_violence() const;
  void _internal_set_adult_content_violence(bool value);
  public:

  // optional bool adult_content_sex = 7;
  bool has_adult_content_sex() const;
  private:
  bool _internal_has_adult_content_sex() const;
  public:
  void clear_adult_content_sex();
  bool adult_content_sex() const;
  void set_adult_content_sex(bool value);
  private:
  bool _internal_adult_content_sex() const;
  void _internal_set_adult_content_sex(bool value);
  public:

  // optional bool show_broadcast = 14;
  bool has_show_broadcast() const;
  private:
  bool _internal_has_show_broadcast() const;
  public:
  void clear_show_broadcast();
  bool show_broadcast() const;
  void set_show_broadcast(bool value);
  private:
  bool _internal_show_broadcast() const;
  void _internal_set_show_broadcast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCuratorPreferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tagids_curated_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tagids_filtered_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr website_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr website_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discussion_url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 supported_languages_;
  bool platform_windows_;
  bool platform_mac_;
  bool platform_linux_;
  bool vr_content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_updated_;
  bool adult_content_violence_;
  bool adult_content_sex_;
  bool show_broadcast_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CLocalizationToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLocalizationToken) */ {
 public:
  inline CLocalizationToken() : CLocalizationToken(nullptr) {}
  virtual ~CLocalizationToken();
  explicit constexpr CLocalizationToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLocalizationToken(const CLocalizationToken& from);
  CLocalizationToken(CLocalizationToken&& from) noexcept
    : CLocalizationToken() {
    *this = ::std::move(from);
  }

  inline CLocalizationToken& operator=(const CLocalizationToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLocalizationToken& operator=(CLocalizationToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLocalizationToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLocalizationToken* internal_default_instance() {
    return reinterpret_cast<const CLocalizationToken*>(
               &_CLocalizationToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CLocalizationToken& a, CLocalizationToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CLocalizationToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLocalizationToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLocalizationToken* New() const final {
    return CreateMaybeMessage<CLocalizationToken>(nullptr);
  }

  CLocalizationToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLocalizationToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLocalizationToken& from);
  void MergeFrom(const CLocalizationToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLocalizationToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLocalizationToken";
  }
  protected:
  explicit CLocalizationToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizedStringFieldNumber = 2,
    kLanguageFieldNumber = 1,
  };
  // optional string localized_string = 2;
  bool has_localized_string() const;
  private:
  bool _internal_has_localized_string() const;
  public:
  void clear_localized_string();
  const std::string& localized_string() const;
  void set_localized_string(const std::string& value);
  void set_localized_string(std::string&& value);
  void set_localized_string(const char* value);
  void set_localized_string(const char* value, size_t size);
  std::string* mutable_localized_string();
  std::string* release_localized_string();
  void set_allocated_localized_string(std::string* localized_string);
  private:
  const std::string& _internal_localized_string() const;
  void _internal_set_localized_string(const std::string& value);
  std::string* _internal_mutable_localized_string();
  public:

  // optional uint32 language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::PROTOBUF_NAMESPACE_ID::uint32 language() const;
  void set_language(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_language() const;
  void _internal_set_language(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CLocalizationToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localized_string_;
  ::PROTOBUF_NAMESPACE_ID::uint32 language_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CClanEventUserNewsTuple PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClanEventUserNewsTuple) */ {
 public:
  inline CClanEventUserNewsTuple() : CClanEventUserNewsTuple(nullptr) {}
  virtual ~CClanEventUserNewsTuple();
  explicit constexpr CClanEventUserNewsTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClanEventUserNewsTuple(const CClanEventUserNewsTuple& from);
  CClanEventUserNewsTuple(CClanEventUserNewsTuple&& from) noexcept
    : CClanEventUserNewsTuple() {
    *this = ::std::move(from);
  }

  inline CClanEventUserNewsTuple& operator=(const CClanEventUserNewsTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClanEventUserNewsTuple& operator=(CClanEventUserNewsTuple&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClanEventUserNewsTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClanEventUserNewsTuple* internal_default_instance() {
    return reinterpret_cast<const CClanEventUserNewsTuple*>(
               &_CClanEventUserNewsTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CClanEventUserNewsTuple& a, CClanEventUserNewsTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(CClanEventUserNewsTuple* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClanEventUserNewsTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClanEventUserNewsTuple* New() const final {
    return CreateMaybeMessage<CClanEventUserNewsTuple>(nullptr);
  }

  CClanEventUserNewsTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClanEventUserNewsTuple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClanEventUserNewsTuple& from);
  void MergeFrom(const CClanEventUserNewsTuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClanEventUserNewsTuple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClanEventUserNewsTuple";
  }
  protected:
  explicit CClanEventUserNewsTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventGidFieldNumber = 2,
    kClanidFieldNumber = 1,
    kRtimeStartFieldNumber = 4,
    kAnnouncementGidFieldNumber = 3,
    kRtimeEndFieldNumber = 5,
    kPriorityScoreFieldNumber = 6,
    kTypeFieldNumber = 7,
    kClampRangeSlotFieldNumber = 8,
    kAppidFieldNumber = 9,
    kRtime32LastModifiedFieldNumber = 10,
  };
  // optional fixed64 event_gid = 2;
  bool has_event_gid() const;
  private:
  bool _internal_has_event_gid() const;
  public:
  void clear_event_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 event_gid() const;
  void set_event_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_event_gid() const;
  void _internal_set_event_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 clanid = 1;
  bool has_clanid() const;
  private:
  bool _internal_has_clanid() const;
  public:
  void clear_clanid();
  ::PROTOBUF_NAMESPACE_ID::uint32 clanid() const;
  void set_clanid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clanid() const;
  void _internal_set_clanid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtime_start = 4;
  bool has_rtime_start() const;
  private:
  bool _internal_has_rtime_start() const;
  public:
  void clear_rtime_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_start() const;
  void set_rtime_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime_start() const;
  void _internal_set_rtime_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 announcement_gid = 3;
  bool has_announcement_gid() const;
  private:
  bool _internal_has_announcement_gid() const;
  public:
  void clear_announcement_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 announcement_gid() const;
  void set_announcement_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_announcement_gid() const;
  void _internal_set_announcement_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 rtime_end = 5;
  bool has_rtime_end() const;
  private:
  bool _internal_has_rtime_end() const;
  public:
  void clear_rtime_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_end() const;
  void set_rtime_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime_end() const;
  void _internal_set_rtime_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 priority_score = 6;
  bool has_priority_score() const;
  private:
  bool _internal_has_priority_score() const;
  public:
  void clear_priority_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_score() const;
  void set_priority_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priority_score() const;
  void _internal_set_priority_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 clamp_range_slot = 8;
  bool has_clamp_range_slot() const;
  private:
  bool _internal_has_clamp_range_slot() const;
  public:
  void clear_clamp_range_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 clamp_range_slot() const;
  void set_clamp_range_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clamp_range_slot() const;
  void _internal_set_clamp_range_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 appid = 9;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtime32_last_modified = 10;
  bool has_rtime32_last_modified() const;
  private:
  bool _internal_has_rtime32_last_modified() const;
  public:
  void clear_rtime32_last_modified();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_last_modified() const;
  void set_rtime32_last_modified(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime32_last_modified() const;
  void _internal_set_rtime32_last_modified(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CClanEventUserNewsTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 event_gid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clanid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 announcement_gid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clamp_range_slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_last_modified_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CClanMatchEventByRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClanMatchEventByRange) */ {
 public:
  inline CClanMatchEventByRange() : CClanMatchEventByRange(nullptr) {}
  virtual ~CClanMatchEventByRange();
  explicit constexpr CClanMatchEventByRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClanMatchEventByRange(const CClanMatchEventByRange& from);
  CClanMatchEventByRange(CClanMatchEventByRange&& from) noexcept
    : CClanMatchEventByRange() {
    *this = ::std::move(from);
  }

  inline CClanMatchEventByRange& operator=(const CClanMatchEventByRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClanMatchEventByRange& operator=(CClanMatchEventByRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClanMatchEventByRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClanMatchEventByRange* internal_default_instance() {
    return reinterpret_cast<const CClanMatchEventByRange*>(
               &_CClanMatchEventByRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CClanMatchEventByRange& a, CClanMatchEventByRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CClanMatchEventByRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClanMatchEventByRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClanMatchEventByRange* New() const final {
    return CreateMaybeMessage<CClanMatchEventByRange>(nullptr);
  }

  CClanMatchEventByRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClanMatchEventByRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClanMatchEventByRange& from);
  void MergeFrom(const CClanMatchEventByRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClanMatchEventByRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClanMatchEventByRange";
  }
  protected:
  explicit CClanMatchEventByRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 4,
    kRtimeBeforeFieldNumber = 1,
    kRtimeAfterFieldNumber = 2,
    kQualifiedFieldNumber = 3,
  };
  // repeated .CClanEventUserNewsTuple events = 4;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::CClanEventUserNewsTuple* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple >*
      mutable_events();
  private:
  const ::CClanEventUserNewsTuple& _internal_events(int index) const;
  ::CClanEventUserNewsTuple* _internal_add_events();
  public:
  const ::CClanEventUserNewsTuple& events(int index) const;
  ::CClanEventUserNewsTuple* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple >&
      events() const;

  // optional uint32 rtime_before = 1;
  bool has_rtime_before() const;
  private:
  bool _internal_has_rtime_before() const;
  public:
  void clear_rtime_before();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_before() const;
  void set_rtime_before(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime_before() const;
  void _internal_set_rtime_before(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtime_after = 2;
  bool has_rtime_after() const;
  private:
  bool _internal_has_rtime_after() const;
  public:
  void clear_rtime_after();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_after() const;
  void set_rtime_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime_after() const;
  void _internal_set_rtime_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 qualified = 3;
  bool has_qualified() const;
  private:
  bool _internal_has_qualified() const;
  public:
  void clear_qualified();
  ::PROTOBUF_NAMESPACE_ID::uint32 qualified() const;
  void set_qualified(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qualified() const;
  void _internal_set_qualified(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CClanMatchEventByRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple > events_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_before_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_after_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qualified_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_ClanAnnouncementInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_ClanAnnouncementInfo) */ {
 public:
  inline CCommunity_ClanAnnouncementInfo() : CCommunity_ClanAnnouncementInfo(nullptr) {}
  virtual ~CCommunity_ClanAnnouncementInfo();
  explicit constexpr CCommunity_ClanAnnouncementInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_ClanAnnouncementInfo(const CCommunity_ClanAnnouncementInfo& from);
  CCommunity_ClanAnnouncementInfo(CCommunity_ClanAnnouncementInfo&& from) noexcept
    : CCommunity_ClanAnnouncementInfo() {
    *this = ::std::move(from);
  }

  inline CCommunity_ClanAnnouncementInfo& operator=(const CCommunity_ClanAnnouncementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_ClanAnnouncementInfo& operator=(CCommunity_ClanAnnouncementInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCommunity_ClanAnnouncementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_ClanAnnouncementInfo* internal_default_instance() {
    return reinterpret_cast<const CCommunity_ClanAnnouncementInfo*>(
               &_CCommunity_ClanAnnouncementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CCommunity_ClanAnnouncementInfo& a, CCommunity_ClanAnnouncementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_ClanAnnouncementInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_ClanAnnouncementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCommunity_ClanAnnouncementInfo* New() const final {
    return CreateMaybeMessage<CCommunity_ClanAnnouncementInfo>(nullptr);
  }

  CCommunity_ClanAnnouncementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCommunity_ClanAnnouncementInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCommunity_ClanAnnouncementInfo& from);
  void MergeFrom(const CCommunity_ClanAnnouncementInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_ClanAnnouncementInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_ClanAnnouncementInfo";
  }
  protected:
  explicit CCommunity_ClanAnnouncementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 9,
    kHeadlineFieldNumber = 4,
    kBodyFieldNumber = 7,
    kGidFieldNumber = 1,
    kClanidFieldNumber = 2,
    kPosteridFieldNumber = 3,
    kPosttimeFieldNumber = 5,
    kUpdatetimeFieldNumber = 6,
    kCommentcountFieldNumber = 8,
    kLanguageFieldNumber = 10,
    kForumTopicIdFieldNumber = 12,
    kHiddenFieldNumber = 11,
    kVoteupcountFieldNumber = 14,
    kEventGidFieldNumber = 13,
    kVotedowncountFieldNumber = 15,
  };
  // repeated string tags = 9;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string headline = 4;
  bool has_headline() const;
  private:
  bool _internal_has_headline() const;
  public:
  void clear_headline();
  const std::string& headline() const;
  void set_headline(const std::string& value);
  void set_headline(std::string&& value);
  void set_headline(const char* value);
  void set_headline(const char* value, size_t size);
  std::string* mutable_headline();
  std::string* release_headline();
  void set_allocated_headline(std::string* headline);
  private:
  const std::string& _internal_headline() const;
  void _internal_set_headline(const std::string& value);
  std::string* _internal_mutable_headline();
  public:

  // optional string body = 7;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional uint64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 clanid = 2;
  bool has_clanid() const;
  private:
  bool _internal_has_clanid() const;
  public:
  void clear_clanid();
  ::PROTOBUF_NAMESPACE_ID::uint64 clanid() const;
  void set_clanid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clanid() const;
  void _internal_set_clanid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 posterid = 3;
  bool has_posterid() const;
  private:
  bool _internal_has_posterid() const;
  public:
  void clear_posterid();
  ::PROTOBUF_NAMESPACE_ID::uint64 posterid() const;
  void set_posterid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_posterid() const;
  void _internal_set_posterid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 posttime = 5;
  bool has_posttime() const;
  private:
  bool _internal_has_posttime() const;
  public:
  void clear_posttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 posttime() const;
  void set_posttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_posttime() const;
  void _internal_set_posttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 updatetime = 6;
  bool has_updatetime() const;
  private:
  bool _internal_has_updatetime() const;
  public:
  void clear_updatetime();
  ::PROTOBUF_NAMESPACE_ID::uint32 updatetime() const;
  void set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_updatetime() const;
  void _internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 commentcount = 8;
  bool has_commentcount() const;
  private:
  bool _internal_has_commentcount() const;
  public:
  void clear_commentcount();
  ::PROTOBUF_NAMESPACE_ID::int32 commentcount() const;
  void set_commentcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_commentcount() const;
  void _internal_set_commentcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 language = 10;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::PROTOBUF_NAMESPACE_ID::int32 language() const;
  void set_language(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_language() const;
  void _internal_set_language(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 forum_topic_id = 12;
  bool has_forum_topic_id() const;
  private:
  bool _internal_has_forum_topic_id() const;
  public:
  void clear_forum_topic_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 forum_topic_id() const;
  void set_forum_topic_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_forum_topic_id() const;
  void _internal_set_forum_topic_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool hidden = 11;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // optional int32 voteupcount = 14;
  bool has_voteupcount() const;
  private:
  bool _internal_has_voteupcount() const;
  public:
  void clear_voteupcount();
  ::PROTOBUF_NAMESPACE_ID::int32 voteupcount() const;
  void set_voteupcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_voteupcount() const;
  void _internal_set_voteupcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 event_gid = 13;
  bool has_event_gid() const;
  private:
  bool _internal_has_event_gid() const;
  public:
  void clear_event_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 event_gid() const;
  void set_event_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_event_gid() const;
  void _internal_set_event_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 votedowncount = 15;
  bool has_votedowncount() const;
  private:
  bool _internal_has_votedowncount() const;
  public:
  void clear_votedowncount();
  ::PROTOBUF_NAMESPACE_ID::int32 votedowncount() const;
  void set_votedowncount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_votedowncount() const;
  void _internal_set_votedowncount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_ClanAnnouncementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clanid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 posterid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posttime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 updatetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 commentcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 language_;
  ::PROTOBUF_NAMESPACE_ID::uint64 forum_topic_id_;
  bool hidden_;
  ::PROTOBUF_NAMESPACE_ID::int32 voteupcount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 event_gid_;
  ::PROTOBUF_NAMESPACE_ID::int32 votedowncount_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CClanEventData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClanEventData) */ {
 public:
  inline CClanEventData() : CClanEventData(nullptr) {}
  virtual ~CClanEventData();
  explicit constexpr CClanEventData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClanEventData(const CClanEventData& from);
  CClanEventData(CClanEventData&& from) noexcept
    : CClanEventData() {
    *this = ::std::move(from);
  }

  inline CClanEventData& operator=(const CClanEventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClanEventData& operator=(CClanEventData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CClanEventData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClanEventData* internal_default_instance() {
    return reinterpret_cast<const CClanEventData*>(
               &_CClanEventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CClanEventData& a, CClanEventData& b) {
    a.Swap(&b);
  }
  inline void Swap(CClanEventData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClanEventData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClanEventData* New() const final {
    return CreateMaybeMessage<CClanEventData>(nullptr);
  }

  CClanEventData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClanEventData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CClanEventData& from);
  void MergeFrom(const CClanEventData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClanEventData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClanEventData";
  }
  protected:
  explicit CClanEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencedAppidsFieldNumber = 28,
    kEventNameFieldNumber = 3,
    kServerAddressFieldNumber = 6,
    kServerPasswordFieldNumber = 7,
    kEventNotesFieldNumber = 13,
    kJsondataFieldNumber = 14,
    kAnnouncementBodyFieldNumber = 15,
    kGidFieldNumber = 1,
    kClanSteamidFieldNumber = 2,
    kAppidFieldNumber = 5,
    kRtime32StartTimeFieldNumber = 8,
    kRtime32EndTimeFieldNumber = 9,
    kCommentCountFieldNumber = 10,
    kCreatorSteamidFieldNumber = 11,
    kLastUpdateSteamidFieldNumber = 12,
    kPublishedFieldNumber = 16,
    kHiddenFieldNumber = 17,
    kRtime32VisibilityStartFieldNumber = 18,
    kRtime32VisibilityEndFieldNumber = 19,
    kBroadcasterAccountidFieldNumber = 20,
    kFollowerCountFieldNumber = 21,
    kIgnoreCountFieldNumber = 22,
    kForumTopicIdFieldNumber = 23,
    kNewsPostGidFieldNumber = 25,
    kRtime32LastModifiedFieldNumber = 24,
    kRtimeModReviewedFieldNumber = 26,
    kFeaturedAppTagidFieldNumber = 27,
    kEventTypeFieldNumber = 4,
  };
  // repeated uint32 referenced_appids = 28;
  int referenced_appids_size() const;
  private:
  int _internal_referenced_appids_size() const;
  public:
  void clear_referenced_appids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_referenced_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_referenced_appids() const;
  void _internal_add_referenced_appids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_referenced_appids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 referenced_appids(int index) const;
  void set_referenced_appids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_referenced_appids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      referenced_appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_referenced_appids();

  // optional string event_name = 3;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional string server_address = 6;
  bool has_server_address() const;
  private:
  bool _internal_has_server_address() const;
  public:
  void clear_server_address();
  const std::string& server_address() const;
  void set_server_address(const std::string& value);
  void set_server_address(std::string&& value);
  void set_server_address(const char* value);
  void set_server_address(const char* value, size_t size);
  std::string* mutable_server_address();
  std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // optional string server_password = 7;
  bool has_server_password() const;
  private:
  bool _internal_has_server_password() const;
  public:
  void clear_server_password();
  const std::string& server_password() const;
  void set_server_password(const std::string& value);
  void set_server_password(std::string&& value);
  void set_server_password(const char* value);
  void set_server_password(const char* value, size_t size);
  std::string* mutable_server_password();
  std::string* release_server_password();
  void set_allocated_server_password(std::string* server_password);
  private:
  const std::string& _internal_server_password() const;
  void _internal_set_server_password(const std::string& value);
  std::string* _internal_mutable_server_password();
  public:

  // optional string event_notes = 13;
  bool has_event_notes() const;
  private:
  bool _internal_has_event_notes() const;
  public:
  void clear_event_notes();
  const std::string& event_notes() const;
  void set_event_notes(const std::string& value);
  void set_event_notes(std::string&& value);
  void set_event_notes(const char* value);
  void set_event_notes(const char* value, size_t size);
  std::string* mutable_event_notes();
  std::string* release_event_notes();
  void set_allocated_event_notes(std::string* event_notes);
  private:
  const std::string& _internal_event_notes() const;
  void _internal_set_event_notes(const std::string& value);
  std::string* _internal_mutable_event_notes();
  public:

  // optional string jsondata = 14;
  bool has_jsondata() const;
  private:
  bool _internal_has_jsondata() const;
  public:
  void clear_jsondata();
  const std::string& jsondata() const;
  void set_jsondata(const std::string& value);
  void set_jsondata(std::string&& value);
  void set_jsondata(const char* value);
  void set_jsondata(const char* value, size_t size);
  std::string* mutable_jsondata();
  std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
  bool has_announcement_body() const;
  private:
  bool _internal_has_announcement_body() const;
  public:
  void clear_announcement_body();
  const ::CCommunity_ClanAnnouncementInfo& announcement_body() const;
  ::CCommunity_ClanAnnouncementInfo* release_announcement_body();
  ::CCommunity_ClanAnnouncementInfo* mutable_announcement_body();
  void set_allocated_announcement_body(::CCommunity_ClanAnnouncementInfo* announcement_body);
  private:
  const ::CCommunity_ClanAnnouncementInfo& _internal_announcement_body() const;
  ::CCommunity_ClanAnnouncementInfo* _internal_mutable_announcement_body();
  public:
  void unsafe_arena_set_allocated_announcement_body(
      ::CCommunity_ClanAnnouncementInfo* announcement_body);
  ::CCommunity_ClanAnnouncementInfo* unsafe_arena_release_announcement_body();

  // optional fixed64 gid = 1;
  bool has_gid() const;
  private:
  bool _internal_has_gid() const;
  public:
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 clan_steamid = 2;
  bool has_clan_steamid() const;
  private:
  bool _internal_has_clan_steamid() const;
  public:
  void clear_clan_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 clan_steamid() const;
  void set_clan_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clan_steamid() const;
  void _internal_set_clan_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 5;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtime32_start_time = 8;
  bool has_rtime32_start_time() const;
  private:
  bool _internal_has_rtime32_start_time() const;
  public:
  void clear_rtime32_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_start_time() const;
  void set_rtime32_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime32_start_time() const;
  void _internal_set_rtime32_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtime32_end_time = 9;
  bool has_rtime32_end_time() const;
  private:
  bool _internal_has_rtime32_end_time() const;
  public:
  void clear_rtime32_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_end_time() const;
  void set_rtime32_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime32_end_time() const;
  void _internal_set_rtime32_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 comment_count = 10;
  bool has_comment_count() const;
  private:
  bool _internal_has_comment_count() const;
  public:
  void clear_comment_count();
  ::PROTOBUF_NAMESPACE_ID::int32 comment_count() const;
  void set_comment_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comment_count() const;
  void _internal_set_comment_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 creator_steamid = 11;
  bool has_creator_steamid() const;
  private:
  bool _internal_has_creator_steamid() const;
  public:
  void clear_creator_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 creator_steamid() const;
  void set_creator_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creator_steamid() const;
  void _internal_set_creator_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 last_update_steamid = 12;
  bool has_last_update_steamid() const;
  private:
  bool _internal_has_last_update_steamid() const;
  public:
  void clear_last_update_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_update_steamid() const;
  void set_last_update_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_update_steamid() const;
  void _internal_set_last_update_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool published = 16;
  bool has_published() const;
  private:
  bool _internal_has_published() const;
  public:
  void clear_published();
  bool published() const;
  void set_published(bool value);
  private:
  bool _internal_published() const;
  void _internal_set_published(bool value);
  public:

  // optional bool hidden = 17;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // optional uint32 rtime32_visibility_start = 18;
  bool has_rtime32_visibility_start() const;
  private:
  bool _internal_has_rtime32_visibility_start() const;
  public:
  void clear_rtime32_visibility_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_visibility_start() const;
  void set_rtime32_visibility_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime32_visibility_start() const;
  void _internal_set_rtime32_visibility_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtime32_visibility_end = 19;
  bool has_rtime32_visibility_end() const;
  private:
  bool _internal_has_rtime32_visibility_end() const;
  public:
  void clear_rtime32_visibility_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_visibility_end() const;
  void set_rtime32_visibility_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime32_visibility_end() const;
  void _internal_set_rtime32_visibility_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 broadcaster_accountid = 20;
  bool has_broadcaster_accountid() const;
  private:
  bool _internal_has_broadcaster_accountid() const;
  public:
  void clear_broadcaster_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 broadcaster_accountid() const;
  void set_broadcaster_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_broadcaster_accountid() const;
  void _internal_set_broadcaster_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 follower_count = 21;
  bool has_follower_count() const;
  private:
  bool _internal_has_follower_count() const;
  public:
  void clear_follower_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 follower_count() const;
  void set_follower_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_follower_count() const;
  void _internal_set_follower_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ignore_count = 22;
  bool has_ignore_count() const;
  private:
  bool _internal_has_ignore_count() const;
  public:
  void clear_ignore_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 ignore_count() const;
  void set_ignore_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ignore_count() const;
  void _internal_set_ignore_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 forum_topic_id = 23;
  bool has_forum_topic_id() const;
  private:
  bool _internal_has_forum_topic_id() const;
  public:
  void clear_forum_topic_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 forum_topic_id() const;
  void set_forum_topic_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_forum_topic_id() const;
  void _internal_set_forum_topic_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 news_post_gid = 25;
  bool has_news_post_gid() const;
  private:
  bool _internal_has_news_post_gid() const;
  public:
  void clear_news_post_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 news_post_gid() const;
  void set_news_post_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_news_post_gid() const;
  void _internal_set_news_post_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 rtime32_last_modified = 24;
  bool has_rtime32_last_modified() const;
  private:
  bool _internal_has_rtime32_last_modified() const;
  public:
  void clear_rtime32_last_modified();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_last_modified() const;
  void set_rtime32_last_modified(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime32_last_modified() const;
  void _internal_set_rtime32_last_modified(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtime_mod_reviewed = 26;
  bool has_rtime_mod_reviewed() const;
  private:
  bool _internal_has_rtime_mod_reviewed() const;
  public:
  void clear_rtime_mod_reviewed();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_mod_reviewed() const;
  void set_rtime_mod_reviewed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime_mod_reviewed() const;
  void _internal_set_rtime_mod_reviewed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 featured_app_tagid = 27;
  bool has_featured_app_tagid() const;
  private:
  bool _internal_has_featured_app_tagid() const;
  public:
  void clear_featured_app_tagid();
  ::PROTOBUF_NAMESPACE_ID::uint32 featured_app_tagid() const;
  void set_featured_app_tagid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_featured_app_tagid() const;
  void _internal_set_featured_app_tagid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::EProtoClanEventType event_type() const;
  void set_event_type(::EProtoClanEventType value);
  private:
  ::EProtoClanEventType _internal_event_type() const;
  void _internal_set_event_type(::EProtoClanEventType value);
  public:

  // @@protoc_insertion_point(class_scope:CClanEventData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > referenced_appids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_notes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
  ::CCommunity_ClanAnnouncementInfo* announcement_body_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clan_steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 comment_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creator_steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_update_steamid_;
  bool published_;
  bool hidden_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_visibility_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_visibility_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 broadcaster_accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 follower_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ignore_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 forum_topic_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 news_post_gid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_last_modified_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_mod_reviewed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 featured_app_tagid_;
  int event_type_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CBilling_Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBilling_Address) */ {
 public:
  inline CBilling_Address() : CBilling_Address(nullptr) {}
  virtual ~CBilling_Address();
  explicit constexpr CBilling_Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBilling_Address(const CBilling_Address& from);
  CBilling_Address(CBilling_Address&& from) noexcept
    : CBilling_Address() {
    *this = ::std::move(from);
  }

  inline CBilling_Address& operator=(const CBilling_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBilling_Address& operator=(CBilling_Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBilling_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBilling_Address* internal_default_instance() {
    return reinterpret_cast<const CBilling_Address*>(
               &_CBilling_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CBilling_Address& a, CBilling_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(CBilling_Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBilling_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBilling_Address* New() const final {
    return CreateMaybeMessage<CBilling_Address>(nullptr);
  }

  CBilling_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBilling_Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBilling_Address& from);
  void MergeFrom(const CBilling_Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBilling_Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBilling_Address";
  }
  protected:
  explicit CBilling_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kAddress1FieldNumber = 3,
    kAddress2FieldNumber = 4,
    kCityFieldNumber = 5,
    kUsStateFieldNumber = 6,
    kCountryCodeFieldNumber = 7,
    kPostcodeFieldNumber = 8,
    kPhoneFieldNumber = 10,
    kZipPlus4FieldNumber = 9,
  };
  // optional string first_name = 1;
  bool has_first_name() const;
  private:
  bool _internal_has_first_name() const;
  public:
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // optional string last_name = 2;
  bool has_last_name() const;
  private:
  bool _internal_has_last_name() const;
  public:
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // optional string address1 = 3;
  bool has_address1() const;
  private:
  bool _internal_has_address1() const;
  public:
  void clear_address1();
  const std::string& address1() const;
  void set_address1(const std::string& value);
  void set_address1(std::string&& value);
  void set_address1(const char* value);
  void set_address1(const char* value, size_t size);
  std::string* mutable_address1();
  std::string* release_address1();
  void set_allocated_address1(std::string* address1);
  private:
  const std::string& _internal_address1() const;
  void _internal_set_address1(const std::string& value);
  std::string* _internal_mutable_address1();
  public:

  // optional string address2 = 4;
  bool has_address2() const;
  private:
  bool _internal_has_address2() const;
  public:
  void clear_address2();
  const std::string& address2() const;
  void set_address2(const std::string& value);
  void set_address2(std::string&& value);
  void set_address2(const char* value);
  void set_address2(const char* value, size_t size);
  std::string* mutable_address2();
  std::string* release_address2();
  void set_allocated_address2(std::string* address2);
  private:
  const std::string& _internal_address2() const;
  void _internal_set_address2(const std::string& value);
  std::string* _internal_mutable_address2();
  public:

  // optional string city = 5;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional string us_state = 6;
  bool has_us_state() const;
  private:
  bool _internal_has_us_state() const;
  public:
  void clear_us_state();
  const std::string& us_state() const;
  void set_us_state(const std::string& value);
  void set_us_state(std::string&& value);
  void set_us_state(const char* value);
  void set_us_state(const char* value, size_t size);
  std::string* mutable_us_state();
  std::string* release_us_state();
  void set_allocated_us_state(std::string* us_state);
  private:
  const std::string& _internal_us_state() const;
  void _internal_set_us_state(const std::string& value);
  std::string* _internal_mutable_us_state();
  public:

  // optional string country_code = 7;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  void set_country_code(const std::string& value);
  void set_country_code(std::string&& value);
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  std::string* mutable_country_code();
  std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string postcode = 8;
  bool has_postcode() const;
  private:
  bool _internal_has_postcode() const;
  public:
  void clear_postcode();
  const std::string& postcode() const;
  void set_postcode(const std::string& value);
  void set_postcode(std::string&& value);
  void set_postcode(const char* value);
  void set_postcode(const char* value, size_t size);
  std::string* mutable_postcode();
  std::string* release_postcode();
  void set_allocated_postcode(std::string* postcode);
  private:
  const std::string& _internal_postcode() const;
  void _internal_set_postcode(const std::string& value);
  std::string* _internal_mutable_postcode();
  public:

  // optional string phone = 10;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // optional int32 zip_plus4 = 9;
  bool has_zip_plus4() const;
  private:
  bool _internal_has_zip_plus4() const;
  public:
  void clear_zip_plus4();
  ::PROTOBUF_NAMESPACE_ID::int32 zip_plus4() const;
  void set_zip_plus4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zip_plus4() const;
  void _internal_set_zip_plus4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBilling_Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr us_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 zip_plus4_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// -------------------------------------------------------------------

class CPackageReservationStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPackageReservationStatus) */ {
 public:
  inline CPackageReservationStatus() : CPackageReservationStatus(nullptr) {}
  virtual ~CPackageReservationStatus();
  explicit constexpr CPackageReservationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPackageReservationStatus(const CPackageReservationStatus& from);
  CPackageReservationStatus(CPackageReservationStatus&& from) noexcept
    : CPackageReservationStatus() {
    *this = ::std::move(from);
  }

  inline CPackageReservationStatus& operator=(const CPackageReservationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPackageReservationStatus& operator=(CPackageReservationStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPackageReservationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPackageReservationStatus* internal_default_instance() {
    return reinterpret_cast<const CPackageReservationStatus*>(
               &_CPackageReservationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CPackageReservationStatus& a, CPackageReservationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CPackageReservationStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPackageReservationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPackageReservationStatus* New() const final {
    return CreateMaybeMessage<CPackageReservationStatus>(nullptr);
  }

  CPackageReservationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPackageReservationStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPackageReservationStatus& from);
  void MergeFrom(const CPackageReservationStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPackageReservationStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPackageReservationStatus";
  }
  protected:
  explicit CPackageReservationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fbase_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservationCountryCodeFieldNumber = 5,
    kPackageidFieldNumber = 1,
    kReservationStateFieldNumber = 2,
    kQueuePositionFieldNumber = 3,
    kTotalQueueSizeFieldNumber = 4,
    kExpiredFieldNumber = 6,
    kTimeExpiresFieldNumber = 7,
    kTimeReservedFieldNumber = 8,
  };
  // optional string reservation_country_code = 5;
  bool has_reservation_country_code() const;
  private:
  bool _internal_has_reservation_country_code() const;
  public:
  void clear_reservation_country_code();
  const std::string& reservation_country_code() const;
  void set_reservation_country_code(const std::string& value);
  void set_reservation_country_code(std::string&& value);
  void set_reservation_country_code(const char* value);
  void set_reservation_country_code(const char* value, size_t size);
  std::string* mutable_reservation_country_code();
  std::string* release_reservation_country_code();
  void set_allocated_reservation_country_code(std::string* reservation_country_code);
  private:
  const std::string& _internal_reservation_country_code() const;
  void _internal_set_reservation_country_code(const std::string& value);
  std::string* _internal_mutable_reservation_country_code();
  public:

  // optional uint32 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  ::PROTOBUF_NAMESPACE_ID::uint32 packageid() const;
  void set_packageid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packageid() const;
  void _internal_set_packageid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 reservation_state = 2;
  bool has_reservation_state() const;
  private:
  bool _internal_has_reservation_state() const;
  public:
  void clear_reservation_state();
  ::PROTOBUF_NAMESPACE_ID::int32 reservation_state() const;
  void set_reservation_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reservation_state() const;
  void _internal_set_reservation_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 queue_position = 3;
  bool has_queue_position() const;
  private:
  bool _internal_has_queue_position() const;
  public:
  void clear_queue_position();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_position() const;
  void set_queue_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_queue_position() const;
  void _internal_set_queue_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 total_queue_size = 4;
  bool has_total_queue_size() const;
  private:
  bool _internal_has_total_queue_size() const;
  public:
  void clear_total_queue_size();
  ::PROTOBUF_NAMESPACE_ID::int32 total_queue_size() const;
  void set_total_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_queue_size() const;
  void _internal_set_total_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool expired = 6;
  bool has_expired() const;
  private:
  bool _internal_has_expired() const;
  public:
  void clear_expired();
  bool expired() const;
  void set_expired(bool value);
  private:
  bool _internal_expired() const;
  void _internal_set_expired(bool value);
  public:

  // optional uint32 time_expires = 7;
  bool has_time_expires() const;
  private:
  bool _internal_has_time_expires() const;
  public:
  void clear_time_expires();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_expires() const;
  void set_time_expires(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_expires() const;
  void _internal_set_time_expires(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_reserved = 8;
  bool has_time_reserved() const;
  private:
  bool _internal_has_time_reserved() const;
  public:
  void clear_time_reserved();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_reserved() const;
  void set_time_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_reserved() const;
  void _internal_set_time_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPackageReservationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reservation_country_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packageid_;
  ::PROTOBUF_NAMESPACE_ID::int32 reservation_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_queue_size_;
  bool expired_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_expires_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_reserved_;
  friend struct ::TableStruct_steammessages_5fbase_2eproto;
};
// ===================================================================

static const int kMsgpoolSoftLimitFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  msgpool_soft_limit;
static const int kMsgpoolHardLimitFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  msgpool_hard_limit;
static const int kForcePhpGenerationFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  force_php_generation;
static const int kPhpOutputAlwaysNumberFieldNumber = 50020;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  php_output_always_number;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgIPAddress

// fixed32 v4 = 1;
inline bool CMsgIPAddress::_internal_has_v4() const {
  return ip_case() == kV4;
}
inline bool CMsgIPAddress::has_v4() const {
  return _internal_has_v4();
}
inline void CMsgIPAddress::set_has_v4() {
  _oneof_case_[0] = kV4;
}
inline void CMsgIPAddress::clear_v4() {
  if (_internal_has_v4()) {
    ip_.v4_ = 0u;
    clear_has_ip();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgIPAddress::_internal_v4() const {
  if (_internal_has_v4()) {
    return ip_.v4_;
  }
  return 0u;
}
inline void CMsgIPAddress::_internal_set_v4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_v4()) {
    clear_ip();
    set_has_v4();
  }
  ip_.v4_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgIPAddress::v4() const {
  // @@protoc_insertion_point(field_get:CMsgIPAddress.v4)
  return _internal_v4();
}
inline void CMsgIPAddress::set_v4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v4(value);
  // @@protoc_insertion_point(field_set:CMsgIPAddress.v4)
}

// bytes v6 = 2;
inline bool CMsgIPAddress::_internal_has_v6() const {
  return ip_case() == kV6;
}
inline bool CMsgIPAddress::has_v6() const {
  return _internal_has_v6();
}
inline void CMsgIPAddress::set_has_v6() {
  _oneof_case_[0] = kV6;
}
inline void CMsgIPAddress::clear_v6() {
  if (_internal_has_v6()) {
    ip_.v6_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_ip();
  }
}
inline const std::string& CMsgIPAddress::v6() const {
  // @@protoc_insertion_point(field_get:CMsgIPAddress.v6)
  return _internal_v6();
}
inline void CMsgIPAddress::set_v6(const std::string& value) {
  _internal_set_v6(value);
  // @@protoc_insertion_point(field_set:CMsgIPAddress.v6)
}
inline std::string* CMsgIPAddress::mutable_v6() {
  // @@protoc_insertion_point(field_mutable:CMsgIPAddress.v6)
  return _internal_mutable_v6();
}
inline const std::string& CMsgIPAddress::_internal_v6() const {
  if (_internal_has_v6()) {
    return ip_.v6_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CMsgIPAddress::_internal_set_v6(const std::string& value) {
  if (!_internal_has_v6()) {
    clear_ip();
    set_has_v6();
    ip_.v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ip_.v6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgIPAddress::set_v6(std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgIPAddress.v6)
  if (!_internal_has_v6()) {
    clear_ip();
    set_has_v6();
    ip_.v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ip_.v6_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgIPAddress.v6)
}
inline void CMsgIPAddress::set_v6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_v6()) {
    clear_ip();
    set_has_v6();
    ip_.v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ip_.v6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgIPAddress.v6)
}
inline void CMsgIPAddress::set_v6(const void* value,
                             size_t size) {
  if (!_internal_has_v6()) {
    clear_ip();
    set_has_v6();
    ip_.v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ip_.v6_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgIPAddress.v6)
}
inline std::string* CMsgIPAddress::_internal_mutable_v6() {
  if (!_internal_has_v6()) {
    clear_ip();
    set_has_v6();
    ip_.v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ip_.v6_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgIPAddress::release_v6() {
  // @@protoc_insertion_point(field_release:CMsgIPAddress.v6)
  if (_internal_has_v6()) {
    clear_has_ip();
    return ip_.v6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CMsgIPAddress::set_allocated_v6(std::string* v6) {
  if (has_ip()) {
    clear_ip();
  }
  if (v6 != nullptr) {
    set_has_v6();
    ip_.v6_.UnsafeSetDefault(v6);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(v6);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgIPAddress.v6)
}

inline bool CMsgIPAddress::has_ip() const {
  return ip_case() != IP_NOT_SET;
}
inline void CMsgIPAddress::clear_has_ip() {
  _oneof_case_[0] = IP_NOT_SET;
}
inline CMsgIPAddress::IpCase CMsgIPAddress::ip_case() const {
  return CMsgIPAddress::IpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgIPAddressBucket

// optional .CMsgIPAddress original_ip_address = 1;
inline bool CMsgIPAddressBucket::_internal_has_original_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || original_ip_address_ != nullptr);
  return value;
}
inline bool CMsgIPAddressBucket::has_original_ip_address() const {
  return _internal_has_original_ip_address();
}
inline void CMsgIPAddressBucket::clear_original_ip_address() {
  if (original_ip_address_ != nullptr) original_ip_address_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgIPAddress& CMsgIPAddressBucket::_internal_original_ip_address() const {
  const ::CMsgIPAddress* p = original_ip_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgIPAddressBucket::original_ip_address() const {
  // @@protoc_insertion_point(field_get:CMsgIPAddressBucket.original_ip_address)
  return _internal_original_ip_address();
}
inline void CMsgIPAddressBucket::unsafe_arena_set_allocated_original_ip_address(
    ::CMsgIPAddress* original_ip_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_ip_address_);
  }
  original_ip_address_ = original_ip_address;
  if (original_ip_address) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgIPAddressBucket.original_ip_address)
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::release_original_ip_address() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = original_ip_address_;
  original_ip_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::unsafe_arena_release_original_ip_address() {
  // @@protoc_insertion_point(field_release:CMsgIPAddressBucket.original_ip_address)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPAddress* temp = original_ip_address_;
  original_ip_address_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::_internal_mutable_original_ip_address() {
  _has_bits_[0] |= 0x00000001u;
  if (original_ip_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArena());
    original_ip_address_ = p;
  }
  return original_ip_address_;
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::mutable_original_ip_address() {
  // @@protoc_insertion_point(field_mutable:CMsgIPAddressBucket.original_ip_address)
  return _internal_mutable_original_ip_address();
}
inline void CMsgIPAddressBucket::set_allocated_original_ip_address(::CMsgIPAddress* original_ip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete original_ip_address_;
  }
  if (original_ip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(original_ip_address);
    if (message_arena != submessage_arena) {
      original_ip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_ip_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  original_ip_address_ = original_ip_address;
  // @@protoc_insertion_point(field_set_allocated:CMsgIPAddressBucket.original_ip_address)
}

// optional fixed64 bucket = 2;
inline bool CMsgIPAddressBucket::_internal_has_bucket() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgIPAddressBucket::has_bucket() const {
  return _internal_has_bucket();
}
inline void CMsgIPAddressBucket::clear_bucket() {
  bucket_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgIPAddressBucket::_internal_bucket() const {
  return bucket_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgIPAddressBucket::bucket() const {
  // @@protoc_insertion_point(field_get:CMsgIPAddressBucket.bucket)
  return _internal_bucket();
}
inline void CMsgIPAddressBucket::_internal_set_bucket(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  bucket_ = value;
}
inline void CMsgIPAddressBucket::set_bucket(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:CMsgIPAddressBucket.bucket)
}

// -------------------------------------------------------------------

// CMsgProtoBufHeader

// optional fixed64 steamid = 1;
inline bool CMsgProtoBufHeader::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgProtoBufHeader::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.steamid)
  return _internal_steamid();
}
inline void CMsgProtoBufHeader::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  steamid_ = value;
}
inline void CMsgProtoBufHeader::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.steamid)
}

// optional int32 client_sessionid = 2;
inline bool CMsgProtoBufHeader::_internal_has_client_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_client_sessionid() const {
  return _internal_has_client_sessionid();
}
inline void CMsgProtoBufHeader::clear_client_sessionid() {
  client_sessionid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::_internal_client_sessionid() const {
  return client_sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::client_sessionid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.client_sessionid)
  return _internal_client_sessionid();
}
inline void CMsgProtoBufHeader::_internal_set_client_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  client_sessionid_ = value;
}
inline void CMsgProtoBufHeader::set_client_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_sessionid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.client_sessionid)
}

// optional uint32 routing_appid = 3;
inline bool CMsgProtoBufHeader::_internal_has_routing_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_routing_appid() const {
  return _internal_has_routing_appid();
}
inline void CMsgProtoBufHeader::clear_routing_appid() {
  routing_appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_routing_appid() const {
  return routing_appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::routing_appid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.routing_appid)
  return _internal_routing_appid();
}
inline void CMsgProtoBufHeader::_internal_set_routing_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  routing_appid_ = value;
}
inline void CMsgProtoBufHeader::set_routing_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_routing_appid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.routing_appid)
}

// optional fixed64 jobid_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_jobid_source() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_jobid_source() const {
  return _internal_has_jobid_source();
}
inline void CMsgProtoBufHeader::clear_jobid_source() {
  jobid_source_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_jobid_source() const {
  return jobid_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::jobid_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.jobid_source)
  return _internal_jobid_source();
}
inline void CMsgProtoBufHeader::_internal_set_jobid_source(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  jobid_source_ = value;
}
inline void CMsgProtoBufHeader::set_jobid_source(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_jobid_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.jobid_source)
}

// optional fixed64 jobid_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_jobid_target() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_jobid_target() const {
  return _internal_has_jobid_target();
}
inline void CMsgProtoBufHeader::clear_jobid_target() {
  jobid_target_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_jobid_target() const {
  return jobid_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::jobid_target() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.jobid_target)
  return _internal_jobid_target();
}
inline void CMsgProtoBufHeader::_internal_set_jobid_target(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00080000u;
  jobid_target_ = value;
}
inline void CMsgProtoBufHeader::set_jobid_target(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_jobid_target(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.jobid_target)
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::_internal_has_target_job_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return _internal_has_target_job_name();
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  target_job_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtoBufHeader::target_job_name() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.target_job_name)
  return _internal_target_job_name();
}
inline void CMsgProtoBufHeader::set_target_job_name(const std::string& value) {
  _internal_set_target_job_name(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.target_job_name)
}
inline std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.target_job_name)
  return _internal_mutable_target_job_name();
}
inline const std::string& CMsgProtoBufHeader::_internal_target_job_name() const {
  return target_job_name_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_target_job_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgProtoBufHeader::set_target_job_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_job_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgProtoBufHeader.target_job_name)
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgProtoBufHeader.target_job_name)
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoBufHeader.target_job_name)
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_target_job_name() {
  _has_bits_[0] |= 0x00000001u;
  return target_job_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgProtoBufHeader::release_target_job_name() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.target_job_name)
  if (!_internal_has_target_job_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_job_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgProtoBufHeader::set_allocated_target_job_name(std::string* target_job_name) {
  if (target_job_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_job_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_job_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.target_job_name)
}

// optional int32 seq_num = 24;
inline bool CMsgProtoBufHeader::_internal_has_seq_num() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_seq_num() const {
  return _internal_has_seq_num();
}
inline void CMsgProtoBufHeader::clear_seq_num() {
  seq_num_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.seq_num)
  return _internal_seq_num();
}
inline void CMsgProtoBufHeader::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  seq_num_ = value;
}
inline void CMsgProtoBufHeader::set_seq_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.seq_num)
}

// optional int32 eresult = 13 [default = 2];
inline bool CMsgProtoBufHeader::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgProtoBufHeader::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.eresult)
  return _internal_eresult();
}
inline void CMsgProtoBufHeader::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  eresult_ = value;
}
inline void CMsgProtoBufHeader::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.eresult)
}

// optional string error_message = 14;
inline bool CMsgProtoBufHeader::_internal_has_error_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_error_message() const {
  return _internal_has_error_message();
}
inline void CMsgProtoBufHeader::clear_error_message() {
  error_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgProtoBufHeader::error_message() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.error_message)
  return _internal_error_message();
}
inline void CMsgProtoBufHeader::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.error_message)
}
inline std::string* CMsgProtoBufHeader::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& CMsgProtoBufHeader::_internal_error_message() const {
  return error_message_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgProtoBufHeader::set_error_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgProtoBufHeader.error_message)
}
inline void CMsgProtoBufHeader::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgProtoBufHeader.error_message)
}
inline void CMsgProtoBufHeader::set_error_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoBufHeader.error_message)
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_error_message() {
  _has_bits_[0] |= 0x00000002u;
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgProtoBufHeader::release_error_message() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return error_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgProtoBufHeader::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.error_message)
}

// optional uint32 auth_account_flags = 16;
inline bool CMsgProtoBufHeader::_internal_has_auth_account_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_auth_account_flags() const {
  return _internal_has_auth_account_flags();
}
inline void CMsgProtoBufHeader::clear_auth_account_flags() {
  auth_account_flags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_auth_account_flags() const {
  return auth_account_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::auth_account_flags() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.auth_account_flags)
  return _internal_auth_account_flags();
}
inline void CMsgProtoBufHeader::_internal_set_auth_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  auth_account_flags_ = value;
}
inline void CMsgProtoBufHeader::set_auth_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auth_account_flags(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.auth_account_flags)
}

// optional uint32 token_source = 22;
inline bool CMsgProtoBufHeader::_internal_has_token_source() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_token_source() const {
  return _internal_has_token_source();
}
inline void CMsgProtoBufHeader::clear_token_source() {
  token_source_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_token_source() const {
  return token_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::token_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.token_source)
  return _internal_token_source();
}
inline void CMsgProtoBufHeader::_internal_set_token_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  token_source_ = value;
}
inline void CMsgProtoBufHeader::set_token_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_token_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.token_source)
}

// optional bool admin_spoofing_user = 23;
inline bool CMsgProtoBufHeader::_internal_has_admin_spoofing_user() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_admin_spoofing_user() const {
  return _internal_has_admin_spoofing_user();
}
inline void CMsgProtoBufHeader::clear_admin_spoofing_user() {
  admin_spoofing_user_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgProtoBufHeader::_internal_admin_spoofing_user() const {
  return admin_spoofing_user_;
}
inline bool CMsgProtoBufHeader::admin_spoofing_user() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.admin_spoofing_user)
  return _internal_admin_spoofing_user();
}
inline void CMsgProtoBufHeader::_internal_set_admin_spoofing_user(bool value) {
  _has_bits_[0] |= 0x00001000u;
  admin_spoofing_user_ = value;
}
inline void CMsgProtoBufHeader::set_admin_spoofing_user(bool value) {
  _internal_set_admin_spoofing_user(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.admin_spoofing_user)
}

// optional int32 transport_error = 17 [default = 1];
inline bool CMsgProtoBufHeader::_internal_has_transport_error() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_transport_error() const {
  return _internal_has_transport_error();
}
inline void CMsgProtoBufHeader::clear_transport_error() {
  transport_error_ = 1;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::_internal_transport_error() const {
  return transport_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgProtoBufHeader::transport_error() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.transport_error)
  return _internal_transport_error();
}
inline void CMsgProtoBufHeader::_internal_set_transport_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  transport_error_ = value;
}
inline void CMsgProtoBufHeader::set_transport_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transport_error(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.transport_error)
}

// optional uint64 messageid = 18 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_messageid() const {
  return _internal_has_messageid();
}
inline void CMsgProtoBufHeader::clear_messageid() {
  messageid_ = PROTOBUF_ULONGLONG(18446744073709551615);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_messageid() const {
  return messageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::messageid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.messageid)
  return _internal_messageid();
}
inline void CMsgProtoBufHeader::_internal_set_messageid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00400000u;
  messageid_ = value;
}
inline void CMsgProtoBufHeader::set_messageid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.messageid)
}

// optional uint32 publisher_group_id = 19;
inline bool CMsgProtoBufHeader::_internal_has_publisher_group_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_publisher_group_id() const {
  return _internal_has_publisher_group_id();
}
inline void CMsgProtoBufHeader::clear_publisher_group_id() {
  publisher_group_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_publisher_group_id() const {
  return publisher_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::publisher_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.publisher_group_id)
  return _internal_publisher_group_id();
}
inline void CMsgProtoBufHeader::_internal_set_publisher_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  publisher_group_id_ = value;
}
inline void CMsgProtoBufHeader::set_publisher_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_publisher_group_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.publisher_group_id)
}

// optional uint32 sysid = 20;
inline bool CMsgProtoBufHeader::_internal_has_sysid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_sysid() const {
  return _internal_has_sysid();
}
inline void CMsgProtoBufHeader::clear_sysid() {
  sysid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_sysid() const {
  return sysid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::sysid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.sysid)
  return _internal_sysid();
}
inline void CMsgProtoBufHeader::_internal_set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  sysid_ = value;
}
inline void CMsgProtoBufHeader::set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sysid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.sysid)
}

// optional uint64 trace_tag = 21;
inline bool CMsgProtoBufHeader::_internal_has_trace_tag() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_trace_tag() const {
  return _internal_has_trace_tag();
}
inline void CMsgProtoBufHeader::clear_trace_tag() {
  trace_tag_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::_internal_trace_tag() const {
  return trace_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgProtoBufHeader::trace_tag() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.trace_tag)
  return _internal_trace_tag();
}
inline void CMsgProtoBufHeader::_internal_set_trace_tag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  trace_tag_ = value;
}
inline void CMsgProtoBufHeader::set_trace_tag(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trace_tag(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.trace_tag)
}

// optional uint32 webapi_key_id = 25;
inline bool CMsgProtoBufHeader::_internal_has_webapi_key_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_webapi_key_id() const {
  return _internal_has_webapi_key_id();
}
inline void CMsgProtoBufHeader::clear_webapi_key_id() {
  webapi_key_id_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_webapi_key_id() const {
  return webapi_key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::webapi_key_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.webapi_key_id)
  return _internal_webapi_key_id();
}
inline void CMsgProtoBufHeader::_internal_set_webapi_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  webapi_key_id_ = value;
}
inline void CMsgProtoBufHeader::set_webapi_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_webapi_key_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.webapi_key_id)
}

// optional bool is_from_external_source = 26;
inline bool CMsgProtoBufHeader::_internal_has_is_from_external_source() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_is_from_external_source() const {
  return _internal_has_is_from_external_source();
}
inline void CMsgProtoBufHeader::clear_is_from_external_source() {
  is_from_external_source_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgProtoBufHeader::_internal_is_from_external_source() const {
  return is_from_external_source_;
}
inline bool CMsgProtoBufHeader::is_from_external_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.is_from_external_source)
  return _internal_is_from_external_source();
}
inline void CMsgProtoBufHeader::_internal_set_is_from_external_source(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_from_external_source_ = value;
}
inline void CMsgProtoBufHeader::set_is_from_external_source(bool value) {
  _internal_set_is_from_external_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.is_from_external_source)
}

// repeated uint32 forward_to_sysid = 27;
inline int CMsgProtoBufHeader::_internal_forward_to_sysid_size() const {
  return forward_to_sysid_.size();
}
inline int CMsgProtoBufHeader::forward_to_sysid_size() const {
  return _internal_forward_to_sysid_size();
}
inline void CMsgProtoBufHeader::clear_forward_to_sysid() {
  forward_to_sysid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_forward_to_sysid(int index) const {
  return forward_to_sysid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::forward_to_sysid(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.forward_to_sysid)
  return _internal_forward_to_sysid(index);
}
inline void CMsgProtoBufHeader::set_forward_to_sysid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  forward_to_sysid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.forward_to_sysid)
}
inline void CMsgProtoBufHeader::_internal_add_forward_to_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  forward_to_sysid_.Add(value);
}
inline void CMsgProtoBufHeader::add_forward_to_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_forward_to_sysid(value);
  // @@protoc_insertion_point(field_add:CMsgProtoBufHeader.forward_to_sysid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgProtoBufHeader::_internal_forward_to_sysid() const {
  return forward_to_sysid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgProtoBufHeader::forward_to_sysid() const {
  // @@protoc_insertion_point(field_list:CMsgProtoBufHeader.forward_to_sysid)
  return _internal_forward_to_sysid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgProtoBufHeader::_internal_mutable_forward_to_sysid() {
  return &forward_to_sysid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgProtoBufHeader::mutable_forward_to_sysid() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProtoBufHeader.forward_to_sysid)
  return _internal_mutable_forward_to_sysid();
}

// optional uint32 cm_sysid = 28;
inline bool CMsgProtoBufHeader::_internal_has_cm_sysid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_cm_sysid() const {
  return _internal_has_cm_sysid();
}
inline void CMsgProtoBufHeader::clear_cm_sysid() {
  cm_sysid_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_cm_sysid() const {
  return cm_sysid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::cm_sysid() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.cm_sysid)
  return _internal_cm_sysid();
}
inline void CMsgProtoBufHeader::_internal_set_cm_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  cm_sysid_ = value;
}
inline void CMsgProtoBufHeader::set_cm_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cm_sysid(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.cm_sysid)
}

// optional string wg_token = 30;
inline bool CMsgProtoBufHeader::_internal_has_wg_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_wg_token() const {
  return _internal_has_wg_token();
}
inline void CMsgProtoBufHeader::clear_wg_token() {
  wg_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgProtoBufHeader::wg_token() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.wg_token)
  return _internal_wg_token();
}
inline void CMsgProtoBufHeader::set_wg_token(const std::string& value) {
  _internal_set_wg_token(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.wg_token)
}
inline std::string* CMsgProtoBufHeader::mutable_wg_token() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.wg_token)
  return _internal_mutable_wg_token();
}
inline const std::string& CMsgProtoBufHeader::_internal_wg_token() const {
  return wg_token_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_wg_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  wg_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgProtoBufHeader::set_wg_token(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  wg_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgProtoBufHeader.wg_token)
}
inline void CMsgProtoBufHeader::set_wg_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  wg_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgProtoBufHeader.wg_token)
}
inline void CMsgProtoBufHeader::set_wg_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  wg_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoBufHeader.wg_token)
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_wg_token() {
  _has_bits_[0] |= 0x00000004u;
  return wg_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgProtoBufHeader::release_wg_token() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.wg_token)
  if (!_internal_has_wg_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return wg_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgProtoBufHeader::set_allocated_wg_token(std::string* wg_token) {
  if (wg_token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  wg_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wg_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.wg_token)
}

// optional uint32 launcher_type = 31 [default = 0];
inline bool CMsgProtoBufHeader::_internal_has_launcher_type() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_launcher_type() const {
  return _internal_has_launcher_type();
}
inline void CMsgProtoBufHeader::clear_launcher_type() {
  launcher_type_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_launcher_type() const {
  return launcher_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::launcher_type() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.launcher_type)
  return _internal_launcher_type();
}
inline void CMsgProtoBufHeader::_internal_set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  launcher_type_ = value;
}
inline void CMsgProtoBufHeader::set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_launcher_type(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.launcher_type)
}

// optional uint32 realm = 32 [default = 0];
inline bool CMsgProtoBufHeader::_internal_has_realm() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_realm() const {
  return _internal_has_realm();
}
inline void CMsgProtoBufHeader::clear_realm() {
  realm_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_realm() const {
  return realm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::realm() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.realm)
  return _internal_realm();
}
inline void CMsgProtoBufHeader::_internal_set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  realm_ = value;
}
inline void CMsgProtoBufHeader::set_realm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_realm(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.realm)
}

// uint32 ip = 15;
inline bool CMsgProtoBufHeader::_internal_has_ip() const {
  return ip_addr_case() == kIp;
}
inline bool CMsgProtoBufHeader::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgProtoBufHeader::set_has_ip() {
  _oneof_case_[0] = kIp;
}
inline void CMsgProtoBufHeader::clear_ip() {
  if (_internal_has_ip()) {
    ip_addr_.ip_ = 0u;
    clear_has_ip_addr();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::_internal_ip() const {
  if (_internal_has_ip()) {
    return ip_addr_.ip_;
  }
  return 0u;
}
inline void CMsgProtoBufHeader::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_ip()) {
    clear_ip_addr();
    set_has_ip();
  }
  ip_addr_.ip_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgProtoBufHeader::ip() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.ip)
  return _internal_ip();
}
inline void CMsgProtoBufHeader::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.ip)
}

// bytes ip_v6 = 29;
inline bool CMsgProtoBufHeader::_internal_has_ip_v6() const {
  return ip_addr_case() == kIpV6;
}
inline bool CMsgProtoBufHeader::has_ip_v6() const {
  return _internal_has_ip_v6();
}
inline void CMsgProtoBufHeader::set_has_ip_v6() {
  _oneof_case_[0] = kIpV6;
}
inline void CMsgProtoBufHeader::clear_ip_v6() {
  if (_internal_has_ip_v6()) {
    ip_addr_.ip_v6_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_ip_addr();
  }
}
inline const std::string& CMsgProtoBufHeader::ip_v6() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.ip_v6)
  return _internal_ip_v6();
}
inline void CMsgProtoBufHeader::set_ip_v6(const std::string& value) {
  _internal_set_ip_v6(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.ip_v6)
}
inline std::string* CMsgProtoBufHeader::mutable_ip_v6() {
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.ip_v6)
  return _internal_mutable_ip_v6();
}
inline const std::string& CMsgProtoBufHeader::_internal_ip_v6() const {
  if (_internal_has_ip_v6()) {
    return ip_addr_.ip_v6_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CMsgProtoBufHeader::_internal_set_ip_v6(const std::string& value) {
  if (!_internal_has_ip_v6()) {
    clear_ip_addr();
    set_has_ip_v6();
    ip_addr_.ip_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ip_addr_.ip_v6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgProtoBufHeader::set_ip_v6(std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.ip_v6)
  if (!_internal_has_ip_v6()) {
    clear_ip_addr();
    set_has_ip_v6();
    ip_addr_.ip_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ip_addr_.ip_v6_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgProtoBufHeader.ip_v6)
}
inline void CMsgProtoBufHeader::set_ip_v6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_ip_v6()) {
    clear_ip_addr();
    set_has_ip_v6();
    ip_addr_.ip_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ip_addr_.ip_v6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgProtoBufHeader.ip_v6)
}
inline void CMsgProtoBufHeader::set_ip_v6(const void* value,
                             size_t size) {
  if (!_internal_has_ip_v6()) {
    clear_ip_addr();
    set_has_ip_v6();
    ip_addr_.ip_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ip_addr_.ip_v6_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoBufHeader.ip_v6)
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_ip_v6() {
  if (!_internal_has_ip_v6()) {
    clear_ip_addr();
    set_has_ip_v6();
    ip_addr_.ip_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ip_addr_.ip_v6_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgProtoBufHeader::release_ip_v6() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.ip_v6)
  if (_internal_has_ip_v6()) {
    clear_has_ip_addr();
    return ip_addr_.ip_v6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CMsgProtoBufHeader::set_allocated_ip_v6(std::string* ip_v6) {
  if (has_ip_addr()) {
    clear_ip_addr();
  }
  if (ip_v6 != nullptr) {
    set_has_ip_v6();
    ip_addr_.ip_v6_.UnsafeSetDefault(ip_v6);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(ip_v6);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.ip_v6)
}

inline bool CMsgProtoBufHeader::has_ip_addr() const {
  return ip_addr_case() != IP_ADDR_NOT_SET;
}
inline void CMsgProtoBufHeader::clear_has_ip_addr() {
  _oneof_case_[0] = IP_ADDR_NOT_SET;
}
inline CMsgProtoBufHeader::IpAddrCase CMsgProtoBufHeader::ip_addr_case() const {
  return CMsgProtoBufHeader::IpAddrCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgMulti

// optional uint32 size_unzipped = 1;
inline bool CMsgMulti::_internal_has_size_unzipped() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMulti::has_size_unzipped() const {
  return _internal_has_size_unzipped();
}
inline void CMsgMulti::clear_size_unzipped() {
  size_unzipped_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMulti::_internal_size_unzipped() const {
  return size_unzipped_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMulti::size_unzipped() const {
  // @@protoc_insertion_point(field_get:CMsgMulti.size_unzipped)
  return _internal_size_unzipped();
}
inline void CMsgMulti::_internal_set_size_unzipped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_unzipped_ = value;
}
inline void CMsgMulti::set_size_unzipped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size_unzipped(value);
  // @@protoc_insertion_point(field_set:CMsgMulti.size_unzipped)
}

// optional bytes message_body = 2;
inline bool CMsgMulti::_internal_has_message_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMulti::has_message_body() const {
  return _internal_has_message_body();
}
inline void CMsgMulti::clear_message_body() {
  message_body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgMulti::message_body() const {
  // @@protoc_insertion_point(field_get:CMsgMulti.message_body)
  return _internal_message_body();
}
inline void CMsgMulti::set_message_body(const std::string& value) {
  _internal_set_message_body(value);
  // @@protoc_insertion_point(field_set:CMsgMulti.message_body)
}
inline std::string* CMsgMulti::mutable_message_body() {
  // @@protoc_insertion_point(field_mutable:CMsgMulti.message_body)
  return _internal_mutable_message_body();
}
inline const std::string& CMsgMulti::_internal_message_body() const {
  return message_body_.Get();
}
inline void CMsgMulti::_internal_set_message_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgMulti::set_message_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgMulti.message_body)
}
inline void CMsgMulti::set_message_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgMulti.message_body)
}
inline void CMsgMulti::set_message_body(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgMulti.message_body)
}
inline std::string* CMsgMulti::_internal_mutable_message_body() {
  _has_bits_[0] |= 0x00000001u;
  return message_body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgMulti::release_message_body() {
  // @@protoc_insertion_point(field_release:CMsgMulti.message_body)
  if (!_internal_has_message_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgMulti::set_allocated_message_body(std::string* message_body) {
  if (message_body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgMulti.message_body)
}

// -------------------------------------------------------------------

// CMsgProtobufWrapped

// optional bytes message_body = 1;
inline bool CMsgProtobufWrapped::_internal_has_message_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtobufWrapped::has_message_body() const {
  return _internal_has_message_body();
}
inline void CMsgProtobufWrapped::clear_message_body() {
  message_body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtobufWrapped::message_body() const {
  // @@protoc_insertion_point(field_get:CMsgProtobufWrapped.message_body)
  return _internal_message_body();
}
inline void CMsgProtobufWrapped::set_message_body(const std::string& value) {
  _internal_set_message_body(value);
  // @@protoc_insertion_point(field_set:CMsgProtobufWrapped.message_body)
}
inline std::string* CMsgProtobufWrapped::mutable_message_body() {
  // @@protoc_insertion_point(field_mutable:CMsgProtobufWrapped.message_body)
  return _internal_mutable_message_body();
}
inline const std::string& CMsgProtobufWrapped::_internal_message_body() const {
  return message_body_.Get();
}
inline void CMsgProtobufWrapped::_internal_set_message_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgProtobufWrapped::set_message_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgProtobufWrapped.message_body)
}
inline void CMsgProtobufWrapped::set_message_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgProtobufWrapped.message_body)
}
inline void CMsgProtobufWrapped::set_message_body(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgProtobufWrapped.message_body)
}
inline std::string* CMsgProtobufWrapped::_internal_mutable_message_body() {
  _has_bits_[0] |= 0x00000001u;
  return message_body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgProtobufWrapped::release_message_body() {
  // @@protoc_insertion_point(field_release:CMsgProtobufWrapped.message_body)
  if (!_internal_has_message_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgProtobufWrapped::set_allocated_message_body(std::string* message_body) {
  if (message_body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgProtobufWrapped.message_body)
}

// -------------------------------------------------------------------

// CMsgAuthTicket

// optional uint32 estate = 1;
inline bool CMsgAuthTicket::_internal_has_estate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_estate() const {
  return _internal_has_estate();
}
inline void CMsgAuthTicket::clear_estate() {
  estate_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::_internal_estate() const {
  return estate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::estate() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.estate)
  return _internal_estate();
}
inline void CMsgAuthTicket::_internal_set_estate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  estate_ = value;
}
inline void CMsgAuthTicket::set_estate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estate(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.estate)
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgAuthTicket::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgAuthTicket::clear_eresult() {
  eresult_ = 2u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.eresult)
  return _internal_eresult();
}
inline void CMsgAuthTicket::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  eresult_ = value;
}
inline void CMsgAuthTicket::set_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.eresult)
}

// optional fixed64 steamid = 3;
inline bool CMsgAuthTicket::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgAuthTicket::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAuthTicket::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAuthTicket::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.steamid)
  return _internal_steamid();
}
inline void CMsgAuthTicket::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CMsgAuthTicket::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.steamid)
}

// optional fixed64 gameid = 4;
inline bool CMsgAuthTicket::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_gameid() const {
  return _internal_has_gameid();
}
inline void CMsgAuthTicket::clear_gameid() {
  gameid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAuthTicket::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgAuthTicket::gameid() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.gameid)
  return _internal_gameid();
}
inline void CMsgAuthTicket::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  gameid_ = value;
}
inline void CMsgAuthTicket::set_gameid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.gameid)
}

// optional uint32 h_steam_pipe = 5;
inline bool CMsgAuthTicket::_internal_has_h_steam_pipe() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_h_steam_pipe() const {
  return _internal_has_h_steam_pipe();
}
inline void CMsgAuthTicket::clear_h_steam_pipe() {
  h_steam_pipe_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::_internal_h_steam_pipe() const {
  return h_steam_pipe_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::h_steam_pipe() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.h_steam_pipe)
  return _internal_h_steam_pipe();
}
inline void CMsgAuthTicket::_internal_set_h_steam_pipe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_steam_pipe_ = value;
}
inline void CMsgAuthTicket::set_h_steam_pipe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_h_steam_pipe(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.h_steam_pipe)
}

// optional uint32 ticket_crc = 6;
inline bool CMsgAuthTicket::_internal_has_ticket_crc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_ticket_crc() const {
  return _internal_has_ticket_crc();
}
inline void CMsgAuthTicket::clear_ticket_crc() {
  ticket_crc_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::_internal_ticket_crc() const {
  return ticket_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgAuthTicket::ticket_crc() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.ticket_crc)
  return _internal_ticket_crc();
}
inline void CMsgAuthTicket::_internal_set_ticket_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  ticket_crc_ = value;
}
inline void CMsgAuthTicket::set_ticket_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ticket_crc(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.ticket_crc)
}

// optional bytes ticket = 7;
inline bool CMsgAuthTicket::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAuthTicket::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgAuthTicket::clear_ticket() {
  ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgAuthTicket::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgAuthTicket.ticket)
  return _internal_ticket();
}
inline void CMsgAuthTicket::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgAuthTicket.ticket)
}
inline std::string* CMsgAuthTicket::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:CMsgAuthTicket.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& CMsgAuthTicket::_internal_ticket() const {
  return ticket_.Get();
}
inline void CMsgAuthTicket::_internal_set_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgAuthTicket::set_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgAuthTicket.ticket)
}
inline void CMsgAuthTicket::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgAuthTicket.ticket)
}
inline void CMsgAuthTicket::set_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgAuthTicket.ticket)
}
inline std::string* CMsgAuthTicket::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgAuthTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:CMsgAuthTicket.ticket)
  if (!_internal_has_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgAuthTicket::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgAuthTicket.ticket)
}

// -------------------------------------------------------------------

// CCDDBAppDetailCommon

// optional uint32 appid = 1;
inline bool CCDDBAppDetailCommon::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_appid() const {
  return _internal_has_appid();
}
inline void CCDDBAppDetailCommon::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCDDBAppDetailCommon::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCDDBAppDetailCommon::appid() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.appid)
  return _internal_appid();
}
inline void CCDDBAppDetailCommon::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  appid_ = value;
}
inline void CCDDBAppDetailCommon::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.appid)
}

// optional string name = 2;
inline bool CCDDBAppDetailCommon::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_name() const {
  return _internal_has_name();
}
inline void CCDDBAppDetailCommon::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCDDBAppDetailCommon::name() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.name)
  return _internal_name();
}
inline void CCDDBAppDetailCommon::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.name)
}
inline std::string* CCDDBAppDetailCommon::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.name)
  return _internal_mutable_name();
}
inline const std::string& CCDDBAppDetailCommon::_internal_name() const {
  return name_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCDDBAppDetailCommon::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.name)
}
inline void CCDDBAppDetailCommon::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.name)
}
inline void CCDDBAppDetailCommon::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.name)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_name() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.name)
}

// optional string icon = 3;
inline bool CCDDBAppDetailCommon::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_icon() const {
  return _internal_has_icon();
}
inline void CCDDBAppDetailCommon::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCDDBAppDetailCommon::icon() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.icon)
  return _internal_icon();
}
inline void CCDDBAppDetailCommon::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.icon)
}
inline std::string* CCDDBAppDetailCommon::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.icon)
  return _internal_mutable_icon();
}
inline const std::string& CCDDBAppDetailCommon::_internal_icon() const {
  return icon_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCDDBAppDetailCommon::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.icon)
}
inline void CCDDBAppDetailCommon::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.icon)
}
inline void CCDDBAppDetailCommon::set_icon(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.icon)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_icon() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.icon)
}

// optional string logo = 4;
inline bool CCDDBAppDetailCommon::_internal_has_logo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_logo() const {
  return _internal_has_logo();
}
inline void CCDDBAppDetailCommon::clear_logo() {
  logo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCDDBAppDetailCommon::logo() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.logo)
  return _internal_logo();
}
inline void CCDDBAppDetailCommon::set_logo(const std::string& value) {
  _internal_set_logo(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.logo)
}
inline std::string* CCDDBAppDetailCommon::mutable_logo() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.logo)
  return _internal_mutable_logo();
}
inline const std::string& CCDDBAppDetailCommon::_internal_logo() const {
  return logo_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_logo(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCDDBAppDetailCommon::set_logo(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  logo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.logo)
}
inline void CCDDBAppDetailCommon::set_logo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.logo)
}
inline void CCDDBAppDetailCommon::set_logo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.logo)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_logo() {
  _has_bits_[0] |= 0x00000004u;
  return logo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_logo() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.logo)
  if (!_internal_has_logo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return logo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.logo)
}

// optional string logo_small = 5;
inline bool CCDDBAppDetailCommon::_internal_has_logo_small() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_logo_small() const {
  return _internal_has_logo_small();
}
inline void CCDDBAppDetailCommon::clear_logo_small() {
  logo_small_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CCDDBAppDetailCommon::logo_small() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.logo_small)
  return _internal_logo_small();
}
inline void CCDDBAppDetailCommon::set_logo_small(const std::string& value) {
  _internal_set_logo_small(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.logo_small)
}
inline std::string* CCDDBAppDetailCommon::mutable_logo_small() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.logo_small)
  return _internal_mutable_logo_small();
}
inline const std::string& CCDDBAppDetailCommon::_internal_logo_small() const {
  return logo_small_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_logo_small(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  logo_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCDDBAppDetailCommon::set_logo_small(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  logo_small_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.logo_small)
}
inline void CCDDBAppDetailCommon::set_logo_small(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  logo_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.logo_small)
}
inline void CCDDBAppDetailCommon::set_logo_small(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  logo_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.logo_small)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_logo_small() {
  _has_bits_[0] |= 0x00000008u;
  return logo_small_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_logo_small() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.logo_small)
  if (!_internal_has_logo_small()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return logo_small_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_logo_small(std::string* logo_small) {
  if (logo_small != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  logo_small_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo_small,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.logo_small)
}

// optional bool tool = 6;
inline bool CCDDBAppDetailCommon::_internal_has_tool() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_tool() const {
  return _internal_has_tool();
}
inline void CCDDBAppDetailCommon::clear_tool() {
  tool_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCDDBAppDetailCommon::_internal_tool() const {
  return tool_;
}
inline bool CCDDBAppDetailCommon::tool() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.tool)
  return _internal_tool();
}
inline void CCDDBAppDetailCommon::_internal_set_tool(bool value) {
  _has_bits_[0] |= 0x00000080u;
  tool_ = value;
}
inline void CCDDBAppDetailCommon::set_tool(bool value) {
  _internal_set_tool(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.tool)
}

// optional bool demo = 7;
inline bool CCDDBAppDetailCommon::_internal_has_demo() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_demo() const {
  return _internal_has_demo();
}
inline void CCDDBAppDetailCommon::clear_demo() {
  demo_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CCDDBAppDetailCommon::_internal_demo() const {
  return demo_;
}
inline bool CCDDBAppDetailCommon::demo() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.demo)
  return _internal_demo();
}
inline void CCDDBAppDetailCommon::_internal_set_demo(bool value) {
  _has_bits_[0] |= 0x00000100u;
  demo_ = value;
}
inline void CCDDBAppDetailCommon::set_demo(bool value) {
  _internal_set_demo(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.demo)
}

// optional bool media = 8;
inline bool CCDDBAppDetailCommon::_internal_has_media() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_media() const {
  return _internal_has_media();
}
inline void CCDDBAppDetailCommon::clear_media() {
  media_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CCDDBAppDetailCommon::_internal_media() const {
  return media_;
}
inline bool CCDDBAppDetailCommon::media() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.media)
  return _internal_media();
}
inline void CCDDBAppDetailCommon::_internal_set_media(bool value) {
  _has_bits_[0] |= 0x00000200u;
  media_ = value;
}
inline void CCDDBAppDetailCommon::set_media(bool value) {
  _internal_set_media(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.media)
}

// optional bool community_visible_stats = 9;
inline bool CCDDBAppDetailCommon::_internal_has_community_visible_stats() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_community_visible_stats() const {
  return _internal_has_community_visible_stats();
}
inline void CCDDBAppDetailCommon::clear_community_visible_stats() {
  community_visible_stats_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CCDDBAppDetailCommon::_internal_community_visible_stats() const {
  return community_visible_stats_;
}
inline bool CCDDBAppDetailCommon::community_visible_stats() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.community_visible_stats)
  return _internal_community_visible_stats();
}
inline void CCDDBAppDetailCommon::_internal_set_community_visible_stats(bool value) {
  _has_bits_[0] |= 0x00000400u;
  community_visible_stats_ = value;
}
inline void CCDDBAppDetailCommon::set_community_visible_stats(bool value) {
  _internal_set_community_visible_stats(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.community_visible_stats)
}

// optional string friendly_name = 10;
inline bool CCDDBAppDetailCommon::_internal_has_friendly_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_friendly_name() const {
  return _internal_has_friendly_name();
}
inline void CCDDBAppDetailCommon::clear_friendly_name() {
  friendly_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CCDDBAppDetailCommon::friendly_name() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.friendly_name)
  return _internal_friendly_name();
}
inline void CCDDBAppDetailCommon::set_friendly_name(const std::string& value) {
  _internal_set_friendly_name(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.friendly_name)
}
inline std::string* CCDDBAppDetailCommon::mutable_friendly_name() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.friendly_name)
  return _internal_mutable_friendly_name();
}
inline const std::string& CCDDBAppDetailCommon::_internal_friendly_name() const {
  return friendly_name_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_friendly_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  friendly_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCDDBAppDetailCommon::set_friendly_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  friendly_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.friendly_name)
}
inline void CCDDBAppDetailCommon::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  friendly_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.friendly_name)
}
inline void CCDDBAppDetailCommon::set_friendly_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  friendly_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.friendly_name)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_friendly_name() {
  _has_bits_[0] |= 0x00000010u;
  return friendly_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_friendly_name() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.friendly_name)
  if (!_internal_has_friendly_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return friendly_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_friendly_name(std::string* friendly_name) {
  if (friendly_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  friendly_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendly_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.friendly_name)
}

// optional string propagation = 11;
inline bool CCDDBAppDetailCommon::_internal_has_propagation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_propagation() const {
  return _internal_has_propagation();
}
inline void CCDDBAppDetailCommon::clear_propagation() {
  propagation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CCDDBAppDetailCommon::propagation() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.propagation)
  return _internal_propagation();
}
inline void CCDDBAppDetailCommon::set_propagation(const std::string& value) {
  _internal_set_propagation(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.propagation)
}
inline std::string* CCDDBAppDetailCommon::mutable_propagation() {
  // @@protoc_insertion_point(field_mutable:CCDDBAppDetailCommon.propagation)
  return _internal_mutable_propagation();
}
inline const std::string& CCDDBAppDetailCommon::_internal_propagation() const {
  return propagation_.Get();
}
inline void CCDDBAppDetailCommon::_internal_set_propagation(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  propagation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCDDBAppDetailCommon::set_propagation(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  propagation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCDDBAppDetailCommon.propagation)
}
inline void CCDDBAppDetailCommon::set_propagation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  propagation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCDDBAppDetailCommon.propagation)
}
inline void CCDDBAppDetailCommon::set_propagation(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  propagation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCDDBAppDetailCommon.propagation)
}
inline std::string* CCDDBAppDetailCommon::_internal_mutable_propagation() {
  _has_bits_[0] |= 0x00000020u;
  return propagation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCDDBAppDetailCommon::release_propagation() {
  // @@protoc_insertion_point(field_release:CCDDBAppDetailCommon.propagation)
  if (!_internal_has_propagation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return propagation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCDDBAppDetailCommon::set_allocated_propagation(std::string* propagation) {
  if (propagation != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  propagation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propagation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCDDBAppDetailCommon.propagation)
}

// optional bool has_adult_content = 12;
inline bool CCDDBAppDetailCommon::_internal_has_has_adult_content() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_has_adult_content() const {
  return _internal_has_has_adult_content();
}
inline void CCDDBAppDetailCommon::clear_has_adult_content() {
  has_adult_content_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CCDDBAppDetailCommon::_internal_has_adult_content() const {
  return has_adult_content_;
}
inline bool CCDDBAppDetailCommon::has_adult_content() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.has_adult_content)
  return _internal_has_adult_content();
}
inline void CCDDBAppDetailCommon::_internal_set_has_adult_content(bool value) {
  _has_bits_[0] |= 0x00000800u;
  has_adult_content_ = value;
}
inline void CCDDBAppDetailCommon::set_has_adult_content(bool value) {
  _internal_set_has_adult_content(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.has_adult_content)
}

// optional bool is_visible_in_steam_china = 13;
inline bool CCDDBAppDetailCommon::_internal_has_is_visible_in_steam_china() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CCDDBAppDetailCommon::has_is_visible_in_steam_china() const {
  return _internal_has_is_visible_in_steam_china();
}
inline void CCDDBAppDetailCommon::clear_is_visible_in_steam_china() {
  is_visible_in_steam_china_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CCDDBAppDetailCommon::_internal_is_visible_in_steam_china() const {
  return is_visible_in_steam_china_;
}
inline bool CCDDBAppDetailCommon::is_visible_in_steam_china() const {
  // @@protoc_insertion_point(field_get:CCDDBAppDetailCommon.is_visible_in_steam_china)
  return _internal_is_visible_in_steam_china();
}
inline void CCDDBAppDetailCommon::_internal_set_is_visible_in_steam_china(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_visible_in_steam_china_ = value;
}
inline void CCDDBAppDetailCommon::set_is_visible_in_steam_china(bool value) {
  _internal_set_is_visible_in_steam_china(value);
  // @@protoc_insertion_point(field_set:CCDDBAppDetailCommon.is_visible_in_steam_china)
}

// -------------------------------------------------------------------

// CMsgAppRights

// optional bool edit_info = 1;
inline bool CMsgAppRights::_internal_has_edit_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAppRights::has_edit_info() const {
  return _internal_has_edit_info();
}
inline void CMsgAppRights::clear_edit_info() {
  edit_info_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgAppRights::_internal_edit_info() const {
  return edit_info_;
}
inline bool CMsgAppRights::edit_info() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.edit_info)
  return _internal_edit_info();
}
inline void CMsgAppRights::_internal_set_edit_info(bool value) {
  _has_bits_[0] |= 0x00000001u;
  edit_info_ = value;
}
inline void CMsgAppRights::set_edit_info(bool value) {
  _internal_set_edit_info(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.edit_info)
}

// optional bool publish = 2;
inline bool CMsgAppRights::_internal_has_publish() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAppRights::has_publish() const {
  return _internal_has_publish();
}
inline void CMsgAppRights::clear_publish() {
  publish_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgAppRights::_internal_publish() const {
  return publish_;
}
inline bool CMsgAppRights::publish() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.publish)
  return _internal_publish();
}
inline void CMsgAppRights::_internal_set_publish(bool value) {
  _has_bits_[0] |= 0x00000002u;
  publish_ = value;
}
inline void CMsgAppRights::set_publish(bool value) {
  _internal_set_publish(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.publish)
}

// optional bool view_error_data = 3;
inline bool CMsgAppRights::_internal_has_view_error_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAppRights::has_view_error_data() const {
  return _internal_has_view_error_data();
}
inline void CMsgAppRights::clear_view_error_data() {
  view_error_data_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgAppRights::_internal_view_error_data() const {
  return view_error_data_;
}
inline bool CMsgAppRights::view_error_data() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.view_error_data)
  return _internal_view_error_data();
}
inline void CMsgAppRights::_internal_set_view_error_data(bool value) {
  _has_bits_[0] |= 0x00000004u;
  view_error_data_ = value;
}
inline void CMsgAppRights::set_view_error_data(bool value) {
  _internal_set_view_error_data(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.view_error_data)
}

// optional bool download = 4;
inline bool CMsgAppRights::_internal_has_download() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAppRights::has_download() const {
  return _internal_has_download();
}
inline void CMsgAppRights::clear_download() {
  download_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgAppRights::_internal_download() const {
  return download_;
}
inline bool CMsgAppRights::download() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.download)
  return _internal_download();
}
inline void CMsgAppRights::_internal_set_download(bool value) {
  _has_bits_[0] |= 0x00000008u;
  download_ = value;
}
inline void CMsgAppRights::set_download(bool value) {
  _internal_set_download(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.download)
}

// optional bool upload_cdkeys = 5;
inline bool CMsgAppRights::_internal_has_upload_cdkeys() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgAppRights::has_upload_cdkeys() const {
  return _internal_has_upload_cdkeys();
}
inline void CMsgAppRights::clear_upload_cdkeys() {
  upload_cdkeys_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgAppRights::_internal_upload_cdkeys() const {
  return upload_cdkeys_;
}
inline bool CMsgAppRights::upload_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.upload_cdkeys)
  return _internal_upload_cdkeys();
}
inline void CMsgAppRights::_internal_set_upload_cdkeys(bool value) {
  _has_bits_[0] |= 0x00000010u;
  upload_cdkeys_ = value;
}
inline void CMsgAppRights::set_upload_cdkeys(bool value) {
  _internal_set_upload_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.upload_cdkeys)
}

// optional bool generate_cdkeys = 6;
inline bool CMsgAppRights::_internal_has_generate_cdkeys() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgAppRights::has_generate_cdkeys() const {
  return _internal_has_generate_cdkeys();
}
inline void CMsgAppRights::clear_generate_cdkeys() {
  generate_cdkeys_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgAppRights::_internal_generate_cdkeys() const {
  return generate_cdkeys_;
}
inline bool CMsgAppRights::generate_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.generate_cdkeys)
  return _internal_generate_cdkeys();
}
inline void CMsgAppRights::_internal_set_generate_cdkeys(bool value) {
  _has_bits_[0] |= 0x00000020u;
  generate_cdkeys_ = value;
}
inline void CMsgAppRights::set_generate_cdkeys(bool value) {
  _internal_set_generate_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.generate_cdkeys)
}

// optional bool view_financials = 7;
inline bool CMsgAppRights::_internal_has_view_financials() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgAppRights::has_view_financials() const {
  return _internal_has_view_financials();
}
inline void CMsgAppRights::clear_view_financials() {
  view_financials_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgAppRights::_internal_view_financials() const {
  return view_financials_;
}
inline bool CMsgAppRights::view_financials() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.view_financials)
  return _internal_view_financials();
}
inline void CMsgAppRights::_internal_set_view_financials(bool value) {
  _has_bits_[0] |= 0x00000040u;
  view_financials_ = value;
}
inline void CMsgAppRights::set_view_financials(bool value) {
  _internal_set_view_financials(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.view_financials)
}

// optional bool manage_ceg = 8;
inline bool CMsgAppRights::_internal_has_manage_ceg() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_ceg() const {
  return _internal_has_manage_ceg();
}
inline void CMsgAppRights::clear_manage_ceg() {
  manage_ceg_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgAppRights::_internal_manage_ceg() const {
  return manage_ceg_;
}
inline bool CMsgAppRights::manage_ceg() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_ceg)
  return _internal_manage_ceg();
}
inline void CMsgAppRights::_internal_set_manage_ceg(bool value) {
  _has_bits_[0] |= 0x00000080u;
  manage_ceg_ = value;
}
inline void CMsgAppRights::set_manage_ceg(bool value) {
  _internal_set_manage_ceg(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_ceg)
}

// optional bool manage_signing = 9;
inline bool CMsgAppRights::_internal_has_manage_signing() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_signing() const {
  return _internal_has_manage_signing();
}
inline void CMsgAppRights::clear_manage_signing() {
  manage_signing_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgAppRights::_internal_manage_signing() const {
  return manage_signing_;
}
inline bool CMsgAppRights::manage_signing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_signing)
  return _internal_manage_signing();
}
inline void CMsgAppRights::_internal_set_manage_signing(bool value) {
  _has_bits_[0] |= 0x00000100u;
  manage_signing_ = value;
}
inline void CMsgAppRights::set_manage_signing(bool value) {
  _internal_set_manage_signing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_signing)
}

// optional bool manage_cdkeys = 10;
inline bool CMsgAppRights::_internal_has_manage_cdkeys() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_cdkeys() const {
  return _internal_has_manage_cdkeys();
}
inline void CMsgAppRights::clear_manage_cdkeys() {
  manage_cdkeys_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgAppRights::_internal_manage_cdkeys() const {
  return manage_cdkeys_;
}
inline bool CMsgAppRights::manage_cdkeys() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_cdkeys)
  return _internal_manage_cdkeys();
}
inline void CMsgAppRights::_internal_set_manage_cdkeys(bool value) {
  _has_bits_[0] |= 0x00000200u;
  manage_cdkeys_ = value;
}
inline void CMsgAppRights::set_manage_cdkeys(bool value) {
  _internal_set_manage_cdkeys(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_cdkeys)
}

// optional bool edit_marketing = 11;
inline bool CMsgAppRights::_internal_has_edit_marketing() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgAppRights::has_edit_marketing() const {
  return _internal_has_edit_marketing();
}
inline void CMsgAppRights::clear_edit_marketing() {
  edit_marketing_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgAppRights::_internal_edit_marketing() const {
  return edit_marketing_;
}
inline bool CMsgAppRights::edit_marketing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.edit_marketing)
  return _internal_edit_marketing();
}
inline void CMsgAppRights::_internal_set_edit_marketing(bool value) {
  _has_bits_[0] |= 0x00000400u;
  edit_marketing_ = value;
}
inline void CMsgAppRights::set_edit_marketing(bool value) {
  _internal_set_edit_marketing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.edit_marketing)
}

// optional bool economy_support = 12;
inline bool CMsgAppRights::_internal_has_economy_support() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgAppRights::has_economy_support() const {
  return _internal_has_economy_support();
}
inline void CMsgAppRights::clear_economy_support() {
  economy_support_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgAppRights::_internal_economy_support() const {
  return economy_support_;
}
inline bool CMsgAppRights::economy_support() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.economy_support)
  return _internal_economy_support();
}
inline void CMsgAppRights::_internal_set_economy_support(bool value) {
  _has_bits_[0] |= 0x00000800u;
  economy_support_ = value;
}
inline void CMsgAppRights::set_economy_support(bool value) {
  _internal_set_economy_support(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.economy_support)
}

// optional bool economy_support_supervisor = 13;
inline bool CMsgAppRights::_internal_has_economy_support_supervisor() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_economy_support_supervisor() const {
  return _internal_has_economy_support_supervisor();
}
inline void CMsgAppRights::clear_economy_support_supervisor() {
  economy_support_supervisor_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgAppRights::_internal_economy_support_supervisor() const {
  return economy_support_supervisor_;
}
inline bool CMsgAppRights::economy_support_supervisor() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.economy_support_supervisor)
  return _internal_economy_support_supervisor();
}
inline void CMsgAppRights::_internal_set_economy_support_supervisor(bool value) {
  _has_bits_[0] |= 0x00001000u;
  economy_support_supervisor_ = value;
}
inline void CMsgAppRights::set_economy_support_supervisor(bool value) {
  _internal_set_economy_support_supervisor(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.economy_support_supervisor)
}

// optional bool manage_pricing = 14;
inline bool CMsgAppRights::_internal_has_manage_pricing() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_manage_pricing() const {
  return _internal_has_manage_pricing();
}
inline void CMsgAppRights::clear_manage_pricing() {
  manage_pricing_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgAppRights::_internal_manage_pricing() const {
  return manage_pricing_;
}
inline bool CMsgAppRights::manage_pricing() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.manage_pricing)
  return _internal_manage_pricing();
}
inline void CMsgAppRights::_internal_set_manage_pricing(bool value) {
  _has_bits_[0] |= 0x00002000u;
  manage_pricing_ = value;
}
inline void CMsgAppRights::set_manage_pricing(bool value) {
  _internal_set_manage_pricing(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.manage_pricing)
}

// optional bool broadcast_live = 15;
inline bool CMsgAppRights::_internal_has_broadcast_live() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_broadcast_live() const {
  return _internal_has_broadcast_live();
}
inline void CMsgAppRights::clear_broadcast_live() {
  broadcast_live_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgAppRights::_internal_broadcast_live() const {
  return broadcast_live_;
}
inline bool CMsgAppRights::broadcast_live() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.broadcast_live)
  return _internal_broadcast_live();
}
inline void CMsgAppRights::_internal_set_broadcast_live(bool value) {
  _has_bits_[0] |= 0x00004000u;
  broadcast_live_ = value;
}
inline void CMsgAppRights::set_broadcast_live(bool value) {
  _internal_set_broadcast_live(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.broadcast_live)
}

// optional bool view_marketing_traffic = 16;
inline bool CMsgAppRights::_internal_has_view_marketing_traffic() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgAppRights::has_view_marketing_traffic() const {
  return _internal_has_view_marketing_traffic();
}
inline void CMsgAppRights::clear_view_marketing_traffic() {
  view_marketing_traffic_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgAppRights::_internal_view_marketing_traffic() const {
  return view_marketing_traffic_;
}
inline bool CMsgAppRights::view_marketing_traffic() const {
  // @@protoc_insertion_point(field_get:CMsgAppRights.view_marketing_traffic)
  return _internal_view_marketing_traffic();
}
inline void CMsgAppRights::_internal_set_view_marketing_traffic(bool value) {
  _has_bits_[0] |= 0x00008000u;
  view_marketing_traffic_ = value;
}
inline void CMsgAppRights::set_view_marketing_traffic(bool value) {
  _internal_set_view_marketing_traffic(value);
  // @@protoc_insertion_point(field_set:CMsgAppRights.view_marketing_traffic)
}

// -------------------------------------------------------------------

// CCuratorPreferences

// optional uint32 supported_languages = 1;
inline bool CCuratorPreferences::_internal_has_supported_languages() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_supported_languages() const {
  return _internal_has_supported_languages();
}
inline void CCuratorPreferences::clear_supported_languages() {
  supported_languages_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCuratorPreferences::_internal_supported_languages() const {
  return supported_languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCuratorPreferences::supported_languages() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.supported_languages)
  return _internal_supported_languages();
}
inline void CCuratorPreferences::_internal_set_supported_languages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  supported_languages_ = value;
}
inline void CCuratorPreferences::set_supported_languages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_supported_languages(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.supported_languages)
}

// optional bool platform_windows = 2;
inline bool CCuratorPreferences::_internal_has_platform_windows() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_platform_windows() const {
  return _internal_has_platform_windows();
}
inline void CCuratorPreferences::clear_platform_windows() {
  platform_windows_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CCuratorPreferences::_internal_platform_windows() const {
  return platform_windows_;
}
inline bool CCuratorPreferences::platform_windows() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.platform_windows)
  return _internal_platform_windows();
}
inline void CCuratorPreferences::_internal_set_platform_windows(bool value) {
  _has_bits_[0] |= 0x00000010u;
  platform_windows_ = value;
}
inline void CCuratorPreferences::set_platform_windows(bool value) {
  _internal_set_platform_windows(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.platform_windows)
}

// optional bool platform_mac = 3;
inline bool CCuratorPreferences::_internal_has_platform_mac() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_platform_mac() const {
  return _internal_has_platform_mac();
}
inline void CCuratorPreferences::clear_platform_mac() {
  platform_mac_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CCuratorPreferences::_internal_platform_mac() const {
  return platform_mac_;
}
inline bool CCuratorPreferences::platform_mac() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.platform_mac)
  return _internal_platform_mac();
}
inline void CCuratorPreferences::_internal_set_platform_mac(bool value) {
  _has_bits_[0] |= 0x00000020u;
  platform_mac_ = value;
}
inline void CCuratorPreferences::set_platform_mac(bool value) {
  _internal_set_platform_mac(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.platform_mac)
}

// optional bool platform_linux = 4;
inline bool CCuratorPreferences::_internal_has_platform_linux() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_platform_linux() const {
  return _internal_has_platform_linux();
}
inline void CCuratorPreferences::clear_platform_linux() {
  platform_linux_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CCuratorPreferences::_internal_platform_linux() const {
  return platform_linux_;
}
inline bool CCuratorPreferences::platform_linux() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.platform_linux)
  return _internal_platform_linux();
}
inline void CCuratorPreferences::_internal_set_platform_linux(bool value) {
  _has_bits_[0] |= 0x00000040u;
  platform_linux_ = value;
}
inline void CCuratorPreferences::set_platform_linux(bool value) {
  _internal_set_platform_linux(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.platform_linux)
}

// optional bool vr_content = 5;
inline bool CCuratorPreferences::_internal_has_vr_content() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_vr_content() const {
  return _internal_has_vr_content();
}
inline void CCuratorPreferences::clear_vr_content() {
  vr_content_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CCuratorPreferences::_internal_vr_content() const {
  return vr_content_;
}
inline bool CCuratorPreferences::vr_content() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.vr_content)
  return _internal_vr_content();
}
inline void CCuratorPreferences::_internal_set_vr_content(bool value) {
  _has_bits_[0] |= 0x00000080u;
  vr_content_ = value;
}
inline void CCuratorPreferences::set_vr_content(bool value) {
  _internal_set_vr_content(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.vr_content)
}

// optional bool adult_content_violence = 6;
inline bool CCuratorPreferences::_internal_has_adult_content_violence() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_adult_content_violence() const {
  return _internal_has_adult_content_violence();
}
inline void CCuratorPreferences::clear_adult_content_violence() {
  adult_content_violence_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CCuratorPreferences::_internal_adult_content_violence() const {
  return adult_content_violence_;
}
inline bool CCuratorPreferences::adult_content_violence() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.adult_content_violence)
  return _internal_adult_content_violence();
}
inline void CCuratorPreferences::_internal_set_adult_content_violence(bool value) {
  _has_bits_[0] |= 0x00000200u;
  adult_content_violence_ = value;
}
inline void CCuratorPreferences::set_adult_content_violence(bool value) {
  _internal_set_adult_content_violence(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.adult_content_violence)
}

// optional bool adult_content_sex = 7;
inline bool CCuratorPreferences::_internal_has_adult_content_sex() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_adult_content_sex() const {
  return _internal_has_adult_content_sex();
}
inline void CCuratorPreferences::clear_adult_content_sex() {
  adult_content_sex_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CCuratorPreferences::_internal_adult_content_sex() const {
  return adult_content_sex_;
}
inline bool CCuratorPreferences::adult_content_sex() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.adult_content_sex)
  return _internal_adult_content_sex();
}
inline void CCuratorPreferences::_internal_set_adult_content_sex(bool value) {
  _has_bits_[0] |= 0x00000400u;
  adult_content_sex_ = value;
}
inline void CCuratorPreferences::set_adult_content_sex(bool value) {
  _internal_set_adult_content_sex(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.adult_content_sex)
}

// optional uint32 timestamp_updated = 8;
inline bool CCuratorPreferences::_internal_has_timestamp_updated() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_timestamp_updated() const {
  return _internal_has_timestamp_updated();
}
inline void CCuratorPreferences::clear_timestamp_updated() {
  timestamp_updated_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCuratorPreferences::_internal_timestamp_updated() const {
  return timestamp_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCuratorPreferences::timestamp_updated() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.timestamp_updated)
  return _internal_timestamp_updated();
}
inline void CCuratorPreferences::_internal_set_timestamp_updated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  timestamp_updated_ = value;
}
inline void CCuratorPreferences::set_timestamp_updated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp_updated(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.timestamp_updated)
}

// repeated uint32 tagids_curated = 9;
inline int CCuratorPreferences::_internal_tagids_curated_size() const {
  return tagids_curated_.size();
}
inline int CCuratorPreferences::tagids_curated_size() const {
  return _internal_tagids_curated_size();
}
inline void CCuratorPreferences::clear_tagids_curated() {
  tagids_curated_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCuratorPreferences::_internal_tagids_curated(int index) const {
  return tagids_curated_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCuratorPreferences::tagids_curated(int index) const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.tagids_curated)
  return _internal_tagids_curated(index);
}
inline void CCuratorPreferences::set_tagids_curated(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tagids_curated_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.tagids_curated)
}
inline void CCuratorPreferences::_internal_add_tagids_curated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tagids_curated_.Add(value);
}
inline void CCuratorPreferences::add_tagids_curated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tagids_curated(value);
  // @@protoc_insertion_point(field_add:CCuratorPreferences.tagids_curated)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCuratorPreferences::_internal_tagids_curated() const {
  return tagids_curated_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCuratorPreferences::tagids_curated() const {
  // @@protoc_insertion_point(field_list:CCuratorPreferences.tagids_curated)
  return _internal_tagids_curated();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCuratorPreferences::_internal_mutable_tagids_curated() {
  return &tagids_curated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCuratorPreferences::mutable_tagids_curated() {
  // @@protoc_insertion_point(field_mutable_list:CCuratorPreferences.tagids_curated)
  return _internal_mutable_tagids_curated();
}

// repeated uint32 tagids_filtered = 10;
inline int CCuratorPreferences::_internal_tagids_filtered_size() const {
  return tagids_filtered_.size();
}
inline int CCuratorPreferences::tagids_filtered_size() const {
  return _internal_tagids_filtered_size();
}
inline void CCuratorPreferences::clear_tagids_filtered() {
  tagids_filtered_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCuratorPreferences::_internal_tagids_filtered(int index) const {
  return tagids_filtered_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCuratorPreferences::tagids_filtered(int index) const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.tagids_filtered)
  return _internal_tagids_filtered(index);
}
inline void CCuratorPreferences::set_tagids_filtered(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tagids_filtered_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.tagids_filtered)
}
inline void CCuratorPreferences::_internal_add_tagids_filtered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tagids_filtered_.Add(value);
}
inline void CCuratorPreferences::add_tagids_filtered(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tagids_filtered(value);
  // @@protoc_insertion_point(field_add:CCuratorPreferences.tagids_filtered)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCuratorPreferences::_internal_tagids_filtered() const {
  return tagids_filtered_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCuratorPreferences::tagids_filtered() const {
  // @@protoc_insertion_point(field_list:CCuratorPreferences.tagids_filtered)
  return _internal_tagids_filtered();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCuratorPreferences::_internal_mutable_tagids_filtered() {
  return &tagids_filtered_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCuratorPreferences::mutable_tagids_filtered() {
  // @@protoc_insertion_point(field_mutable_list:CCuratorPreferences.tagids_filtered)
  return _internal_mutable_tagids_filtered();
}

// optional string website_title = 11;
inline bool CCuratorPreferences::_internal_has_website_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_website_title() const {
  return _internal_has_website_title();
}
inline void CCuratorPreferences::clear_website_title() {
  website_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCuratorPreferences::website_title() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.website_title)
  return _internal_website_title();
}
inline void CCuratorPreferences::set_website_title(const std::string& value) {
  _internal_set_website_title(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.website_title)
}
inline std::string* CCuratorPreferences::mutable_website_title() {
  // @@protoc_insertion_point(field_mutable:CCuratorPreferences.website_title)
  return _internal_mutable_website_title();
}
inline const std::string& CCuratorPreferences::_internal_website_title() const {
  return website_title_.Get();
}
inline void CCuratorPreferences::_internal_set_website_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  website_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCuratorPreferences::set_website_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  website_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCuratorPreferences.website_title)
}
inline void CCuratorPreferences::set_website_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  website_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCuratorPreferences.website_title)
}
inline void CCuratorPreferences::set_website_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  website_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCuratorPreferences.website_title)
}
inline std::string* CCuratorPreferences::_internal_mutable_website_title() {
  _has_bits_[0] |= 0x00000001u;
  return website_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCuratorPreferences::release_website_title() {
  // @@protoc_insertion_point(field_release:CCuratorPreferences.website_title)
  if (!_internal_has_website_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return website_title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCuratorPreferences::set_allocated_website_title(std::string* website_title) {
  if (website_title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  website_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), website_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCuratorPreferences.website_title)
}

// optional string website_url = 12;
inline bool CCuratorPreferences::_internal_has_website_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_website_url() const {
  return _internal_has_website_url();
}
inline void CCuratorPreferences::clear_website_url() {
  website_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCuratorPreferences::website_url() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.website_url)
  return _internal_website_url();
}
inline void CCuratorPreferences::set_website_url(const std::string& value) {
  _internal_set_website_url(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.website_url)
}
inline std::string* CCuratorPreferences::mutable_website_url() {
  // @@protoc_insertion_point(field_mutable:CCuratorPreferences.website_url)
  return _internal_mutable_website_url();
}
inline const std::string& CCuratorPreferences::_internal_website_url() const {
  return website_url_.Get();
}
inline void CCuratorPreferences::_internal_set_website_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  website_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCuratorPreferences::set_website_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  website_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCuratorPreferences.website_url)
}
inline void CCuratorPreferences::set_website_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  website_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCuratorPreferences.website_url)
}
inline void CCuratorPreferences::set_website_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  website_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCuratorPreferences.website_url)
}
inline std::string* CCuratorPreferences::_internal_mutable_website_url() {
  _has_bits_[0] |= 0x00000002u;
  return website_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCuratorPreferences::release_website_url() {
  // @@protoc_insertion_point(field_release:CCuratorPreferences.website_url)
  if (!_internal_has_website_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return website_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCuratorPreferences::set_allocated_website_url(std::string* website_url) {
  if (website_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  website_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), website_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCuratorPreferences.website_url)
}

// optional string discussion_url = 13;
inline bool CCuratorPreferences::_internal_has_discussion_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_discussion_url() const {
  return _internal_has_discussion_url();
}
inline void CCuratorPreferences::clear_discussion_url() {
  discussion_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCuratorPreferences::discussion_url() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.discussion_url)
  return _internal_discussion_url();
}
inline void CCuratorPreferences::set_discussion_url(const std::string& value) {
  _internal_set_discussion_url(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.discussion_url)
}
inline std::string* CCuratorPreferences::mutable_discussion_url() {
  // @@protoc_insertion_point(field_mutable:CCuratorPreferences.discussion_url)
  return _internal_mutable_discussion_url();
}
inline const std::string& CCuratorPreferences::_internal_discussion_url() const {
  return discussion_url_.Get();
}
inline void CCuratorPreferences::_internal_set_discussion_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  discussion_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCuratorPreferences::set_discussion_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  discussion_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCuratorPreferences.discussion_url)
}
inline void CCuratorPreferences::set_discussion_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  discussion_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCuratorPreferences.discussion_url)
}
inline void CCuratorPreferences::set_discussion_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  discussion_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCuratorPreferences.discussion_url)
}
inline std::string* CCuratorPreferences::_internal_mutable_discussion_url() {
  _has_bits_[0] |= 0x00000004u;
  return discussion_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCuratorPreferences::release_discussion_url() {
  // @@protoc_insertion_point(field_release:CCuratorPreferences.discussion_url)
  if (!_internal_has_discussion_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return discussion_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCuratorPreferences::set_allocated_discussion_url(std::string* discussion_url) {
  if (discussion_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  discussion_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), discussion_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCuratorPreferences.discussion_url)
}

// optional bool show_broadcast = 14;
inline bool CCuratorPreferences::_internal_has_show_broadcast() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCuratorPreferences::has_show_broadcast() const {
  return _internal_has_show_broadcast();
}
inline void CCuratorPreferences::clear_show_broadcast() {
  show_broadcast_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CCuratorPreferences::_internal_show_broadcast() const {
  return show_broadcast_;
}
inline bool CCuratorPreferences::show_broadcast() const {
  // @@protoc_insertion_point(field_get:CCuratorPreferences.show_broadcast)
  return _internal_show_broadcast();
}
inline void CCuratorPreferences::_internal_set_show_broadcast(bool value) {
  _has_bits_[0] |= 0x00000800u;
  show_broadcast_ = value;
}
inline void CCuratorPreferences::set_show_broadcast(bool value) {
  _internal_set_show_broadcast(value);
  // @@protoc_insertion_point(field_set:CCuratorPreferences.show_broadcast)
}

// -------------------------------------------------------------------

// CLocalizationToken

// optional uint32 language = 1;
inline bool CLocalizationToken::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLocalizationToken::has_language() const {
  return _internal_has_language();
}
inline void CLocalizationToken::clear_language() {
  language_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLocalizationToken::_internal_language() const {
  return language_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLocalizationToken::language() const {
  // @@protoc_insertion_point(field_get:CLocalizationToken.language)
  return _internal_language();
}
inline void CLocalizationToken::_internal_set_language(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  language_ = value;
}
inline void CLocalizationToken::set_language(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CLocalizationToken.language)
}

// optional string localized_string = 2;
inline bool CLocalizationToken::_internal_has_localized_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLocalizationToken::has_localized_string() const {
  return _internal_has_localized_string();
}
inline void CLocalizationToken::clear_localized_string() {
  localized_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CLocalizationToken::localized_string() const {
  // @@protoc_insertion_point(field_get:CLocalizationToken.localized_string)
  return _internal_localized_string();
}
inline void CLocalizationToken::set_localized_string(const std::string& value) {
  _internal_set_localized_string(value);
  // @@protoc_insertion_point(field_set:CLocalizationToken.localized_string)
}
inline std::string* CLocalizationToken::mutable_localized_string() {
  // @@protoc_insertion_point(field_mutable:CLocalizationToken.localized_string)
  return _internal_mutable_localized_string();
}
inline const std::string& CLocalizationToken::_internal_localized_string() const {
  return localized_string_.Get();
}
inline void CLocalizationToken::_internal_set_localized_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  localized_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLocalizationToken::set_localized_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  localized_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLocalizationToken.localized_string)
}
inline void CLocalizationToken::set_localized_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  localized_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLocalizationToken.localized_string)
}
inline void CLocalizationToken::set_localized_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  localized_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLocalizationToken.localized_string)
}
inline std::string* CLocalizationToken::_internal_mutable_localized_string() {
  _has_bits_[0] |= 0x00000001u;
  return localized_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLocalizationToken::release_localized_string() {
  // @@protoc_insertion_point(field_release:CLocalizationToken.localized_string)
  if (!_internal_has_localized_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return localized_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLocalizationToken::set_allocated_localized_string(std::string* localized_string) {
  if (localized_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  localized_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localized_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLocalizationToken.localized_string)
}

// -------------------------------------------------------------------

// CClanEventUserNewsTuple

// optional uint32 clanid = 1;
inline bool CClanEventUserNewsTuple::_internal_has_clanid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_clanid() const {
  return _internal_has_clanid();
}
inline void CClanEventUserNewsTuple::clear_clanid() {
  clanid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::_internal_clanid() const {
  return clanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::clanid() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.clanid)
  return _internal_clanid();
}
inline void CClanEventUserNewsTuple::_internal_set_clanid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  clanid_ = value;
}
inline void CClanEventUserNewsTuple::set_clanid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clanid(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.clanid)
}

// optional fixed64 event_gid = 2;
inline bool CClanEventUserNewsTuple::_internal_has_event_gid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_event_gid() const {
  return _internal_has_event_gid();
}
inline void CClanEventUserNewsTuple::clear_event_gid() {
  event_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventUserNewsTuple::_internal_event_gid() const {
  return event_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventUserNewsTuple::event_gid() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.event_gid)
  return _internal_event_gid();
}
inline void CClanEventUserNewsTuple::_internal_set_event_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  event_gid_ = value;
}
inline void CClanEventUserNewsTuple::set_event_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_event_gid(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.event_gid)
}

// optional fixed64 announcement_gid = 3;
inline bool CClanEventUserNewsTuple::_internal_has_announcement_gid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_announcement_gid() const {
  return _internal_has_announcement_gid();
}
inline void CClanEventUserNewsTuple::clear_announcement_gid() {
  announcement_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventUserNewsTuple::_internal_announcement_gid() const {
  return announcement_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventUserNewsTuple::announcement_gid() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.announcement_gid)
  return _internal_announcement_gid();
}
inline void CClanEventUserNewsTuple::_internal_set_announcement_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  announcement_gid_ = value;
}
inline void CClanEventUserNewsTuple::set_announcement_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_announcement_gid(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.announcement_gid)
}

// optional uint32 rtime_start = 4;
inline bool CClanEventUserNewsTuple::_internal_has_rtime_start() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_rtime_start() const {
  return _internal_has_rtime_start();
}
inline void CClanEventUserNewsTuple::clear_rtime_start() {
  rtime_start_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::_internal_rtime_start() const {
  return rtime_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::rtime_start() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.rtime_start)
  return _internal_rtime_start();
}
inline void CClanEventUserNewsTuple::_internal_set_rtime_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rtime_start_ = value;
}
inline void CClanEventUserNewsTuple::set_rtime_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime_start(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.rtime_start)
}

// optional uint32 rtime_end = 5;
inline bool CClanEventUserNewsTuple::_internal_has_rtime_end() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_rtime_end() const {
  return _internal_has_rtime_end();
}
inline void CClanEventUserNewsTuple::clear_rtime_end() {
  rtime_end_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::_internal_rtime_end() const {
  return rtime_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::rtime_end() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.rtime_end)
  return _internal_rtime_end();
}
inline void CClanEventUserNewsTuple::_internal_set_rtime_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rtime_end_ = value;
}
inline void CClanEventUserNewsTuple::set_rtime_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime_end(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.rtime_end)
}

// optional uint32 priority_score = 6;
inline bool CClanEventUserNewsTuple::_internal_has_priority_score() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_priority_score() const {
  return _internal_has_priority_score();
}
inline void CClanEventUserNewsTuple::clear_priority_score() {
  priority_score_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::_internal_priority_score() const {
  return priority_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::priority_score() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.priority_score)
  return _internal_priority_score();
}
inline void CClanEventUserNewsTuple::_internal_set_priority_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  priority_score_ = value;
}
inline void CClanEventUserNewsTuple::set_priority_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priority_score(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.priority_score)
}

// optional uint32 type = 7;
inline bool CClanEventUserNewsTuple::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_type() const {
  return _internal_has_type();
}
inline void CClanEventUserNewsTuple::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::type() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.type)
  return _internal_type();
}
inline void CClanEventUserNewsTuple::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void CClanEventUserNewsTuple::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.type)
}

// optional uint32 clamp_range_slot = 8;
inline bool CClanEventUserNewsTuple::_internal_has_clamp_range_slot() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_clamp_range_slot() const {
  return _internal_has_clamp_range_slot();
}
inline void CClanEventUserNewsTuple::clear_clamp_range_slot() {
  clamp_range_slot_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::_internal_clamp_range_slot() const {
  return clamp_range_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::clamp_range_slot() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.clamp_range_slot)
  return _internal_clamp_range_slot();
}
inline void CClanEventUserNewsTuple::_internal_set_clamp_range_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  clamp_range_slot_ = value;
}
inline void CClanEventUserNewsTuple::set_clamp_range_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clamp_range_slot(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.clamp_range_slot)
}

// optional uint32 appid = 9;
inline bool CClanEventUserNewsTuple::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_appid() const {
  return _internal_has_appid();
}
inline void CClanEventUserNewsTuple::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::appid() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.appid)
  return _internal_appid();
}
inline void CClanEventUserNewsTuple::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  appid_ = value;
}
inline void CClanEventUserNewsTuple::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.appid)
}

// optional uint32 rtime32_last_modified = 10;
inline bool CClanEventUserNewsTuple::_internal_has_rtime32_last_modified() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CClanEventUserNewsTuple::has_rtime32_last_modified() const {
  return _internal_has_rtime32_last_modified();
}
inline void CClanEventUserNewsTuple::clear_rtime32_last_modified() {
  rtime32_last_modified_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::_internal_rtime32_last_modified() const {
  return rtime32_last_modified_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventUserNewsTuple::rtime32_last_modified() const {
  // @@protoc_insertion_point(field_get:CClanEventUserNewsTuple.rtime32_last_modified)
  return _internal_rtime32_last_modified();
}
inline void CClanEventUserNewsTuple::_internal_set_rtime32_last_modified(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  rtime32_last_modified_ = value;
}
inline void CClanEventUserNewsTuple::set_rtime32_last_modified(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime32_last_modified(value);
  // @@protoc_insertion_point(field_set:CClanEventUserNewsTuple.rtime32_last_modified)
}

// -------------------------------------------------------------------

// CClanMatchEventByRange

// optional uint32 rtime_before = 1;
inline bool CClanMatchEventByRange::_internal_has_rtime_before() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClanMatchEventByRange::has_rtime_before() const {
  return _internal_has_rtime_before();
}
inline void CClanMatchEventByRange::clear_rtime_before() {
  rtime_before_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanMatchEventByRange::_internal_rtime_before() const {
  return rtime_before_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanMatchEventByRange::rtime_before() const {
  // @@protoc_insertion_point(field_get:CClanMatchEventByRange.rtime_before)
  return _internal_rtime_before();
}
inline void CClanMatchEventByRange::_internal_set_rtime_before(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rtime_before_ = value;
}
inline void CClanMatchEventByRange::set_rtime_before(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime_before(value);
  // @@protoc_insertion_point(field_set:CClanMatchEventByRange.rtime_before)
}

// optional uint32 rtime_after = 2;
inline bool CClanMatchEventByRange::_internal_has_rtime_after() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClanMatchEventByRange::has_rtime_after() const {
  return _internal_has_rtime_after();
}
inline void CClanMatchEventByRange::clear_rtime_after() {
  rtime_after_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanMatchEventByRange::_internal_rtime_after() const {
  return rtime_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanMatchEventByRange::rtime_after() const {
  // @@protoc_insertion_point(field_get:CClanMatchEventByRange.rtime_after)
  return _internal_rtime_after();
}
inline void CClanMatchEventByRange::_internal_set_rtime_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rtime_after_ = value;
}
inline void CClanMatchEventByRange::set_rtime_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime_after(value);
  // @@protoc_insertion_point(field_set:CClanMatchEventByRange.rtime_after)
}

// optional uint32 qualified = 3;
inline bool CClanMatchEventByRange::_internal_has_qualified() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClanMatchEventByRange::has_qualified() const {
  return _internal_has_qualified();
}
inline void CClanMatchEventByRange::clear_qualified() {
  qualified_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanMatchEventByRange::_internal_qualified() const {
  return qualified_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanMatchEventByRange::qualified() const {
  // @@protoc_insertion_point(field_get:CClanMatchEventByRange.qualified)
  return _internal_qualified();
}
inline void CClanMatchEventByRange::_internal_set_qualified(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  qualified_ = value;
}
inline void CClanMatchEventByRange::set_qualified(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qualified(value);
  // @@protoc_insertion_point(field_set:CClanMatchEventByRange.qualified)
}

// repeated .CClanEventUserNewsTuple events = 4;
inline int CClanMatchEventByRange::_internal_events_size() const {
  return events_.size();
}
inline int CClanMatchEventByRange::events_size() const {
  return _internal_events_size();
}
inline void CClanMatchEventByRange::clear_events() {
  events_.Clear();
}
inline ::CClanEventUserNewsTuple* CClanMatchEventByRange::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:CClanMatchEventByRange.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple >*
CClanMatchEventByRange::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:CClanMatchEventByRange.events)
  return &events_;
}
inline const ::CClanEventUserNewsTuple& CClanMatchEventByRange::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::CClanEventUserNewsTuple& CClanMatchEventByRange::events(int index) const {
  // @@protoc_insertion_point(field_get:CClanMatchEventByRange.events)
  return _internal_events(index);
}
inline ::CClanEventUserNewsTuple* CClanMatchEventByRange::_internal_add_events() {
  return events_.Add();
}
inline ::CClanEventUserNewsTuple* CClanMatchEventByRange::add_events() {
  // @@protoc_insertion_point(field_add:CClanMatchEventByRange.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CClanEventUserNewsTuple >&
CClanMatchEventByRange::events() const {
  // @@protoc_insertion_point(field_list:CClanMatchEventByRange.events)
  return events_;
}

// -------------------------------------------------------------------

// CCommunity_ClanAnnouncementInfo

// optional uint64 gid = 1;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_gid() const {
  return _internal_has_gid();
}
inline void CCommunity_ClanAnnouncementInfo::clear_gid() {
  gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::gid() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.gid)
  return _internal_gid();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  gid_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.gid)
}

// optional uint64 clanid = 2;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_clanid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_clanid() const {
  return _internal_has_clanid();
}
inline void CCommunity_ClanAnnouncementInfo::clear_clanid() {
  clanid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::_internal_clanid() const {
  return clanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::clanid() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.clanid)
  return _internal_clanid();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_clanid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  clanid_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_clanid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clanid(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.clanid)
}

// optional uint64 posterid = 3;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_posterid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_posterid() const {
  return _internal_has_posterid();
}
inline void CCommunity_ClanAnnouncementInfo::clear_posterid() {
  posterid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::_internal_posterid() const {
  return posterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::posterid() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.posterid)
  return _internal_posterid();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_posterid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  posterid_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_posterid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_posterid(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.posterid)
}

// optional string headline = 4;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_headline() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_headline() const {
  return _internal_has_headline();
}
inline void CCommunity_ClanAnnouncementInfo::clear_headline() {
  headline_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_ClanAnnouncementInfo::headline() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.headline)
  return _internal_headline();
}
inline void CCommunity_ClanAnnouncementInfo::set_headline(const std::string& value) {
  _internal_set_headline(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.headline)
}
inline std::string* CCommunity_ClanAnnouncementInfo::mutable_headline() {
  // @@protoc_insertion_point(field_mutable:CCommunity_ClanAnnouncementInfo.headline)
  return _internal_mutable_headline();
}
inline const std::string& CCommunity_ClanAnnouncementInfo::_internal_headline() const {
  return headline_.Get();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_headline(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCommunity_ClanAnnouncementInfo::set_headline(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  headline_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_ClanAnnouncementInfo.headline)
}
inline void CCommunity_ClanAnnouncementInfo::set_headline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCommunity_ClanAnnouncementInfo.headline)
}
inline void CCommunity_ClanAnnouncementInfo::set_headline(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCommunity_ClanAnnouncementInfo.headline)
}
inline std::string* CCommunity_ClanAnnouncementInfo::_internal_mutable_headline() {
  _has_bits_[0] |= 0x00000001u;
  return headline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCommunity_ClanAnnouncementInfo::release_headline() {
  // @@protoc_insertion_point(field_release:CCommunity_ClanAnnouncementInfo.headline)
  if (!_internal_has_headline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return headline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCommunity_ClanAnnouncementInfo::set_allocated_headline(std::string* headline) {
  if (headline != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  headline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headline,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_ClanAnnouncementInfo.headline)
}

// optional uint32 posttime = 5;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_posttime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_posttime() const {
  return _internal_has_posttime();
}
inline void CCommunity_ClanAnnouncementInfo::clear_posttime() {
  posttime_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_ClanAnnouncementInfo::_internal_posttime() const {
  return posttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_ClanAnnouncementInfo::posttime() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.posttime)
  return _internal_posttime();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_posttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  posttime_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_posttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_posttime(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.posttime)
}

// optional uint32 updatetime = 6;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_updatetime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_updatetime() const {
  return _internal_has_updatetime();
}
inline void CCommunity_ClanAnnouncementInfo::clear_updatetime() {
  updatetime_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_ClanAnnouncementInfo::_internal_updatetime() const {
  return updatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCommunity_ClanAnnouncementInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.updatetime)
  return _internal_updatetime();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  updatetime_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.updatetime)
}

// optional string body = 7;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_body() const {
  return _internal_has_body();
}
inline void CCommunity_ClanAnnouncementInfo::clear_body() {
  body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCommunity_ClanAnnouncementInfo::body() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.body)
  return _internal_body();
}
inline void CCommunity_ClanAnnouncementInfo::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.body)
}
inline std::string* CCommunity_ClanAnnouncementInfo::mutable_body() {
  // @@protoc_insertion_point(field_mutable:CCommunity_ClanAnnouncementInfo.body)
  return _internal_mutable_body();
}
inline const std::string& CCommunity_ClanAnnouncementInfo::_internal_body() const {
  return body_.Get();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCommunity_ClanAnnouncementInfo::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_ClanAnnouncementInfo.body)
}
inline void CCommunity_ClanAnnouncementInfo::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCommunity_ClanAnnouncementInfo.body)
}
inline void CCommunity_ClanAnnouncementInfo::set_body(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCommunity_ClanAnnouncementInfo.body)
}
inline std::string* CCommunity_ClanAnnouncementInfo::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000002u;
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCommunity_ClanAnnouncementInfo::release_body() {
  // @@protoc_insertion_point(field_release:CCommunity_ClanAnnouncementInfo.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCommunity_ClanAnnouncementInfo::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCommunity_ClanAnnouncementInfo.body)
}

// optional int32 commentcount = 8;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_commentcount() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_commentcount() const {
  return _internal_has_commentcount();
}
inline void CCommunity_ClanAnnouncementInfo::clear_commentcount() {
  commentcount_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCommunity_ClanAnnouncementInfo::_internal_commentcount() const {
  return commentcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCommunity_ClanAnnouncementInfo::commentcount() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.commentcount)
  return _internal_commentcount();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_commentcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  commentcount_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_commentcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_commentcount(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.commentcount)
}

// repeated string tags = 9;
inline int CCommunity_ClanAnnouncementInfo::_internal_tags_size() const {
  return tags_.size();
}
inline int CCommunity_ClanAnnouncementInfo::tags_size() const {
  return _internal_tags_size();
}
inline void CCommunity_ClanAnnouncementInfo::clear_tags() {
  tags_.Clear();
}
inline std::string* CCommunity_ClanAnnouncementInfo::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:CCommunity_ClanAnnouncementInfo.tags)
  return _internal_add_tags();
}
inline const std::string& CCommunity_ClanAnnouncementInfo::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CCommunity_ClanAnnouncementInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.tags)
  return _internal_tags(index);
}
inline std::string* CCommunity_ClanAnnouncementInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_ClanAnnouncementInfo.tags)
  return tags_.Mutable(index);
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCommunity_ClanAnnouncementInfo.tags)
}
inline std::string* CCommunity_ClanAnnouncementInfo::_internal_add_tags() {
  return tags_.Add();
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCommunity_ClanAnnouncementInfo.tags)
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCommunity_ClanAnnouncementInfo.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCommunity_ClanAnnouncementInfo::tags() const {
  // @@protoc_insertion_point(field_list:CCommunity_ClanAnnouncementInfo.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCommunity_ClanAnnouncementInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_ClanAnnouncementInfo.tags)
  return &tags_;
}

// optional int32 language = 10;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_language() const {
  return _internal_has_language();
}
inline void CCommunity_ClanAnnouncementInfo::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCommunity_ClanAnnouncementInfo::_internal_language() const {
  return language_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCommunity_ClanAnnouncementInfo::language() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.language)
  return _internal_language();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_language(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  language_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_language(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.language)
}

// optional bool hidden = 11;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_hidden() const {
  return _internal_has_hidden();
}
inline void CCommunity_ClanAnnouncementInfo::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CCommunity_ClanAnnouncementInfo::_internal_hidden() const {
  return hidden_;
}
inline bool CCommunity_ClanAnnouncementInfo::hidden() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.hidden)
  return _internal_hidden();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000400u;
  hidden_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.hidden)
}

// optional fixed64 forum_topic_id = 12;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_forum_topic_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_forum_topic_id() const {
  return _internal_has_forum_topic_id();
}
inline void CCommunity_ClanAnnouncementInfo::clear_forum_topic_id() {
  forum_topic_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::_internal_forum_topic_id() const {
  return forum_topic_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::forum_topic_id() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.forum_topic_id)
  return _internal_forum_topic_id();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_forum_topic_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  forum_topic_id_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_forum_topic_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_forum_topic_id(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.forum_topic_id)
}

// optional fixed64 event_gid = 13;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_event_gid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_event_gid() const {
  return _internal_has_event_gid();
}
inline void CCommunity_ClanAnnouncementInfo::clear_event_gid() {
  event_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::_internal_event_gid() const {
  return event_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCommunity_ClanAnnouncementInfo::event_gid() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.event_gid)
  return _internal_event_gid();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_event_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  event_gid_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_event_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_event_gid(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.event_gid)
}

// optional int32 voteupcount = 14;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_voteupcount() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_voteupcount() const {
  return _internal_has_voteupcount();
}
inline void CCommunity_ClanAnnouncementInfo::clear_voteupcount() {
  voteupcount_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCommunity_ClanAnnouncementInfo::_internal_voteupcount() const {
  return voteupcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCommunity_ClanAnnouncementInfo::voteupcount() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.voteupcount)
  return _internal_voteupcount();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_voteupcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  voteupcount_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_voteupcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_voteupcount(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.voteupcount)
}

// optional int32 votedowncount = 15;
inline bool CCommunity_ClanAnnouncementInfo::_internal_has_votedowncount() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CCommunity_ClanAnnouncementInfo::has_votedowncount() const {
  return _internal_has_votedowncount();
}
inline void CCommunity_ClanAnnouncementInfo::clear_votedowncount() {
  votedowncount_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCommunity_ClanAnnouncementInfo::_internal_votedowncount() const {
  return votedowncount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCommunity_ClanAnnouncementInfo::votedowncount() const {
  // @@protoc_insertion_point(field_get:CCommunity_ClanAnnouncementInfo.votedowncount)
  return _internal_votedowncount();
}
inline void CCommunity_ClanAnnouncementInfo::_internal_set_votedowncount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  votedowncount_ = value;
}
inline void CCommunity_ClanAnnouncementInfo::set_votedowncount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_votedowncount(value);
  // @@protoc_insertion_point(field_set:CCommunity_ClanAnnouncementInfo.votedowncount)
}

// -------------------------------------------------------------------

// CClanEventData

// optional fixed64 gid = 1;
inline bool CClanEventData::_internal_has_gid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CClanEventData::has_gid() const {
  return _internal_has_gid();
}
inline void CClanEventData::clear_gid() {
  gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::gid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.gid)
  return _internal_gid();
}
inline void CClanEventData::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  gid_ = value;
}
inline void CClanEventData::set_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.gid)
}

// optional fixed64 clan_steamid = 2;
inline bool CClanEventData::_internal_has_clan_steamid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CClanEventData::has_clan_steamid() const {
  return _internal_has_clan_steamid();
}
inline void CClanEventData::clear_clan_steamid() {
  clan_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::_internal_clan_steamid() const {
  return clan_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::clan_steamid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.clan_steamid)
  return _internal_clan_steamid();
}
inline void CClanEventData::_internal_set_clan_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  clan_steamid_ = value;
}
inline void CClanEventData::set_clan_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clan_steamid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.clan_steamid)
}

// optional string event_name = 3;
inline bool CClanEventData::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClanEventData::has_event_name() const {
  return _internal_has_event_name();
}
inline void CClanEventData::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CClanEventData::event_name() const {
  // @@protoc_insertion_point(field_get:CClanEventData.event_name)
  return _internal_event_name();
}
inline void CClanEventData::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:CClanEventData.event_name)
}
inline std::string* CClanEventData::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:CClanEventData.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& CClanEventData::_internal_event_name() const {
  return event_name_.Get();
}
inline void CClanEventData::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClanEventData::set_event_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClanEventData.event_name)
}
inline void CClanEventData::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClanEventData.event_name)
}
inline void CClanEventData::set_event_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClanEventData.event_name)
}
inline std::string* CClanEventData::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClanEventData::release_event_name() {
  // @@protoc_insertion_point(field_release:CClanEventData.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClanEventData::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.event_name)
}

// optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
inline bool CClanEventData::_internal_has_event_type() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CClanEventData::has_event_type() const {
  return _internal_has_event_type();
}
inline void CClanEventData::clear_event_type() {
  event_type_ = 1;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::EProtoClanEventType CClanEventData::_internal_event_type() const {
  return static_cast< ::EProtoClanEventType >(event_type_);
}
inline ::EProtoClanEventType CClanEventData::event_type() const {
  // @@protoc_insertion_point(field_get:CClanEventData.event_type)
  return _internal_event_type();
}
inline void CClanEventData::_internal_set_event_type(::EProtoClanEventType value) {
  assert(::EProtoClanEventType_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  event_type_ = value;
}
inline void CClanEventData::set_event_type(::EProtoClanEventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CClanEventData.event_type)
}

// optional uint32 appid = 5;
inline bool CClanEventData::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CClanEventData::has_appid() const {
  return _internal_has_appid();
}
inline void CClanEventData::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::appid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.appid)
  return _internal_appid();
}
inline void CClanEventData::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  appid_ = value;
}
inline void CClanEventData::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.appid)
}

// optional string server_address = 6;
inline bool CClanEventData::_internal_has_server_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClanEventData::has_server_address() const {
  return _internal_has_server_address();
}
inline void CClanEventData::clear_server_address() {
  server_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CClanEventData::server_address() const {
  // @@protoc_insertion_point(field_get:CClanEventData.server_address)
  return _internal_server_address();
}
inline void CClanEventData::set_server_address(const std::string& value) {
  _internal_set_server_address(value);
  // @@protoc_insertion_point(field_set:CClanEventData.server_address)
}
inline std::string* CClanEventData::mutable_server_address() {
  // @@protoc_insertion_point(field_mutable:CClanEventData.server_address)
  return _internal_mutable_server_address();
}
inline const std::string& CClanEventData::_internal_server_address() const {
  return server_address_.Get();
}
inline void CClanEventData::_internal_set_server_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  server_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClanEventData::set_server_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  server_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClanEventData.server_address)
}
inline void CClanEventData::set_server_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  server_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClanEventData.server_address)
}
inline void CClanEventData::set_server_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  server_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClanEventData.server_address)
}
inline std::string* CClanEventData::_internal_mutable_server_address() {
  _has_bits_[0] |= 0x00000002u;
  return server_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClanEventData::release_server_address() {
  // @@protoc_insertion_point(field_release:CClanEventData.server_address)
  if (!_internal_has_server_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return server_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClanEventData::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  server_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.server_address)
}

// optional string server_password = 7;
inline bool CClanEventData::_internal_has_server_password() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClanEventData::has_server_password() const {
  return _internal_has_server_password();
}
inline void CClanEventData::clear_server_password() {
  server_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CClanEventData::server_password() const {
  // @@protoc_insertion_point(field_get:CClanEventData.server_password)
  return _internal_server_password();
}
inline void CClanEventData::set_server_password(const std::string& value) {
  _internal_set_server_password(value);
  // @@protoc_insertion_point(field_set:CClanEventData.server_password)
}
inline std::string* CClanEventData::mutable_server_password() {
  // @@protoc_insertion_point(field_mutable:CClanEventData.server_password)
  return _internal_mutable_server_password();
}
inline const std::string& CClanEventData::_internal_server_password() const {
  return server_password_.Get();
}
inline void CClanEventData::_internal_set_server_password(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  server_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClanEventData::set_server_password(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  server_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClanEventData.server_password)
}
inline void CClanEventData::set_server_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  server_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClanEventData.server_password)
}
inline void CClanEventData::set_server_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  server_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClanEventData.server_password)
}
inline std::string* CClanEventData::_internal_mutable_server_password() {
  _has_bits_[0] |= 0x00000004u;
  return server_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClanEventData::release_server_password() {
  // @@protoc_insertion_point(field_release:CClanEventData.server_password)
  if (!_internal_has_server_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return server_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClanEventData::set_allocated_server_password(std::string* server_password) {
  if (server_password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  server_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.server_password)
}

// optional uint32 rtime32_start_time = 8;
inline bool CClanEventData::_internal_has_rtime32_start_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_start_time() const {
  return _internal_has_rtime32_start_time();
}
inline void CClanEventData::clear_rtime32_start_time() {
  rtime32_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_rtime32_start_time() const {
  return rtime32_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::rtime32_start_time() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_start_time)
  return _internal_rtime32_start_time();
}
inline void CClanEventData::_internal_set_rtime32_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  rtime32_start_time_ = value;
}
inline void CClanEventData::set_rtime32_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime32_start_time(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_start_time)
}

// optional uint32 rtime32_end_time = 9;
inline bool CClanEventData::_internal_has_rtime32_end_time() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_end_time() const {
  return _internal_has_rtime32_end_time();
}
inline void CClanEventData::clear_rtime32_end_time() {
  rtime32_end_time_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_rtime32_end_time() const {
  return rtime32_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::rtime32_end_time() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_end_time)
  return _internal_rtime32_end_time();
}
inline void CClanEventData::_internal_set_rtime32_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  rtime32_end_time_ = value;
}
inline void CClanEventData::set_rtime32_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime32_end_time(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_end_time)
}

// optional int32 comment_count = 10;
inline bool CClanEventData::_internal_has_comment_count() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CClanEventData::has_comment_count() const {
  return _internal_has_comment_count();
}
inline void CClanEventData::clear_comment_count() {
  comment_count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CClanEventData::_internal_comment_count() const {
  return comment_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CClanEventData::comment_count() const {
  // @@protoc_insertion_point(field_get:CClanEventData.comment_count)
  return _internal_comment_count();
}
inline void CClanEventData::_internal_set_comment_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  comment_count_ = value;
}
inline void CClanEventData::set_comment_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_comment_count(value);
  // @@protoc_insertion_point(field_set:CClanEventData.comment_count)
}

// optional fixed64 creator_steamid = 11;
inline bool CClanEventData::_internal_has_creator_steamid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CClanEventData::has_creator_steamid() const {
  return _internal_has_creator_steamid();
}
inline void CClanEventData::clear_creator_steamid() {
  creator_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::_internal_creator_steamid() const {
  return creator_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::creator_steamid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.creator_steamid)
  return _internal_creator_steamid();
}
inline void CClanEventData::_internal_set_creator_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  creator_steamid_ = value;
}
inline void CClanEventData::set_creator_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creator_steamid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.creator_steamid)
}

// optional fixed64 last_update_steamid = 12;
inline bool CClanEventData::_internal_has_last_update_steamid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CClanEventData::has_last_update_steamid() const {
  return _internal_has_last_update_steamid();
}
inline void CClanEventData::clear_last_update_steamid() {
  last_update_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::_internal_last_update_steamid() const {
  return last_update_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::last_update_steamid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.last_update_steamid)
  return _internal_last_update_steamid();
}
inline void CClanEventData::_internal_set_last_update_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  last_update_steamid_ = value;
}
inline void CClanEventData::set_last_update_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_update_steamid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.last_update_steamid)
}

// optional string event_notes = 13;
inline bool CClanEventData::_internal_has_event_notes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClanEventData::has_event_notes() const {
  return _internal_has_event_notes();
}
inline void CClanEventData::clear_event_notes() {
  event_notes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CClanEventData::event_notes() const {
  // @@protoc_insertion_point(field_get:CClanEventData.event_notes)
  return _internal_event_notes();
}
inline void CClanEventData::set_event_notes(const std::string& value) {
  _internal_set_event_notes(value);
  // @@protoc_insertion_point(field_set:CClanEventData.event_notes)
}
inline std::string* CClanEventData::mutable_event_notes() {
  // @@protoc_insertion_point(field_mutable:CClanEventData.event_notes)
  return _internal_mutable_event_notes();
}
inline const std::string& CClanEventData::_internal_event_notes() const {
  return event_notes_.Get();
}
inline void CClanEventData::_internal_set_event_notes(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  event_notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClanEventData::set_event_notes(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  event_notes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClanEventData.event_notes)
}
inline void CClanEventData::set_event_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  event_notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClanEventData.event_notes)
}
inline void CClanEventData::set_event_notes(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  event_notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClanEventData.event_notes)
}
inline std::string* CClanEventData::_internal_mutable_event_notes() {
  _has_bits_[0] |= 0x00000008u;
  return event_notes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClanEventData::release_event_notes() {
  // @@protoc_insertion_point(field_release:CClanEventData.event_notes)
  if (!_internal_has_event_notes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return event_notes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClanEventData::set_allocated_event_notes(std::string* event_notes) {
  if (event_notes != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  event_notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.event_notes)
}

// optional string jsondata = 14;
inline bool CClanEventData::_internal_has_jsondata() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClanEventData::has_jsondata() const {
  return _internal_has_jsondata();
}
inline void CClanEventData::clear_jsondata() {
  jsondata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CClanEventData::jsondata() const {
  // @@protoc_insertion_point(field_get:CClanEventData.jsondata)
  return _internal_jsondata();
}
inline void CClanEventData::set_jsondata(const std::string& value) {
  _internal_set_jsondata(value);
  // @@protoc_insertion_point(field_set:CClanEventData.jsondata)
}
inline std::string* CClanEventData::mutable_jsondata() {
  // @@protoc_insertion_point(field_mutable:CClanEventData.jsondata)
  return _internal_mutable_jsondata();
}
inline const std::string& CClanEventData::_internal_jsondata() const {
  return jsondata_.Get();
}
inline void CClanEventData::_internal_set_jsondata(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  jsondata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CClanEventData::set_jsondata(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  jsondata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CClanEventData.jsondata)
}
inline void CClanEventData::set_jsondata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  jsondata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CClanEventData.jsondata)
}
inline void CClanEventData::set_jsondata(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  jsondata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CClanEventData.jsondata)
}
inline std::string* CClanEventData::_internal_mutable_jsondata() {
  _has_bits_[0] |= 0x00000010u;
  return jsondata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CClanEventData::release_jsondata() {
  // @@protoc_insertion_point(field_release:CClanEventData.jsondata)
  if (!_internal_has_jsondata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return jsondata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CClanEventData::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  jsondata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jsondata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.jsondata)
}

// optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
inline bool CClanEventData::_internal_has_announcement_body() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || announcement_body_ != nullptr);
  return value;
}
inline bool CClanEventData::has_announcement_body() const {
  return _internal_has_announcement_body();
}
inline void CClanEventData::clear_announcement_body() {
  if (announcement_body_ != nullptr) announcement_body_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CCommunity_ClanAnnouncementInfo& CClanEventData::_internal_announcement_body() const {
  const ::CCommunity_ClanAnnouncementInfo* p = announcement_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::CCommunity_ClanAnnouncementInfo&>(
      ::_CCommunity_ClanAnnouncementInfo_default_instance_);
}
inline const ::CCommunity_ClanAnnouncementInfo& CClanEventData::announcement_body() const {
  // @@protoc_insertion_point(field_get:CClanEventData.announcement_body)
  return _internal_announcement_body();
}
inline void CClanEventData::unsafe_arena_set_allocated_announcement_body(
    ::CCommunity_ClanAnnouncementInfo* announcement_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(announcement_body_);
  }
  announcement_body_ = announcement_body;
  if (announcement_body) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CClanEventData.announcement_body)
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::release_announcement_body() {
  _has_bits_[0] &= ~0x00000020u;
  ::CCommunity_ClanAnnouncementInfo* temp = announcement_body_;
  announcement_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::unsafe_arena_release_announcement_body() {
  // @@protoc_insertion_point(field_release:CClanEventData.announcement_body)
  _has_bits_[0] &= ~0x00000020u;
  ::CCommunity_ClanAnnouncementInfo* temp = announcement_body_;
  announcement_body_ = nullptr;
  return temp;
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::_internal_mutable_announcement_body() {
  _has_bits_[0] |= 0x00000020u;
  if (announcement_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::CCommunity_ClanAnnouncementInfo>(GetArena());
    announcement_body_ = p;
  }
  return announcement_body_;
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::mutable_announcement_body() {
  // @@protoc_insertion_point(field_mutable:CClanEventData.announcement_body)
  return _internal_mutable_announcement_body();
}
inline void CClanEventData::set_allocated_announcement_body(::CCommunity_ClanAnnouncementInfo* announcement_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete announcement_body_;
  }
  if (announcement_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(announcement_body);
    if (message_arena != submessage_arena) {
      announcement_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, announcement_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  announcement_body_ = announcement_body;
  // @@protoc_insertion_point(field_set_allocated:CClanEventData.announcement_body)
}

// optional bool published = 16;
inline bool CClanEventData::_internal_has_published() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CClanEventData::has_published() const {
  return _internal_has_published();
}
inline void CClanEventData::clear_published() {
  published_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CClanEventData::_internal_published() const {
  return published_;
}
inline bool CClanEventData::published() const {
  // @@protoc_insertion_point(field_get:CClanEventData.published)
  return _internal_published();
}
inline void CClanEventData::_internal_set_published(bool value) {
  _has_bits_[0] |= 0x00004000u;
  published_ = value;
}
inline void CClanEventData::set_published(bool value) {
  _internal_set_published(value);
  // @@protoc_insertion_point(field_set:CClanEventData.published)
}

// optional bool hidden = 17;
inline bool CClanEventData::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CClanEventData::has_hidden() const {
  return _internal_has_hidden();
}
inline void CClanEventData::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CClanEventData::_internal_hidden() const {
  return hidden_;
}
inline bool CClanEventData::hidden() const {
  // @@protoc_insertion_point(field_get:CClanEventData.hidden)
  return _internal_hidden();
}
inline void CClanEventData::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00008000u;
  hidden_ = value;
}
inline void CClanEventData::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:CClanEventData.hidden)
}

// optional uint32 rtime32_visibility_start = 18;
inline bool CClanEventData::_internal_has_rtime32_visibility_start() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_visibility_start() const {
  return _internal_has_rtime32_visibility_start();
}
inline void CClanEventData::clear_rtime32_visibility_start() {
  rtime32_visibility_start_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_rtime32_visibility_start() const {
  return rtime32_visibility_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::rtime32_visibility_start() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_visibility_start)
  return _internal_rtime32_visibility_start();
}
inline void CClanEventData::_internal_set_rtime32_visibility_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  rtime32_visibility_start_ = value;
}
inline void CClanEventData::set_rtime32_visibility_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime32_visibility_start(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_visibility_start)
}

// optional uint32 rtime32_visibility_end = 19;
inline bool CClanEventData::_internal_has_rtime32_visibility_end() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_visibility_end() const {
  return _internal_has_rtime32_visibility_end();
}
inline void CClanEventData::clear_rtime32_visibility_end() {
  rtime32_visibility_end_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_rtime32_visibility_end() const {
  return rtime32_visibility_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::rtime32_visibility_end() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_visibility_end)
  return _internal_rtime32_visibility_end();
}
inline void CClanEventData::_internal_set_rtime32_visibility_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  rtime32_visibility_end_ = value;
}
inline void CClanEventData::set_rtime32_visibility_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime32_visibility_end(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_visibility_end)
}

// optional uint32 broadcaster_accountid = 20;
inline bool CClanEventData::_internal_has_broadcaster_accountid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CClanEventData::has_broadcaster_accountid() const {
  return _internal_has_broadcaster_accountid();
}
inline void CClanEventData::clear_broadcaster_accountid() {
  broadcaster_accountid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_broadcaster_accountid() const {
  return broadcaster_accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::broadcaster_accountid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.broadcaster_accountid)
  return _internal_broadcaster_accountid();
}
inline void CClanEventData::_internal_set_broadcaster_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  broadcaster_accountid_ = value;
}
inline void CClanEventData::set_broadcaster_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_broadcaster_accountid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.broadcaster_accountid)
}

// optional uint32 follower_count = 21;
inline bool CClanEventData::_internal_has_follower_count() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CClanEventData::has_follower_count() const {
  return _internal_has_follower_count();
}
inline void CClanEventData::clear_follower_count() {
  follower_count_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_follower_count() const {
  return follower_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::follower_count() const {
  // @@protoc_insertion_point(field_get:CClanEventData.follower_count)
  return _internal_follower_count();
}
inline void CClanEventData::_internal_set_follower_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  follower_count_ = value;
}
inline void CClanEventData::set_follower_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_follower_count(value);
  // @@protoc_insertion_point(field_set:CClanEventData.follower_count)
}

// optional uint32 ignore_count = 22;
inline bool CClanEventData::_internal_has_ignore_count() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CClanEventData::has_ignore_count() const {
  return _internal_has_ignore_count();
}
inline void CClanEventData::clear_ignore_count() {
  ignore_count_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_ignore_count() const {
  return ignore_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::ignore_count() const {
  // @@protoc_insertion_point(field_get:CClanEventData.ignore_count)
  return _internal_ignore_count();
}
inline void CClanEventData::_internal_set_ignore_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  ignore_count_ = value;
}
inline void CClanEventData::set_ignore_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ignore_count(value);
  // @@protoc_insertion_point(field_set:CClanEventData.ignore_count)
}

// optional fixed64 forum_topic_id = 23;
inline bool CClanEventData::_internal_has_forum_topic_id() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CClanEventData::has_forum_topic_id() const {
  return _internal_has_forum_topic_id();
}
inline void CClanEventData::clear_forum_topic_id() {
  forum_topic_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::_internal_forum_topic_id() const {
  return forum_topic_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::forum_topic_id() const {
  // @@protoc_insertion_point(field_get:CClanEventData.forum_topic_id)
  return _internal_forum_topic_id();
}
inline void CClanEventData::_internal_set_forum_topic_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  forum_topic_id_ = value;
}
inline void CClanEventData::set_forum_topic_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_forum_topic_id(value);
  // @@protoc_insertion_point(field_set:CClanEventData.forum_topic_id)
}

// optional uint32 rtime32_last_modified = 24;
inline bool CClanEventData::_internal_has_rtime32_last_modified() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime32_last_modified() const {
  return _internal_has_rtime32_last_modified();
}
inline void CClanEventData::clear_rtime32_last_modified() {
  rtime32_last_modified_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_rtime32_last_modified() const {
  return rtime32_last_modified_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::rtime32_last_modified() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime32_last_modified)
  return _internal_rtime32_last_modified();
}
inline void CClanEventData::_internal_set_rtime32_last_modified(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  rtime32_last_modified_ = value;
}
inline void CClanEventData::set_rtime32_last_modified(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime32_last_modified(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime32_last_modified)
}

// optional fixed64 news_post_gid = 25;
inline bool CClanEventData::_internal_has_news_post_gid() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CClanEventData::has_news_post_gid() const {
  return _internal_has_news_post_gid();
}
inline void CClanEventData::clear_news_post_gid() {
  news_post_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::_internal_news_post_gid() const {
  return news_post_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClanEventData::news_post_gid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.news_post_gid)
  return _internal_news_post_gid();
}
inline void CClanEventData::_internal_set_news_post_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00400000u;
  news_post_gid_ = value;
}
inline void CClanEventData::set_news_post_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_news_post_gid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.news_post_gid)
}

// optional uint32 rtime_mod_reviewed = 26;
inline bool CClanEventData::_internal_has_rtime_mod_reviewed() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CClanEventData::has_rtime_mod_reviewed() const {
  return _internal_has_rtime_mod_reviewed();
}
inline void CClanEventData::clear_rtime_mod_reviewed() {
  rtime_mod_reviewed_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_rtime_mod_reviewed() const {
  return rtime_mod_reviewed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::rtime_mod_reviewed() const {
  // @@protoc_insertion_point(field_get:CClanEventData.rtime_mod_reviewed)
  return _internal_rtime_mod_reviewed();
}
inline void CClanEventData::_internal_set_rtime_mod_reviewed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  rtime_mod_reviewed_ = value;
}
inline void CClanEventData::set_rtime_mod_reviewed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime_mod_reviewed(value);
  // @@protoc_insertion_point(field_set:CClanEventData.rtime_mod_reviewed)
}

// optional uint32 featured_app_tagid = 27;
inline bool CClanEventData::_internal_has_featured_app_tagid() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CClanEventData::has_featured_app_tagid() const {
  return _internal_has_featured_app_tagid();
}
inline void CClanEventData::clear_featured_app_tagid() {
  featured_app_tagid_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_featured_app_tagid() const {
  return featured_app_tagid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::featured_app_tagid() const {
  // @@protoc_insertion_point(field_get:CClanEventData.featured_app_tagid)
  return _internal_featured_app_tagid();
}
inline void CClanEventData::_internal_set_featured_app_tagid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  featured_app_tagid_ = value;
}
inline void CClanEventData::set_featured_app_tagid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_featured_app_tagid(value);
  // @@protoc_insertion_point(field_set:CClanEventData.featured_app_tagid)
}

// repeated uint32 referenced_appids = 28;
inline int CClanEventData::_internal_referenced_appids_size() const {
  return referenced_appids_.size();
}
inline int CClanEventData::referenced_appids_size() const {
  return _internal_referenced_appids_size();
}
inline void CClanEventData::clear_referenced_appids() {
  referenced_appids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::_internal_referenced_appids(int index) const {
  return referenced_appids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClanEventData::referenced_appids(int index) const {
  // @@protoc_insertion_point(field_get:CClanEventData.referenced_appids)
  return _internal_referenced_appids(index);
}
inline void CClanEventData::set_referenced_appids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  referenced_appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CClanEventData.referenced_appids)
}
inline void CClanEventData::_internal_add_referenced_appids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  referenced_appids_.Add(value);
}
inline void CClanEventData::add_referenced_appids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_referenced_appids(value);
  // @@protoc_insertion_point(field_add:CClanEventData.referenced_appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CClanEventData::_internal_referenced_appids() const {
  return referenced_appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CClanEventData::referenced_appids() const {
  // @@protoc_insertion_point(field_list:CClanEventData.referenced_appids)
  return _internal_referenced_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CClanEventData::_internal_mutable_referenced_appids() {
  return &referenced_appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CClanEventData::mutable_referenced_appids() {
  // @@protoc_insertion_point(field_mutable_list:CClanEventData.referenced_appids)
  return _internal_mutable_referenced_appids();
}

// -------------------------------------------------------------------

// CBilling_Address

// optional string first_name = 1;
inline bool CBilling_Address::_internal_has_first_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBilling_Address::has_first_name() const {
  return _internal_has_first_name();
}
inline void CBilling_Address::clear_first_name() {
  first_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBilling_Address::first_name() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.first_name)
  return _internal_first_name();
}
inline void CBilling_Address::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.first_name)
}
inline std::string* CBilling_Address::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& CBilling_Address::_internal_first_name() const {
  return first_name_.Get();
}
inline void CBilling_Address::_internal_set_first_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_first_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.first_name)
}
inline void CBilling_Address::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.first_name)
}
inline void CBilling_Address::set_first_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.first_name)
}
inline std::string* CBilling_Address::_internal_mutable_first_name() {
  _has_bits_[0] |= 0x00000001u;
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_first_name() {
  // @@protoc_insertion_point(field_release:CBilling_Address.first_name)
  if (!_internal_has_first_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return first_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.first_name)
}

// optional string last_name = 2;
inline bool CBilling_Address::_internal_has_last_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBilling_Address::has_last_name() const {
  return _internal_has_last_name();
}
inline void CBilling_Address::clear_last_name() {
  last_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBilling_Address::last_name() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.last_name)
  return _internal_last_name();
}
inline void CBilling_Address::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.last_name)
}
inline std::string* CBilling_Address::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& CBilling_Address::_internal_last_name() const {
  return last_name_.Get();
}
inline void CBilling_Address::_internal_set_last_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_last_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.last_name)
}
inline void CBilling_Address::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.last_name)
}
inline void CBilling_Address::set_last_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.last_name)
}
inline std::string* CBilling_Address::_internal_mutable_last_name() {
  _has_bits_[0] |= 0x00000002u;
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_last_name() {
  // @@protoc_insertion_point(field_release:CBilling_Address.last_name)
  if (!_internal_has_last_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return last_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.last_name)
}

// optional string address1 = 3;
inline bool CBilling_Address::_internal_has_address1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBilling_Address::has_address1() const {
  return _internal_has_address1();
}
inline void CBilling_Address::clear_address1() {
  address1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CBilling_Address::address1() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.address1)
  return _internal_address1();
}
inline void CBilling_Address::set_address1(const std::string& value) {
  _internal_set_address1(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.address1)
}
inline std::string* CBilling_Address::mutable_address1() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.address1)
  return _internal_mutable_address1();
}
inline const std::string& CBilling_Address::_internal_address1() const {
  return address1_.Get();
}
inline void CBilling_Address::_internal_set_address1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  address1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_address1(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  address1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.address1)
}
inline void CBilling_Address::set_address1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  address1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.address1)
}
inline void CBilling_Address::set_address1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  address1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.address1)
}
inline std::string* CBilling_Address::_internal_mutable_address1() {
  _has_bits_[0] |= 0x00000004u;
  return address1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_address1() {
  // @@protoc_insertion_point(field_release:CBilling_Address.address1)
  if (!_internal_has_address1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return address1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_address1(std::string* address1) {
  if (address1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  address1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.address1)
}

// optional string address2 = 4;
inline bool CBilling_Address::_internal_has_address2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBilling_Address::has_address2() const {
  return _internal_has_address2();
}
inline void CBilling_Address::clear_address2() {
  address2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CBilling_Address::address2() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.address2)
  return _internal_address2();
}
inline void CBilling_Address::set_address2(const std::string& value) {
  _internal_set_address2(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.address2)
}
inline std::string* CBilling_Address::mutable_address2() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.address2)
  return _internal_mutable_address2();
}
inline const std::string& CBilling_Address::_internal_address2() const {
  return address2_.Get();
}
inline void CBilling_Address::_internal_set_address2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  address2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_address2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  address2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.address2)
}
inline void CBilling_Address::set_address2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  address2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.address2)
}
inline void CBilling_Address::set_address2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  address2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.address2)
}
inline std::string* CBilling_Address::_internal_mutable_address2() {
  _has_bits_[0] |= 0x00000008u;
  return address2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_address2() {
  // @@protoc_insertion_point(field_release:CBilling_Address.address2)
  if (!_internal_has_address2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return address2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_address2(std::string* address2) {
  if (address2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  address2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.address2)
}

// optional string city = 5;
inline bool CBilling_Address::_internal_has_city() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBilling_Address::has_city() const {
  return _internal_has_city();
}
inline void CBilling_Address::clear_city() {
  city_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CBilling_Address::city() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.city)
  return _internal_city();
}
inline void CBilling_Address::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.city)
}
inline std::string* CBilling_Address::mutable_city() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.city)
  return _internal_mutable_city();
}
inline const std::string& CBilling_Address::_internal_city() const {
  return city_.Get();
}
inline void CBilling_Address::_internal_set_city(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_city(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  city_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.city)
}
inline void CBilling_Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.city)
}
inline void CBilling_Address::set_city(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.city)
}
inline std::string* CBilling_Address::_internal_mutable_city() {
  _has_bits_[0] |= 0x00000010u;
  return city_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_city() {
  // @@protoc_insertion_point(field_release:CBilling_Address.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return city_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.city)
}

// optional string us_state = 6;
inline bool CBilling_Address::_internal_has_us_state() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBilling_Address::has_us_state() const {
  return _internal_has_us_state();
}
inline void CBilling_Address::clear_us_state() {
  us_state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CBilling_Address::us_state() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.us_state)
  return _internal_us_state();
}
inline void CBilling_Address::set_us_state(const std::string& value) {
  _internal_set_us_state(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.us_state)
}
inline std::string* CBilling_Address::mutable_us_state() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.us_state)
  return _internal_mutable_us_state();
}
inline const std::string& CBilling_Address::_internal_us_state() const {
  return us_state_.Get();
}
inline void CBilling_Address::_internal_set_us_state(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  us_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_us_state(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  us_state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.us_state)
}
inline void CBilling_Address::set_us_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  us_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.us_state)
}
inline void CBilling_Address::set_us_state(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  us_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.us_state)
}
inline std::string* CBilling_Address::_internal_mutable_us_state() {
  _has_bits_[0] |= 0x00000020u;
  return us_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_us_state() {
  // @@protoc_insertion_point(field_release:CBilling_Address.us_state)
  if (!_internal_has_us_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return us_state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_us_state(std::string* us_state) {
  if (us_state != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  us_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), us_state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.us_state)
}

// optional string country_code = 7;
inline bool CBilling_Address::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBilling_Address::has_country_code() const {
  return _internal_has_country_code();
}
inline void CBilling_Address::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CBilling_Address::country_code() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.country_code)
  return _internal_country_code();
}
inline void CBilling_Address::set_country_code(const std::string& value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.country_code)
}
inline std::string* CBilling_Address::mutable_country_code() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.country_code)
  return _internal_mutable_country_code();
}
inline const std::string& CBilling_Address::_internal_country_code() const {
  return country_code_.Get();
}
inline void CBilling_Address::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  country_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.country_code)
}
inline void CBilling_Address::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.country_code)
}
inline void CBilling_Address::set_country_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.country_code)
}
inline std::string* CBilling_Address::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000040u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_country_code() {
  // @@protoc_insertion_point(field_release:CBilling_Address.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.country_code)
}

// optional string postcode = 8;
inline bool CBilling_Address::_internal_has_postcode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBilling_Address::has_postcode() const {
  return _internal_has_postcode();
}
inline void CBilling_Address::clear_postcode() {
  postcode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CBilling_Address::postcode() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.postcode)
  return _internal_postcode();
}
inline void CBilling_Address::set_postcode(const std::string& value) {
  _internal_set_postcode(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.postcode)
}
inline std::string* CBilling_Address::mutable_postcode() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.postcode)
  return _internal_mutable_postcode();
}
inline const std::string& CBilling_Address::_internal_postcode() const {
  return postcode_.Get();
}
inline void CBilling_Address::_internal_set_postcode(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_postcode(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  postcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.postcode)
}
inline void CBilling_Address::set_postcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.postcode)
}
inline void CBilling_Address::set_postcode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  postcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.postcode)
}
inline std::string* CBilling_Address::_internal_mutable_postcode() {
  _has_bits_[0] |= 0x00000080u;
  return postcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_postcode() {
  // @@protoc_insertion_point(field_release:CBilling_Address.postcode)
  if (!_internal_has_postcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return postcode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_postcode(std::string* postcode) {
  if (postcode != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  postcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.postcode)
}

// optional int32 zip_plus4 = 9;
inline bool CBilling_Address::_internal_has_zip_plus4() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBilling_Address::has_zip_plus4() const {
  return _internal_has_zip_plus4();
}
inline void CBilling_Address::clear_zip_plus4() {
  zip_plus4_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBilling_Address::_internal_zip_plus4() const {
  return zip_plus4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBilling_Address::zip_plus4() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.zip_plus4)
  return _internal_zip_plus4();
}
inline void CBilling_Address::_internal_set_zip_plus4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  zip_plus4_ = value;
}
inline void CBilling_Address::set_zip_plus4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zip_plus4(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.zip_plus4)
}

// optional string phone = 10;
inline bool CBilling_Address::_internal_has_phone() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBilling_Address::has_phone() const {
  return _internal_has_phone();
}
inline void CBilling_Address::clear_phone() {
  phone_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CBilling_Address::phone() const {
  // @@protoc_insertion_point(field_get:CBilling_Address.phone)
  return _internal_phone();
}
inline void CBilling_Address::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:CBilling_Address.phone)
}
inline std::string* CBilling_Address::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:CBilling_Address.phone)
  return _internal_mutable_phone();
}
inline const std::string& CBilling_Address::_internal_phone() const {
  return phone_.Get();
}
inline void CBilling_Address::_internal_set_phone(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBilling_Address::set_phone(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBilling_Address.phone)
}
inline void CBilling_Address::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBilling_Address.phone)
}
inline void CBilling_Address::set_phone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBilling_Address.phone)
}
inline std::string* CBilling_Address::_internal_mutable_phone() {
  _has_bits_[0] |= 0x00000100u;
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBilling_Address::release_phone() {
  // @@protoc_insertion_point(field_release:CBilling_Address.phone)
  if (!_internal_has_phone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return phone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBilling_Address::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBilling_Address.phone)
}

// -------------------------------------------------------------------

// CPackageReservationStatus

// optional uint32 packageid = 1;
inline bool CPackageReservationStatus::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_packageid() const {
  return _internal_has_packageid();
}
inline void CPackageReservationStatus::clear_packageid() {
  packageid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPackageReservationStatus::_internal_packageid() const {
  return packageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPackageReservationStatus::packageid() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.packageid)
  return _internal_packageid();
}
inline void CPackageReservationStatus::_internal_set_packageid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  packageid_ = value;
}
inline void CPackageReservationStatus::set_packageid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.packageid)
}

// optional int32 reservation_state = 2;
inline bool CPackageReservationStatus::_internal_has_reservation_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_reservation_state() const {
  return _internal_has_reservation_state();
}
inline void CPackageReservationStatus::clear_reservation_state() {
  reservation_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPackageReservationStatus::_internal_reservation_state() const {
  return reservation_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPackageReservationStatus::reservation_state() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.reservation_state)
  return _internal_reservation_state();
}
inline void CPackageReservationStatus::_internal_set_reservation_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  reservation_state_ = value;
}
inline void CPackageReservationStatus::set_reservation_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reservation_state(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.reservation_state)
}

// optional int32 queue_position = 3;
inline bool CPackageReservationStatus::_internal_has_queue_position() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_queue_position() const {
  return _internal_has_queue_position();
}
inline void CPackageReservationStatus::clear_queue_position() {
  queue_position_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPackageReservationStatus::_internal_queue_position() const {
  return queue_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPackageReservationStatus::queue_position() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.queue_position)
  return _internal_queue_position();
}
inline void CPackageReservationStatus::_internal_set_queue_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  queue_position_ = value;
}
inline void CPackageReservationStatus::set_queue_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_queue_position(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.queue_position)
}

// optional int32 total_queue_size = 4;
inline bool CPackageReservationStatus::_internal_has_total_queue_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_total_queue_size() const {
  return _internal_has_total_queue_size();
}
inline void CPackageReservationStatus::clear_total_queue_size() {
  total_queue_size_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPackageReservationStatus::_internal_total_queue_size() const {
  return total_queue_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPackageReservationStatus::total_queue_size() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.total_queue_size)
  return _internal_total_queue_size();
}
inline void CPackageReservationStatus::_internal_set_total_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  total_queue_size_ = value;
}
inline void CPackageReservationStatus::set_total_queue_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_queue_size(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.total_queue_size)
}

// optional string reservation_country_code = 5;
inline bool CPackageReservationStatus::_internal_has_reservation_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_reservation_country_code() const {
  return _internal_has_reservation_country_code();
}
inline void CPackageReservationStatus::clear_reservation_country_code() {
  reservation_country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPackageReservationStatus::reservation_country_code() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.reservation_country_code)
  return _internal_reservation_country_code();
}
inline void CPackageReservationStatus::set_reservation_country_code(const std::string& value) {
  _internal_set_reservation_country_code(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.reservation_country_code)
}
inline std::string* CPackageReservationStatus::mutable_reservation_country_code() {
  // @@protoc_insertion_point(field_mutable:CPackageReservationStatus.reservation_country_code)
  return _internal_mutable_reservation_country_code();
}
inline const std::string& CPackageReservationStatus::_internal_reservation_country_code() const {
  return reservation_country_code_.Get();
}
inline void CPackageReservationStatus::_internal_set_reservation_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reservation_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPackageReservationStatus::set_reservation_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reservation_country_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPackageReservationStatus.reservation_country_code)
}
inline void CPackageReservationStatus::set_reservation_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reservation_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPackageReservationStatus.reservation_country_code)
}
inline void CPackageReservationStatus::set_reservation_country_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reservation_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPackageReservationStatus.reservation_country_code)
}
inline std::string* CPackageReservationStatus::_internal_mutable_reservation_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return reservation_country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPackageReservationStatus::release_reservation_country_code() {
  // @@protoc_insertion_point(field_release:CPackageReservationStatus.reservation_country_code)
  if (!_internal_has_reservation_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reservation_country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPackageReservationStatus::set_allocated_reservation_country_code(std::string* reservation_country_code) {
  if (reservation_country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reservation_country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reservation_country_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPackageReservationStatus.reservation_country_code)
}

// optional bool expired = 6;
inline bool CPackageReservationStatus::_internal_has_expired() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_expired() const {
  return _internal_has_expired();
}
inline void CPackageReservationStatus::clear_expired() {
  expired_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CPackageReservationStatus::_internal_expired() const {
  return expired_;
}
inline bool CPackageReservationStatus::expired() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.expired)
  return _internal_expired();
}
inline void CPackageReservationStatus::_internal_set_expired(bool value) {
  _has_bits_[0] |= 0x00000020u;
  expired_ = value;
}
inline void CPackageReservationStatus::set_expired(bool value) {
  _internal_set_expired(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.expired)
}

// optional uint32 time_expires = 7;
inline bool CPackageReservationStatus::_internal_has_time_expires() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_time_expires() const {
  return _internal_has_time_expires();
}
inline void CPackageReservationStatus::clear_time_expires() {
  time_expires_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPackageReservationStatus::_internal_time_expires() const {
  return time_expires_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPackageReservationStatus::time_expires() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.time_expires)
  return _internal_time_expires();
}
inline void CPackageReservationStatus::_internal_set_time_expires(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  time_expires_ = value;
}
inline void CPackageReservationStatus::set_time_expires(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_expires(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.time_expires)
}

// optional uint32 time_reserved = 8;
inline bool CPackageReservationStatus::_internal_has_time_reserved() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPackageReservationStatus::has_time_reserved() const {
  return _internal_has_time_reserved();
}
inline void CPackageReservationStatus::clear_time_reserved() {
  time_reserved_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPackageReservationStatus::_internal_time_reserved() const {
  return time_reserved_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPackageReservationStatus::time_reserved() const {
  // @@protoc_insertion_point(field_get:CPackageReservationStatus.time_reserved)
  return _internal_time_reserved();
}
inline void CPackageReservationStatus::_internal_set_time_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  time_reserved_ = value;
}
inline void CPackageReservationStatus::set_time_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_reserved(value);
  // @@protoc_insertion_point(field_set:CPackageReservationStatus.time_reserved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EProtoClanEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EProtoClanEventType>() {
  return ::EProtoClanEventType_descriptor();
}
template <> struct is_proto_enum< ::PartnerEventNotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PartnerEventNotificationType>() {
  return ::PartnerEventNotificationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbase_2eproto
